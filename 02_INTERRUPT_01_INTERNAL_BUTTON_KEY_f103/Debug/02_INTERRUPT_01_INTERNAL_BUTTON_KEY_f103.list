
02_INTERRUPT_01_INTERNAL_BUTTON_KEY_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08007db8  08007db8  00008db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f08  08007f08  00008f08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08007f08  08007f08  00008f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f10  08007f10  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f10  08007f10  00008f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f14  08007f14  00008f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007f18  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000070  08007f88  00009070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08007f88  00009250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000798c  00000000  00000000  00009099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229e  00000000  00000000  00010a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  00012cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000075c  00000000  00000000  000136c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001877e  00000000  00000000  00013e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c08d  00000000  00000000  0002c5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084bd7  00000000  00000000  0003862f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd206  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e34  00000000  00000000  000bd24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000c0080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d9c 	.word	0x08007d9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08007d9c 	.word	0x08007d9c

0800014c <_stack_init>:
 800014c:	f5a3 3a80 	sub.w	sl, r3, #65536	@ 0x10000
 8000150:	4770      	bx	lr
 8000152:	bf00      	nop

08000154 <_mainCRTStartup>:
 8000154:	4b17      	ldr	r3, [pc, #92]	@ (80001b4 <_mainCRTStartup+0x60>)
 8000156:	2b00      	cmp	r3, #0
 8000158:	bf08      	it	eq
 800015a:	4b13      	ldreq	r3, [pc, #76]	@ (80001a8 <_mainCRTStartup+0x54>)
 800015c:	469d      	mov	sp, r3
 800015e:	f7ff fff5 	bl	800014c <_stack_init>
 8000162:	2100      	movs	r1, #0
 8000164:	468b      	mov	fp, r1
 8000166:	460f      	mov	r7, r1
 8000168:	4813      	ldr	r0, [pc, #76]	@ (80001b8 <_mainCRTStartup+0x64>)
 800016a:	4a14      	ldr	r2, [pc, #80]	@ (80001bc <_mainCRTStartup+0x68>)
 800016c:	1a12      	subs	r2, r2, r0
 800016e:	f006 fd6d 	bl	8006c4c <memset>
 8000172:	4b0e      	ldr	r3, [pc, #56]	@ (80001ac <_mainCRTStartup+0x58>)
 8000174:	2b00      	cmp	r3, #0
 8000176:	d000      	beq.n	800017a <_mainCRTStartup+0x26>
 8000178:	4798      	blx	r3
 800017a:	4b0d      	ldr	r3, [pc, #52]	@ (80001b0 <_mainCRTStartup+0x5c>)
 800017c:	2b00      	cmp	r3, #0
 800017e:	d000      	beq.n	8000182 <_mainCRTStartup+0x2e>
 8000180:	4798      	blx	r3
 8000182:	2000      	movs	r0, #0
 8000184:	2100      	movs	r1, #0
 8000186:	0004      	movs	r4, r0
 8000188:	000d      	movs	r5, r1
 800018a:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <_mainCRTStartup+0x6c>)
 800018c:	2800      	cmp	r0, #0
 800018e:	d002      	beq.n	8000196 <_mainCRTStartup+0x42>
 8000190:	480c      	ldr	r0, [pc, #48]	@ (80001c4 <_mainCRTStartup+0x70>)
 8000192:	f3af 8000 	nop.w
 8000196:	f006 fd67 	bl	8006c68 <__libc_init_array>
 800019a:	0020      	movs	r0, r4
 800019c:	0029      	movs	r1, r5
 800019e:	f000 f851 	bl	8000244 <main>
 80001a2:	f006 fb7b 	bl	800689c <exit>
 80001a6:	bf00      	nop
 80001a8:	00080000 	.word	0x00080000
	...
 80001b8:	20000070 	.word	0x20000070
 80001bc:	20000250 	.word	0x20000250
	...
 80001c8:	08007f18 	.word	0x08007f18
 80001cc:	20000000 	.word	0x20000000
 80001d0:	20000070 	.word	0x20000070
 80001d4:	20000070 	.word	0x20000070
 80001d8:	20000250 	.word	0x20000250

080001dc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 if ( ch == '\n' )
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b0a      	cmp	r3, #10
 80001e8:	d106      	bne.n	80001f8 <__io_putchar+0x1c>
	 HAL_UART_Transmit(&huart2, (uint8_t*)&"\r", 1, HAL_MAX_DELAY);
 80001ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80001ee:	2201      	movs	r2, #1
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__io_putchar+0x34>)
 80001f2:	4808      	ldr	r0, [pc, #32]	@ (8000214 <__io_putchar+0x38>)
 80001f4:	f004 fc91 	bl	8004b1a <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80001f8:	1d39      	adds	r1, r7, #4
 80001fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80001fe:	2201      	movs	r2, #1
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__io_putchar+0x38>)
 8000202:	f004 fc8a 	bl	8004b1a <HAL_UART_Transmit>
 return ch;
 8000206:	687b      	ldr	r3, [r7, #4]
}
 8000208:	4618      	mov	r0, r3
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	08007ddc 	.word	0x08007ddc
 8000214:	2000008c 	.word	0x2000008c

08000218 <__io_getchar>:

int __io_getchar(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	uint8_t ch;

	while( HAL_OK != HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY) )
 800021e:	bf00      	nop
 8000220:	1df9      	adds	r1, r7, #7
 8000222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000226:	2201      	movs	r2, #1
 8000228:	4805      	ldr	r0, [pc, #20]	@ (8000240 <__io_getchar+0x28>)
 800022a:	f004 fd08 	bl	8004c3e <HAL_UART_Receive>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d1f5      	bne.n	8000220 <__io_getchar+0x8>
	{
		;
	}
	return ch;
 8000234:	79fb      	ldrb	r3, [r7, #7]
}
 8000236:	4618      	mov	r0, r3
 8000238:	3708      	adds	r7, #8
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	2000008c 	.word	0x2000008c

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f000 fbd2 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f820 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f000 f88a 	bl	8000368 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000254:	f000 f85e 	bl	8000314 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\n\nHELLO, STM32\n");
 8000258:	4809      	ldr	r0, [pc, #36]	@ (8000280 <main+0x3c>)
 800025a:	f006 fcef 	bl	8006c3c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 800025e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000262:	4808      	ldr	r0, [pc, #32]	@ (8000284 <main+0x40>)
 8000264:	f003 f8ce 	bl	8003404 <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d003      	beq.n	8000276 <main+0x32>
    {
    	printf("HIGH level\n");
 800026e:	4806      	ldr	r0, [pc, #24]	@ (8000288 <main+0x44>)
 8000270:	f006 fce4 	bl	8006c3c <puts>
 8000274:	e7f3      	b.n	800025e <main+0x1a>
    }else{
    	printf("LOW level\n");
 8000276:	4805      	ldr	r0, [pc, #20]	@ (800028c <main+0x48>)
 8000278:	f006 fce0 	bl	8006c3c <puts>
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 800027c:	e7ef      	b.n	800025e <main+0x1a>
 800027e:	bf00      	nop
 8000280:	08007de0 	.word	0x08007de0
 8000284:	40011000 	.word	0x40011000
 8000288:	08007df0 	.word	0x08007df0
 800028c:	08007dfc 	.word	0x08007dfc

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b090      	sub	sp, #64	@ 0x40
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	2228      	movs	r2, #40	@ 0x28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f006 fcd4 	bl	8006c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b2:	2302      	movs	r3, #2
 80002b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b6:	2301      	movs	r3, #1
 80002b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ba:	2310      	movs	r3, #16
 80002bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002be:	2302      	movs	r3, #2
 80002c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002c2:	2300      	movs	r3, #0
 80002c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002c6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80002ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f107 0318 	add.w	r3, r7, #24
 80002d0:	4618      	mov	r0, r3
 80002d2:	f003 fb8d 	bl	80039f0 <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002dc:	f000 f8b2 	bl	8000444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	230f      	movs	r3, #15
 80002e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	2302      	movs	r3, #2
 80002e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2102      	movs	r1, #2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f003 fdfa 	bl	8003ef4 <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000306:	f000 f89d 	bl	8000444 <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3740      	adds	r7, #64	@ 0x40
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000318:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <MX_USART2_UART_Init+0x4c>)
 800031a:	4a12      	ldr	r2, [pc, #72]	@ (8000364 <MX_USART2_UART_Init+0x50>)
 800031c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800031e:	4b10      	ldr	r3, [pc, #64]	@ (8000360 <MX_USART2_UART_Init+0x4c>)
 8000320:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000326:	4b0e      	ldr	r3, [pc, #56]	@ (8000360 <MX_USART2_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800032c:	4b0c      	ldr	r3, [pc, #48]	@ (8000360 <MX_USART2_UART_Init+0x4c>)
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000332:	4b0b      	ldr	r3, [pc, #44]	@ (8000360 <MX_USART2_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000338:	4b09      	ldr	r3, [pc, #36]	@ (8000360 <MX_USART2_UART_Init+0x4c>)
 800033a:	220c      	movs	r2, #12
 800033c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033e:	4b08      	ldr	r3, [pc, #32]	@ (8000360 <MX_USART2_UART_Init+0x4c>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <MX_USART2_UART_Init+0x4c>)
 8000346:	2200      	movs	r2, #0
 8000348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800034a:	4805      	ldr	r0, [pc, #20]	@ (8000360 <MX_USART2_UART_Init+0x4c>)
 800034c:	f004 fa2c 	bl	80047a8 <HAL_UART_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000356:	f000 f875 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000008c 	.word	0x2000008c
 8000364:	40004400 	.word	0x40004400

08000368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036e:	f107 0310 	add.w	r3, r7, #16
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037c:	4b2d      	ldr	r3, [pc, #180]	@ (8000434 <MX_GPIO_Init+0xcc>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a2c      	ldr	r2, [pc, #176]	@ (8000434 <MX_GPIO_Init+0xcc>)
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b2a      	ldr	r3, [pc, #168]	@ (8000434 <MX_GPIO_Init+0xcc>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0310 	and.w	r3, r3, #16
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000394:	4b27      	ldr	r3, [pc, #156]	@ (8000434 <MX_GPIO_Init+0xcc>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a26      	ldr	r2, [pc, #152]	@ (8000434 <MX_GPIO_Init+0xcc>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b24      	ldr	r3, [pc, #144]	@ (8000434 <MX_GPIO_Init+0xcc>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0320 	and.w	r3, r3, #32
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b21      	ldr	r3, [pc, #132]	@ (8000434 <MX_GPIO_Init+0xcc>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a20      	ldr	r2, [pc, #128]	@ (8000434 <MX_GPIO_Init+0xcc>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <MX_GPIO_Init+0xcc>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000434 <MX_GPIO_Init+0xcc>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000434 <MX_GPIO_Init+0xcc>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b18      	ldr	r3, [pc, #96]	@ (8000434 <MX_GPIO_Init+0xcc>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0308 	and.w	r3, r3, #8
 80003d8:	603b      	str	r3, [r7, #0]
 80003da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2120      	movs	r1, #32
 80003e0:	4815      	ldr	r0, [pc, #84]	@ (8000438 <MX_GPIO_Init+0xd0>)
 80003e2:	f003 f826 	bl	8003432 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ec:	4b13      	ldr	r3, [pc, #76]	@ (800043c <MX_GPIO_Init+0xd4>)
 80003ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	4619      	mov	r1, r3
 80003fa:	4811      	ldr	r0, [pc, #68]	@ (8000440 <MX_GPIO_Init+0xd8>)
 80003fc:	f002 fdc2 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000400:	2320      	movs	r3, #32
 8000402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2302      	movs	r3, #2
 800040e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	4808      	ldr	r0, [pc, #32]	@ (8000438 <MX_GPIO_Init+0xd0>)
 8000418:	f002 fdb4 	bl	8002f84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2100      	movs	r1, #0
 8000420:	2028      	movs	r0, #40	@ 0x28
 8000422:	f000 fe64 	bl	80010ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000426:	2028      	movs	r0, #40	@ 0x28
 8000428:	f000 fe7d 	bl	8001126 <HAL_NVIC_EnableIRQ>

}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000
 8000438:	40010800 	.word	0x40010800
 800043c:	10110000 	.word	0x10110000
 8000440:	40011000 	.word	0x40011000

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <Error_Handler+0x8>

08000450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000456:	4b15      	ldr	r3, [pc, #84]	@ (80004ac <HAL_MspInit+0x5c>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a14      	ldr	r2, [pc, #80]	@ (80004ac <HAL_MspInit+0x5c>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6193      	str	r3, [r2, #24]
 8000462:	4b12      	ldr	r3, [pc, #72]	@ (80004ac <HAL_MspInit+0x5c>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <HAL_MspInit+0x5c>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	4a0e      	ldr	r2, [pc, #56]	@ (80004ac <HAL_MspInit+0x5c>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000478:	61d3      	str	r3, [r2, #28]
 800047a:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <HAL_MspInit+0x5c>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000486:	4b0a      	ldr	r3, [pc, #40]	@ (80004b0 <HAL_MspInit+0x60>)
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	4a04      	ldr	r2, [pc, #16]	@ (80004b0 <HAL_MspInit+0x60>)
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40010000 	.word	0x40010000

080004b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a15      	ldr	r2, [pc, #84]	@ (8000524 <HAL_UART_MspInit+0x70>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d123      	bne.n	800051c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004d4:	4b14      	ldr	r3, [pc, #80]	@ (8000528 <HAL_UART_MspInit+0x74>)
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	4a13      	ldr	r2, [pc, #76]	@ (8000528 <HAL_UART_MspInit+0x74>)
 80004da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004de:	61d3      	str	r3, [r2, #28]
 80004e0:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <HAL_UART_MspInit+0x74>)
 80004e2:	69db      	ldr	r3, [r3, #28]
 80004e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <HAL_UART_MspInit+0x74>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000528 <HAL_UART_MspInit+0x74>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000528 <HAL_UART_MspInit+0x74>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	60bb      	str	r3, [r7, #8]
 8000502:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000504:	230c      	movs	r3, #12
 8000506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000508:	2302      	movs	r3, #2
 800050a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	2302      	movs	r3, #2
 800050e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	4619      	mov	r1, r3
 8000516:	4805      	ldr	r0, [pc, #20]	@ (800052c <HAL_UART_MspInit+0x78>)
 8000518:	f002 fd34 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800051c:	bf00      	nop
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40004400 	.word	0x40004400
 8000528:	40021000 	.word	0x40021000
 800052c:	40010800 	.word	0x40010800

08000530 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a08      	ldr	r2, [pc, #32]	@ (8000560 <HAL_UART_MspDeInit+0x30>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d109      	bne.n	8000556 <HAL_UART_MspDeInit+0x26>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8000542:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <HAL_UART_MspDeInit+0x34>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a07      	ldr	r2, [pc, #28]	@ (8000564 <HAL_UART_MspDeInit+0x34>)
 8000548:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800054c:	61d3      	str	r3, [r2, #28]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 800054e:	210c      	movs	r1, #12
 8000550:	4805      	ldr	r0, [pc, #20]	@ (8000568 <HAL_UART_MspDeInit+0x38>)
 8000552:	f002 fe9b 	bl	800328c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40004400 	.word	0x40004400
 8000564:	40021000 	.word	0x40021000
 8000568:	40010800 	.word	0x40010800

0800056c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <NMI_Handler+0x4>

08000574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <MemManage_Handler+0x4>

08000584 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <BusFault_Handler+0x4>

0800058c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <UsageFault_Handler+0x4>

08000594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005bc:	f000 fa82 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005c8:	2120      	movs	r1, #32
 80005ca:	4816      	ldr	r0, [pc, #88]	@ (8000624 <EXTI15_10_IRQHandler+0x60>)
 80005cc:	f002 ff49 	bl	8003462 <HAL_GPIO_TogglePin>
	printf("\nButton pushed!!! by hardware trigger\n");
 80005d0:	4815      	ldr	r0, [pc, #84]	@ (8000628 <EXTI15_10_IRQHandler+0x64>)
 80005d2:	f006 fb33 	bl	8006c3c <puts>

	printf("NVIC->IABR[%d]=0x%08x\n", 40, (unsigned)NVIC->IABR[1]);
 80005d6:	4b15      	ldr	r3, [pc, #84]	@ (800062c <EXTI15_10_IRQHandler+0x68>)
 80005d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80005dc:	461a      	mov	r2, r3
 80005de:	2128      	movs	r1, #40	@ 0x28
 80005e0:	4813      	ldr	r0, [pc, #76]	@ (8000630 <EXTI15_10_IRQHandler+0x6c>)
 80005e2:	f006 fac3 	bl	8006b6c <iprintf>
	printf("NVIC->ISER[%d]=0x%08x\n", 40, (unsigned)NVIC->ISER[1]);
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <EXTI15_10_IRQHandler+0x68>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	461a      	mov	r2, r3
 80005ec:	2128      	movs	r1, #40	@ 0x28
 80005ee:	4811      	ldr	r0, [pc, #68]	@ (8000634 <EXTI15_10_IRQHandler+0x70>)
 80005f0:	f006 fabc 	bl	8006b6c <iprintf>

  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80005f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f8:	480f      	ldr	r0, [pc, #60]	@ (8000638 <EXTI15_10_IRQHandler+0x74>)
 80005fa:	f002 ff03 	bl	8003404 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d004      	beq.n	800060e <EXTI15_10_IRQHandler+0x4a>
  {
  	printf("HIGH level\n");
 8000604:	480d      	ldr	r0, [pc, #52]	@ (800063c <EXTI15_10_IRQHandler+0x78>)
 8000606:	f006 fb19 	bl	8006c3c <puts>
  	__BKPT(0);
 800060a:	be00      	bkpt	0x0000
 800060c:	e003      	b.n	8000616 <EXTI15_10_IRQHandler+0x52>
  }else{
  	printf("LOW level\n");
 800060e:	480c      	ldr	r0, [pc, #48]	@ (8000640 <EXTI15_10_IRQHandler+0x7c>)
 8000610:	f006 fb14 	bl	8006c3c <puts>
  	__BKPT(0);
 8000614:	be00      	bkpt	0x0000
  }

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000616:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800061a:	f002 ff63 	bl	80034e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40010800 	.word	0x40010800
 8000628:	08007e08 	.word	0x08007e08
 800062c:	e000e100 	.word	0xe000e100
 8000630:	08007e30 	.word	0x08007e30
 8000634:	08007e48 	.word	0x08007e48
 8000638:	40011000 	.word	0x40011000
 800063c:	08007e60 	.word	0x08007e60
 8000640:	08007e6c 	.word	0x08007e6c

08000644 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <_getpid>:

int _getpid(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
	return 1;
 8000654:	2301      	movs	r3, #1
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <_kill>:

int _kill(int pid, int sig)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b082      	sub	sp, #8
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000668:	f006 faf8 	bl	8006c5c <__errno>
 800066c:	4603      	mov	r3, r0
 800066e:	2216      	movs	r2, #22
 8000670:	601a      	str	r2, [r3, #0]
	return -1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <_exit>:

void _exit (int status)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000686:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ffe7 	bl	800065e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <_exit+0x12>

08000694 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	e00a      	b.n	80006bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006a6:	f7ff fdb7 	bl	8000218 <__io_getchar>
 80006aa:	4601      	mov	r1, r0
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	60ba      	str	r2, [r7, #8]
 80006b2:	b2ca      	uxtb	r2, r1
 80006b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbf0      	blt.n	80006a6 <_read+0x12>
	}

return len;
 80006c4:	687b      	ldr	r3, [r7, #4]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	e009      	b.n	80006f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	60ba      	str	r2, [r7, #8]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fd77 	bl	80001dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	dbf1      	blt.n	80006e0 <_write+0x12>
	}
	return len;
 80006fc:	687b      	ldr	r3, [r7, #4]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <_close>:

int _close(int file)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
	return -1;
 800070e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800072c:	605a      	str	r2, [r3, #4]
	return 0;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <_isatty>:

int _isatty(int file)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	return 1;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800074e:	b480      	push	{r7}
 8000750:	b085      	sub	sp, #20
 8000752:	af00      	add	r7, sp, #0
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
	return 0;
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <_open>:

int _open(char *path, int flags, ...)
{
 8000766:	b40e      	push	{r1, r2, r3}
 8000768:	b480      	push	{r7}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000770:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	b003      	add	sp, #12
 800077e:	4770      	bx	lr

08000780 <_wait>:

int _wait(int *status)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 8000788:	f006 fa68 	bl	8006c5c <__errno>
 800078c:	4603      	mov	r3, r0
 800078e:	220a      	movs	r2, #10
 8000790:	601a      	str	r2, [r3, #0]
	return -1;
 8000792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <_unlink>:

int _unlink(char *name)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 80007a6:	f006 fa59 	bl	8006c5c <__errno>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2202      	movs	r2, #2
 80007ae:	601a      	str	r2, [r3, #0]
	return -1;
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_times>:

int _times(struct tms *buf)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	return -1;
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <_stat>:

int _stat(char *file, struct stat *st)
{
 80007d2:	b480      	push	{r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007e2:	605a      	str	r2, [r3, #4]
	return 0;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <_link>:

int _link(char *old, char *new)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 80007fa:	f006 fa2f 	bl	8006c5c <__errno>
 80007fe:	4603      	mov	r3, r0
 8000800:	221f      	movs	r2, #31
 8000802:	601a      	str	r2, [r3, #0]
	return -1;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <_fork>:

int _fork(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 8000814:	f006 fa22 	bl	8006c5c <__errno>
 8000818:	4603      	mov	r3, r0
 800081a:	220b      	movs	r2, #11
 800081c:	601a      	str	r2, [r3, #0]
	return -1;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}

08000826 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b084      	sub	sp, #16
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 8000832:	f006 fa13 	bl	8006c5c <__errno>
 8000836:	4603      	mov	r3, r0
 8000838:	220c      	movs	r2, #12
 800083a:	601a      	str	r2, [r3, #0]
	return -1;
 800083c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000850:	4a14      	ldr	r2, [pc, #80]	@ (80008a4 <_sbrk+0x5c>)
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <_sbrk+0x60>)
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <_sbrk+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d102      	bne.n	800086a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <_sbrk+0x64>)
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <_sbrk+0x68>)
 8000868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <_sbrk+0x64>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	429a      	cmp	r2, r3
 8000876:	d207      	bcs.n	8000888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000878:	f006 f9f0 	bl	8006c5c <__errno>
 800087c:	4603      	mov	r3, r0
 800087e:	220c      	movs	r2, #12
 8000880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000886:	e009      	b.n	800089c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <_sbrk+0x64>)
 8000898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089a:	68fb      	ldr	r3, [r7, #12]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20005000 	.word	0x20005000
 80008a8:	00000400 	.word	0x00000400
 80008ac:	200000d4 	.word	0x200000d4
 80008b0:	20000250 	.word	0x20000250

080008b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000990 <SystemCoreClockUpdate+0xd0>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f003 030c 	and.w	r3, r3, #12
 80008da:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b08      	cmp	r3, #8
 80008e0:	d011      	beq.n	8000906 <SystemCoreClockUpdate+0x46>
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2b08      	cmp	r3, #8
 80008e6:	d83a      	bhi.n	800095e <SystemCoreClockUpdate+0x9e>
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <SystemCoreClockUpdate+0x36>
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d004      	beq.n	80008fe <SystemCoreClockUpdate+0x3e>
 80008f4:	e033      	b.n	800095e <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80008f6:	4b27      	ldr	r3, [pc, #156]	@ (8000994 <SystemCoreClockUpdate+0xd4>)
 80008f8:	4a27      	ldr	r2, [pc, #156]	@ (8000998 <SystemCoreClockUpdate+0xd8>)
 80008fa:	601a      	str	r2, [r3, #0]
      break;
 80008fc:	e033      	b.n	8000966 <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80008fe:	4b25      	ldr	r3, [pc, #148]	@ (8000994 <SystemCoreClockUpdate+0xd4>)
 8000900:	4a25      	ldr	r2, [pc, #148]	@ (8000998 <SystemCoreClockUpdate+0xd8>)
 8000902:	601a      	str	r2, [r3, #0]
      break;
 8000904:	e02f      	b.n	8000966 <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000906:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <SystemCoreClockUpdate+0xd0>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800090e:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000910:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <SystemCoreClockUpdate+0xd0>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000918:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	0c9b      	lsrs	r3, r3, #18
 800091e:	3302      	adds	r3, #2
 8000920:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d106      	bne.n	8000936 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4a1c      	ldr	r2, [pc, #112]	@ (800099c <SystemCoreClockUpdate+0xdc>)
 800092c:	fb02 f303 	mul.w	r3, r2, r3
 8000930:	4a18      	ldr	r2, [pc, #96]	@ (8000994 <SystemCoreClockUpdate+0xd4>)
 8000932:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000934:	e017      	b.n	8000966 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <SystemCoreClockUpdate+0xd0>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d006      	beq.n	8000950 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	4a15      	ldr	r2, [pc, #84]	@ (800099c <SystemCoreClockUpdate+0xdc>)
 8000946:	fb02 f303 	mul.w	r3, r2, r3
 800094a:	4a12      	ldr	r2, [pc, #72]	@ (8000994 <SystemCoreClockUpdate+0xd4>)
 800094c:	6013      	str	r3, [r2, #0]
      break;
 800094e:	e00a      	b.n	8000966 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4a11      	ldr	r2, [pc, #68]	@ (8000998 <SystemCoreClockUpdate+0xd8>)
 8000954:	fb02 f303 	mul.w	r3, r2, r3
 8000958:	4a0e      	ldr	r2, [pc, #56]	@ (8000994 <SystemCoreClockUpdate+0xd4>)
 800095a:	6013      	str	r3, [r2, #0]
      break;
 800095c:	e003      	b.n	8000966 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <SystemCoreClockUpdate+0xd4>)
 8000960:	4a0d      	ldr	r2, [pc, #52]	@ (8000998 <SystemCoreClockUpdate+0xd8>)
 8000962:	601a      	str	r2, [r3, #0]
      break;
 8000964:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <SystemCoreClockUpdate+0xd0>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	091b      	lsrs	r3, r3, #4
 800096c:	f003 030f 	and.w	r3, r3, #15
 8000970:	4a0b      	ldr	r2, [pc, #44]	@ (80009a0 <SystemCoreClockUpdate+0xe0>)
 8000972:	5cd3      	ldrb	r3, [r2, r3]
 8000974:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000976:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <SystemCoreClockUpdate+0xd4>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	fa22 f303 	lsr.w	r3, r2, r3
 8000980:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <SystemCoreClockUpdate+0xd4>)
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	20000008 	.word	0x20000008
 8000998:	007a1200 	.word	0x007a1200
 800099c:	003d0900 	.word	0x003d0900
 80009a0:	08007ebc 	.word	0x08007ebc

080009a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a4:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a6:	490d      	ldr	r1, [pc, #52]	@ (80009dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a8:	4a0d      	ldr	r2, [pc, #52]	@ (80009e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009bc:	4c0a      	ldr	r4, [pc, #40]	@ (80009e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ca:	f7ff ff73 	bl	80008b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ce:	f006 f94b 	bl	8006c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d2:	f7ff fc37 	bl	8000244 <main>
  bx lr
 80009d6:	4770      	bx	lr
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009e0:	08007f18 	.word	0x08007f18
  ldr r2, =_sbss
 80009e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009e8:	20000250 	.word	0x20000250

080009ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_2_IRQHandler>
	...

080009f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <HAL_Init+0x28>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	@ (8000a18 <HAL_Init+0x28>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 fb69 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 f82c 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff fd20 	bl	8000450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40022000 	.word	0x40022000

08000a1c <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000a20:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <HAL_DeInit+0x2c>)
 8000a22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a26:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000a28:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <HAL_DeInit+0x2c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_DeInit+0x2c>)
 8000a30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a34:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000a36:	4b04      	ldr	r3, [pc, #16]	@ (8000a48 <HAL_DeInit+0x2c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000a3c:	f000 f80c 	bl	8000a58 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fb6f 	bl	8001166 <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000aa0:	f000 fb25 	bl	80010ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000010 	.word	0x20000010
 8000ac0:	2000000c 	.word	0x2000000c

08000ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <HAL_IncTick+0x1c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <HAL_IncTick+0x20>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a03      	ldr	r2, [pc, #12]	@ (8000ae4 <HAL_IncTick+0x20>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20000010 	.word	0x20000010
 8000ae4:	200000d8 	.word	0x200000d8

08000ae8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b02      	ldr	r3, [pc, #8]	@ (8000af8 <HAL_GetTick+0x10>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	200000d8 	.word	0x200000d8

08000afc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000b00:	4b02      	ldr	r3, [pc, #8]	@ (8000b0c <HAL_GetTickPrio+0x10>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	2000000c 	.word	0x2000000c

08000b10 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <HAL_SetTickFreq+0x48>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	79fa      	ldrb	r2, [r7, #7]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d012      	beq.n	8000b4e <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8000b28:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <HAL_SetTickFreq+0x48>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <HAL_SetTickFreq+0x48>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <HAL_SetTickFreq+0x4c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff93 	bl	8000a64 <HAL_InitTick>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8000b48:	4a03      	ldr	r2, [pc, #12]	@ (8000b58 <HAL_SetTickFreq+0x48>)
 8000b4a:	7bbb      	ldrb	r3, [r7, #14]
 8000b4c:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000010 	.word	0x20000010
 8000b5c:	2000000c 	.word	0x2000000c

08000b60 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8000b64:	4b02      	ldr	r3, [pc, #8]	@ (8000b70 <HAL_GetTickFreq+0x10>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	20000010 	.word	0x20000010

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff ffb4 	bl	8000ae8 <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffa4 	bl	8000ae8 <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000010 	.word	0x20000010

08000bbc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <HAL_SuspendTick+0x18>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a03      	ldr	r2, [pc, #12]	@ (8000bd4 <HAL_SuspendTick+0x18>)
 8000bc6:	f023 0302 	bic.w	r3, r3, #2
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000bdc:	4b04      	ldr	r3, [pc, #16]	@ (8000bf0 <HAL_ResumeTick+0x18>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a03      	ldr	r2, [pc, #12]	@ (8000bf0 <HAL_ResumeTick+0x18>)
 8000be2:	f043 0302 	orr.w	r3, r3, #2
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return __STM32F1xx_HAL_VERSION;
 8000bf8:	4b02      	ldr	r3, [pc, #8]	@ (8000c04 <HAL_GetHalVersion+0x10>)
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	01010800 	.word	0x01010800

08000c08 <HAL_GetREVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000c0c:	4b03      	ldr	r3, [pc, #12]	@ (8000c1c <HAL_GetREVID+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	0c1b      	lsrs	r3, r3, #16
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e0042000 	.word	0xe0042000

08000c20 <HAL_GetDEVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000c24:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <HAL_GetDEVID+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	e0042000 	.word	0xe0042000

08000c38 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8000c3c:	4b02      	ldr	r3, [pc, #8]	@ (8000c48 <HAL_GetUIDw0+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	1ffff7e8 	.word	0x1ffff7e8

08000c4c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000c50:	4b02      	ldr	r3, [pc, #8]	@ (8000c5c <HAL_GetUIDw1+0x10>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	1ffff7ec 	.word	0x1ffff7ec

08000c60 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000c64:	4b02      	ldr	r3, [pc, #8]	@ (8000c70 <HAL_GetUIDw2+0x10>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	1ffff7f0 	.word	0x1ffff7f0

08000c74 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000c78:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4a03      	ldr	r2, [pc, #12]	@ (8000c8c <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6053      	str	r3, [r2, #4]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	e0042000 	.word	0xe0042000

08000c90 <HAL_DBGMCU_DisableDBGSleepMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000c94:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	4a03      	ldr	r2, [pc, #12]	@ (8000ca8 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8000c9a:	f023 0301 	bic.w	r3, r3, #1
 8000c9e:	6053      	str	r3, [r2, #4]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	e0042000 	.word	0xe0042000

08000cac <HAL_DBGMCU_EnableDBGStopMode>:
  *       interrupt.
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4a03      	ldr	r2, [pc, #12]	@ (8000cc4 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	6053      	str	r3, [r2, #4]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	e0042000 	.word	0xe0042000

08000cc8 <HAL_DBGMCU_DisableDBGStopMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4a03      	ldr	r2, [pc, #12]	@ (8000ce0 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8000cd2:	f023 0302 	bic.w	r3, r3, #2
 8000cd6:	6053      	str	r3, [r2, #4]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	e0042000 	.word	0xe0042000

08000ce4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4a03      	ldr	r2, [pc, #12]	@ (8000cfc <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6053      	str	r3, [r2, #4]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	e0042000 	.word	0xe0042000

08000d00 <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	4a03      	ldr	r2, [pc, #12]	@ (8000d18 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000d0a:	f023 0304 	bic.w	r3, r3, #4
 8000d0e:	6053      	str	r3, [r2, #4]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	e0042000 	.word	0xe0042000

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4906      	ldr	r1, [pc, #24]	@ (8000db4 <__NVIC_EnableIRQ+0x34>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db12      	blt.n	8000df0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	490a      	ldr	r1, [pc, #40]	@ (8000dfc <__NVIC_DisableIRQ+0x44>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	3320      	adds	r3, #32
 8000de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000de4:	f3bf 8f4f 	dsb	sy
}
 8000de8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dea:	f3bf 8f6f 	isb	sy
}
 8000dee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db0e      	blt.n	8000e30 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000e12:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <__NVIC_GetPendingIRQ+0x3c>)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	095b      	lsrs	r3, r3, #5
 8000e1a:	3340      	adds	r3, #64	@ 0x40
 8000e1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 031f 	and.w	r3, r3, #31
 8000e26:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	e000      	b.n	8000e32 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8000e30:	2300      	movs	r3, #0
  }
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db0c      	blt.n	8000e6c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	4907      	ldr	r1, [pc, #28]	@ (8000e78 <__NVIC_SetPendingIRQ+0x38>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	3340      	adds	r3, #64	@ 0x40
 8000e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db0c      	blt.n	8000ea8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 021f 	and.w	r2, r3, #31
 8000e94:	4907      	ldr	r1, [pc, #28]	@ (8000eb4 <__NVIC_ClearPendingIRQ+0x38>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea2:	3360      	adds	r3, #96	@ 0x60
 8000ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0e      	blt.n	8000ee8 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000eca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <__NVIC_GetActive+0x3c>)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	095b      	lsrs	r3, r3, #5
 8000ed2:	3380      	adds	r3, #128	@ 0x80
 8000ed4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 031f 	and.w	r3, r3, #31
 8000ede:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	e000      	b.n	8000eea <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8000ee8:	2300      	movs	r3, #0
  }
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	@ (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	@ (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db09      	blt.n	8000f72 <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f90 <__NVIC_GetPriority+0x44>)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4413      	add	r3, r2
 8000f66:	f893 3300 	ldrb.w	r3, [r3, #768]	@ 0x300
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	091b      	lsrs	r3, r3, #4
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	e009      	b.n	8000f86 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8000f72:	4a08      	ldr	r2, [pc, #32]	@ (8000f94 <__NVIC_GetPriority+0x48>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	4413      	add	r3, r2
 8000f7e:	7e1b      	ldrb	r3, [r3, #24]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	b2db      	uxtb	r3, r3
  }
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	@ 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	@ 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	@ 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f1c3 0307 	rsb	r3, r3, #7
 8001018:	2b04      	cmp	r3, #4
 800101a:	bf28      	it	cs
 800101c:	2304      	movcs	r3, #4
 800101e:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	3304      	adds	r3, #4
 8001024:	2b06      	cmp	r3, #6
 8001026:	d902      	bls.n	800102e <NVIC_DecodePriority+0x32>
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	3b03      	subs	r3, #3
 800102c:	e000      	b.n	8001030 <NVIC_DecodePriority+0x34>
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	40da      	lsrs	r2, r3
 8001038:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	401a      	ands	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 800104a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43da      	mvns	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	401a      	ands	r2, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	601a      	str	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	3724      	adds	r7, #36	@ 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800106c:	f3bf 8f4f 	dsb	sy
}
 8001070:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <__NVIC_SystemReset+0x24>)
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800107a:	4904      	ldr	r1, [pc, #16]	@ (800108c <__NVIC_SystemReset+0x24>)
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <__NVIC_SystemReset+0x28>)
 800107e:	4313      	orrs	r3, r2
 8001080:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001082:	f3bf 8f4f 	dsb	sy
}
 8001086:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <__NVIC_SystemReset+0x20>
 800108c:	e000ed00 	.word	0xe000ed00
 8001090:	05fa0004 	.word	0x05fa0004

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a4:	d301      	bcc.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00f      	b.n	80010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <SysTick_Config+0x40>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	210f      	movs	r1, #15
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010b8:	f7ff ff1e 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <SysTick_Config+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <SysTick_Config+0x40>)
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fe1b 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff fe30 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff44 	bl	8000f98 <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff feed 	bl	8000ef8 <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fe23 	bl	8000d80 <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fe31 	bl	8000db8 <__NVIC_DisableIRQ>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001162:	f7ff ff81 	bl	8001068 <__NVIC_SystemReset>

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff90 	bl	8001094 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8001182:	f7ff fdef 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8001186:	4603      	mov	r3, r0
}
 8001188:	4618      	mov	r0, r3
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 800119c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fed3 	bl	8000f4c <__NVIC_GetPriority>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	68b9      	ldr	r1, [r7, #8]
 80011ac:	f7ff ff26 	bl	8000ffc <NVIC_DecodePriority>
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fe3a 	bl	8000e40 <__NVIC_SetPendingIRQ>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fe0c 	bl	8000e00 <__NVIC_GetPendingIRQ>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fe3b 	bl	8000e7c <__NVIC_ClearPendingIRQ>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fe4b 	bl	8000eb8 <__NVIC_GetActive>
 8001222:	4603      	mov	r3, r0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b04      	cmp	r3, #4
 8001238:	d106      	bne.n	8001248 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a08      	ldr	r2, [pc, #32]	@ (8001260 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001246:	e005      	b.n	8001254 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800124e:	f023 0304 	bic.w	r3, r3, #4
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001268:	f000 f802 	bl	8001270 <HAL_SYSTICK_Callback>
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e043      	b.n	800131a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	4b22      	ldr	r3, [pc, #136]	@ (8001324 <HAL_DMA_Init+0xa8>)
 800129a:	4413      	add	r3, r2
 800129c:	4a22      	ldr	r2, [pc, #136]	@ (8001328 <HAL_DMA_Init+0xac>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	009a      	lsls	r2, r3, #2
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a1f      	ldr	r2, [pc, #124]	@ (800132c <HAL_DMA_Init+0xb0>)
 80012ae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2202      	movs	r2, #2
 80012b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80012c6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	bffdfff8 	.word	0xbffdfff8
 8001328:	cccccccd 	.word	0xcccccccd
 800132c:	40020000 	.word	0x40020000

08001330 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e046      	b.n	80013d0 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <HAL_DMA_DeInit+0xac>)
 800137a:	4413      	add	r3, r2
 800137c:	4a18      	ldr	r2, [pc, #96]	@ (80013e0 <HAL_DMA_DeInit+0xb0>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	009a      	lsls	r2, r3, #2
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a15      	ldr	r2, [pc, #84]	@ (80013e4 <HAL_DMA_DeInit+0xb4>)
 800138e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001398:	2101      	movs	r1, #1
 800139a:	fa01 f202 	lsl.w	r2, r1, r2
 800139e:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	bffdfff8 	.word	0xbffdfff8
 80013e0:	cccccccd 	.word	0xcccccccd
 80013e4:	40020000 	.word	0x40020000

080013e8 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <HAL_DMA_Start+0x20>
 8001404:	2302      	movs	r3, #2
 8001406:	e02d      	b.n	8001464 <HAL_DMA_Start+0x7c>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001416:	2b01      	cmp	r3, #1
 8001418:	d11d      	bne.n	8001456 <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2202      	movs	r2, #2
 800141e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	639a      	str	r2, [r3, #56]	@ 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 fc6f 	bl	8001d22 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	e005      	b.n	8001462 <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 800145e:	2302      	movs	r3, #2
 8001460:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_DMA_Start_IT+0x20>
 8001488:	2302      	movs	r3, #2
 800148a:	e04a      	b.n	8001522 <HAL_DMA_Start_IT+0xb6>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800149a:	2b01      	cmp	r3, #1
 800149c:	d13a      	bne.n	8001514 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2202      	movs	r2, #2
 80014a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 fc2d 	bl	8001d22 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 020e 	orr.w	r2, r2, #14
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	e00f      	b.n	8001502 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0204 	bic.w	r2, r2, #4
 80014f0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 020a 	orr.w	r2, r2, #10
 8001500:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0201 	orr.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	e005      	b.n	8001520 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800151c:	2302      	movs	r3, #2
 800151e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001520:	7dfb      	ldrb	r3, [r7, #23]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800153c:	2b02      	cmp	r3, #2
 800153e:	d008      	beq.n	8001552 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2204      	movs	r2, #4
 8001544:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e020      	b.n	8001594 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 020e 	bic.w	r2, r2, #14
 8001560:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0201 	bic.w	r2, r2, #1
 8001570:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f202 	lsl.w	r2, r1, r2
 8001580:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d005      	beq.n	80015c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2204      	movs	r2, #4
 80015ba:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e051      	b.n	8001666 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 020e 	bic.w	r2, r2, #14
 80015d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0201 	bic.w	r2, r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a22      	ldr	r2, [pc, #136]	@ (8001670 <HAL_DMA_Abort_IT+0xd0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d029      	beq.n	8001640 <HAL_DMA_Abort_IT+0xa0>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a20      	ldr	r2, [pc, #128]	@ (8001674 <HAL_DMA_Abort_IT+0xd4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d022      	beq.n	800163c <HAL_DMA_Abort_IT+0x9c>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001678 <HAL_DMA_Abort_IT+0xd8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d01a      	beq.n	8001636 <HAL_DMA_Abort_IT+0x96>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1d      	ldr	r2, [pc, #116]	@ (800167c <HAL_DMA_Abort_IT+0xdc>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d012      	beq.n	8001630 <HAL_DMA_Abort_IT+0x90>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1c      	ldr	r2, [pc, #112]	@ (8001680 <HAL_DMA_Abort_IT+0xe0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d00a      	beq.n	800162a <HAL_DMA_Abort_IT+0x8a>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1a      	ldr	r2, [pc, #104]	@ (8001684 <HAL_DMA_Abort_IT+0xe4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d102      	bne.n	8001624 <HAL_DMA_Abort_IT+0x84>
 800161e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001622:	e00e      	b.n	8001642 <HAL_DMA_Abort_IT+0xa2>
 8001624:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001628:	e00b      	b.n	8001642 <HAL_DMA_Abort_IT+0xa2>
 800162a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800162e:	e008      	b.n	8001642 <HAL_DMA_Abort_IT+0xa2>
 8001630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001634:	e005      	b.n	8001642 <HAL_DMA_Abort_IT+0xa2>
 8001636:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800163a:	e002      	b.n	8001642 <HAL_DMA_Abort_IT+0xa2>
 800163c:	2310      	movs	r3, #16
 800163e:	e000      	b.n	8001642 <HAL_DMA_Abort_IT+0xa2>
 8001640:	2301      	movs	r3, #1
 8001642:	4a11      	ldr	r2, [pc, #68]	@ (8001688 <HAL_DMA_Abort_IT+0xe8>)
 8001644:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	4798      	blx	r3
    } 
  }
  return status;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40020008 	.word	0x40020008
 8001674:	4002001c 	.word	0x4002001c
 8001678:	40020030 	.word	0x40020030
 800167c:	40020044 	.word	0x40020044
 8001680:	40020058 	.word	0x40020058
 8001684:	4002006c 	.word	0x4002006c
 8001688:	40020000 	.word	0x40020000

0800168c <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the DMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d008      	beq.n	80016b8 <HAL_DMA_PollForTransfer+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2204      	movs	r2, #4
 80016aa:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2020 	strb.w	r2, [r3, #32]
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e168      	b.n	800198a <HAL_DMA_PollForTransfer+0x2fe>
  }

  /* Polling mode not supported in circular mode */
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016cc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e15b      	b.n	800198a <HAL_DMA_PollForTransfer+0x2fe>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d131      	bne.n	800173c <HAL_DMA_PollForTransfer+0xb0>
  {
    /* Transfer Complete flag */
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a88      	ldr	r2, [pc, #544]	@ (8001900 <HAL_DMA_PollForTransfer+0x274>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d029      	beq.n	8001736 <HAL_DMA_PollForTransfer+0xaa>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a87      	ldr	r2, [pc, #540]	@ (8001904 <HAL_DMA_PollForTransfer+0x278>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d022      	beq.n	8001732 <HAL_DMA_PollForTransfer+0xa6>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a85      	ldr	r2, [pc, #532]	@ (8001908 <HAL_DMA_PollForTransfer+0x27c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d01a      	beq.n	800172c <HAL_DMA_PollForTransfer+0xa0>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a84      	ldr	r2, [pc, #528]	@ (800190c <HAL_DMA_PollForTransfer+0x280>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d012      	beq.n	8001726 <HAL_DMA_PollForTransfer+0x9a>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a82      	ldr	r2, [pc, #520]	@ (8001910 <HAL_DMA_PollForTransfer+0x284>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00a      	beq.n	8001720 <HAL_DMA_PollForTransfer+0x94>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a81      	ldr	r2, [pc, #516]	@ (8001914 <HAL_DMA_PollForTransfer+0x288>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d102      	bne.n	800171a <HAL_DMA_PollForTransfer+0x8e>
 8001714:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001718:	e00e      	b.n	8001738 <HAL_DMA_PollForTransfer+0xac>
 800171a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800171e:	e00b      	b.n	8001738 <HAL_DMA_PollForTransfer+0xac>
 8001720:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001724:	e008      	b.n	8001738 <HAL_DMA_PollForTransfer+0xac>
 8001726:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800172a:	e005      	b.n	8001738 <HAL_DMA_PollForTransfer+0xac>
 800172c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001730:	e002      	b.n	8001738 <HAL_DMA_PollForTransfer+0xac>
 8001732:	2320      	movs	r3, #32
 8001734:	e000      	b.n	8001738 <HAL_DMA_PollForTransfer+0xac>
 8001736:	2302      	movs	r3, #2
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e030      	b.n	800179e <HAL_DMA_PollForTransfer+0x112>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a6f      	ldr	r2, [pc, #444]	@ (8001900 <HAL_DMA_PollForTransfer+0x274>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d029      	beq.n	800179a <HAL_DMA_PollForTransfer+0x10e>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a6e      	ldr	r2, [pc, #440]	@ (8001904 <HAL_DMA_PollForTransfer+0x278>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d022      	beq.n	8001796 <HAL_DMA_PollForTransfer+0x10a>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a6c      	ldr	r2, [pc, #432]	@ (8001908 <HAL_DMA_PollForTransfer+0x27c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d01a      	beq.n	8001790 <HAL_DMA_PollForTransfer+0x104>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a6b      	ldr	r2, [pc, #428]	@ (800190c <HAL_DMA_PollForTransfer+0x280>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d012      	beq.n	800178a <HAL_DMA_PollForTransfer+0xfe>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a69      	ldr	r2, [pc, #420]	@ (8001910 <HAL_DMA_PollForTransfer+0x284>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00a      	beq.n	8001784 <HAL_DMA_PollForTransfer+0xf8>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a68      	ldr	r2, [pc, #416]	@ (8001914 <HAL_DMA_PollForTransfer+0x288>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d102      	bne.n	800177e <HAL_DMA_PollForTransfer+0xf2>
 8001778:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800177c:	e00e      	b.n	800179c <HAL_DMA_PollForTransfer+0x110>
 800177e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001782:	e00b      	b.n	800179c <HAL_DMA_PollForTransfer+0x110>
 8001784:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001788:	e008      	b.n	800179c <HAL_DMA_PollForTransfer+0x110>
 800178a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800178e:	e005      	b.n	800179c <HAL_DMA_PollForTransfer+0x110>
 8001790:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001794:	e002      	b.n	800179c <HAL_DMA_PollForTransfer+0x110>
 8001796:	2340      	movs	r3, #64	@ 0x40
 8001798:	e000      	b.n	800179c <HAL_DMA_PollForTransfer+0x110>
 800179a:	2304      	movs	r3, #4
 800179c:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800179e:	f7ff f9a3 	bl	8000ae8 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 80017a4:	e06b      	b.n	800187e <HAL_DMA_PollForTransfer+0x1f2>
  {
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 80017a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001918 <HAL_DMA_PollForTransfer+0x28c>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4954      	ldr	r1, [pc, #336]	@ (8001900 <HAL_DMA_PollForTransfer+0x274>)
 80017b0:	428b      	cmp	r3, r1
 80017b2:	d029      	beq.n	8001808 <HAL_DMA_PollForTransfer+0x17c>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4952      	ldr	r1, [pc, #328]	@ (8001904 <HAL_DMA_PollForTransfer+0x278>)
 80017ba:	428b      	cmp	r3, r1
 80017bc:	d022      	beq.n	8001804 <HAL_DMA_PollForTransfer+0x178>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4951      	ldr	r1, [pc, #324]	@ (8001908 <HAL_DMA_PollForTransfer+0x27c>)
 80017c4:	428b      	cmp	r3, r1
 80017c6:	d01a      	beq.n	80017fe <HAL_DMA_PollForTransfer+0x172>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	494f      	ldr	r1, [pc, #316]	@ (800190c <HAL_DMA_PollForTransfer+0x280>)
 80017ce:	428b      	cmp	r3, r1
 80017d0:	d012      	beq.n	80017f8 <HAL_DMA_PollForTransfer+0x16c>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	494e      	ldr	r1, [pc, #312]	@ (8001910 <HAL_DMA_PollForTransfer+0x284>)
 80017d8:	428b      	cmp	r3, r1
 80017da:	d00a      	beq.n	80017f2 <HAL_DMA_PollForTransfer+0x166>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	494c      	ldr	r1, [pc, #304]	@ (8001914 <HAL_DMA_PollForTransfer+0x288>)
 80017e2:	428b      	cmp	r3, r1
 80017e4:	d102      	bne.n	80017ec <HAL_DMA_PollForTransfer+0x160>
 80017e6:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80017ea:	e00e      	b.n	800180a <HAL_DMA_PollForTransfer+0x17e>
 80017ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80017f0:	e00b      	b.n	800180a <HAL_DMA_PollForTransfer+0x17e>
 80017f2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80017f6:	e008      	b.n	800180a <HAL_DMA_PollForTransfer+0x17e>
 80017f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017fc:	e005      	b.n	800180a <HAL_DMA_PollForTransfer+0x17e>
 80017fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001802:	e002      	b.n	800180a <HAL_DMA_PollForTransfer+0x17e>
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	e000      	b.n	800180a <HAL_DMA_PollForTransfer+0x17e>
 8001808:	2308      	movs	r3, #8
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d017      	beq.n	8001840 <HAL_DMA_PollForTransfer+0x1b4>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001818:	2101      	movs	r1, #1
 800181a:	fa01 f202 	lsl.w	r2, r1, r2
 800181e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0a4      	b.n	800198a <HAL_DMA_PollForTransfer+0x2fe>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001846:	d01a      	beq.n	800187e <HAL_DMA_PollForTransfer+0x1f2>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <HAL_DMA_PollForTransfer+0x1d2>
 800184e:	f7ff f94b 	bl	8000ae8 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	429a      	cmp	r2, r3
 800185c:	d20f      	bcs.n	800187e <HAL_DMA_PollForTransfer+0x1f2>
      {
        /* Update error code */
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001862:	f043 0220 	orr.w	r2, r3, #32
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e085      	b.n	800198a <HAL_DMA_PollForTransfer+0x2fe>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 800187e:	4b26      	ldr	r3, [pc, #152]	@ (8001918 <HAL_DMA_PollForTransfer+0x28c>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d08d      	beq.n	80017a6 <HAL_DMA_PollForTransfer+0x11a>
      }
    }
  }

  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d145      	bne.n	800191c <HAL_DMA_PollForTransfer+0x290>
  {
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1a      	ldr	r2, [pc, #104]	@ (8001900 <HAL_DMA_PollForTransfer+0x274>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d029      	beq.n	80018ee <HAL_DMA_PollForTransfer+0x262>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a19      	ldr	r2, [pc, #100]	@ (8001904 <HAL_DMA_PollForTransfer+0x278>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d022      	beq.n	80018ea <HAL_DMA_PollForTransfer+0x25e>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a17      	ldr	r2, [pc, #92]	@ (8001908 <HAL_DMA_PollForTransfer+0x27c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d01a      	beq.n	80018e4 <HAL_DMA_PollForTransfer+0x258>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a16      	ldr	r2, [pc, #88]	@ (800190c <HAL_DMA_PollForTransfer+0x280>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d012      	beq.n	80018de <HAL_DMA_PollForTransfer+0x252>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <HAL_DMA_PollForTransfer+0x284>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00a      	beq.n	80018d8 <HAL_DMA_PollForTransfer+0x24c>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a13      	ldr	r2, [pc, #76]	@ (8001914 <HAL_DMA_PollForTransfer+0x288>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d102      	bne.n	80018d2 <HAL_DMA_PollForTransfer+0x246>
 80018cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018d0:	e00e      	b.n	80018f0 <HAL_DMA_PollForTransfer+0x264>
 80018d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018d6:	e00b      	b.n	80018f0 <HAL_DMA_PollForTransfer+0x264>
 80018d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018dc:	e008      	b.n	80018f0 <HAL_DMA_PollForTransfer+0x264>
 80018de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018e2:	e005      	b.n	80018f0 <HAL_DMA_PollForTransfer+0x264>
 80018e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018e8:	e002      	b.n	80018f0 <HAL_DMA_PollForTransfer+0x264>
 80018ea:	2320      	movs	r3, #32
 80018ec:	e000      	b.n	80018f0 <HAL_DMA_PollForTransfer+0x264>
 80018ee:	2302      	movs	r3, #2
 80018f0:	4a09      	ldr	r2, [pc, #36]	@ (8001918 <HAL_DMA_PollForTransfer+0x28c>)
 80018f2:	6053      	str	r3, [r2, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80018fc:	e040      	b.n	8001980 <HAL_DMA_PollForTransfer+0x2f4>
 80018fe:	bf00      	nop
 8001900:	40020008 	.word	0x40020008
 8001904:	4002001c 	.word	0x4002001c
 8001908:	40020030 	.word	0x40020030
 800190c:	40020044 	.word	0x40020044
 8001910:	40020058 	.word	0x40020058
 8001914:	4002006c 	.word	0x4002006c
 8001918:	40020000 	.word	0x40020000
  }
  else
  {
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a1c      	ldr	r2, [pc, #112]	@ (8001994 <HAL_DMA_PollForTransfer+0x308>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d029      	beq.n	800197a <HAL_DMA_PollForTransfer+0x2ee>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1b      	ldr	r2, [pc, #108]	@ (8001998 <HAL_DMA_PollForTransfer+0x30c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d022      	beq.n	8001976 <HAL_DMA_PollForTransfer+0x2ea>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a19      	ldr	r2, [pc, #100]	@ (800199c <HAL_DMA_PollForTransfer+0x310>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01a      	beq.n	8001970 <HAL_DMA_PollForTransfer+0x2e4>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a18      	ldr	r2, [pc, #96]	@ (80019a0 <HAL_DMA_PollForTransfer+0x314>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d012      	beq.n	800196a <HAL_DMA_PollForTransfer+0x2de>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a16      	ldr	r2, [pc, #88]	@ (80019a4 <HAL_DMA_PollForTransfer+0x318>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00a      	beq.n	8001964 <HAL_DMA_PollForTransfer+0x2d8>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a15      	ldr	r2, [pc, #84]	@ (80019a8 <HAL_DMA_PollForTransfer+0x31c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d102      	bne.n	800195e <HAL_DMA_PollForTransfer+0x2d2>
 8001958:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800195c:	e00e      	b.n	800197c <HAL_DMA_PollForTransfer+0x2f0>
 800195e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001962:	e00b      	b.n	800197c <HAL_DMA_PollForTransfer+0x2f0>
 8001964:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001968:	e008      	b.n	800197c <HAL_DMA_PollForTransfer+0x2f0>
 800196a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800196e:	e005      	b.n	800197c <HAL_DMA_PollForTransfer+0x2f0>
 8001970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001974:	e002      	b.n	800197c <HAL_DMA_PollForTransfer+0x2f0>
 8001976:	2340      	movs	r3, #64	@ 0x40
 8001978:	e000      	b.n	800197c <HAL_DMA_PollForTransfer+0x2f0>
 800197a:	2304      	movs	r3, #4
 800197c:	4a0b      	ldr	r2, [pc, #44]	@ (80019ac <HAL_DMA_PollForTransfer+0x320>)
 800197e:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40020008 	.word	0x40020008
 8001998:	4002001c 	.word	0x4002001c
 800199c:	40020030 	.word	0x40020030
 80019a0:	40020044 	.word	0x40020044
 80019a4:	40020058 	.word	0x40020058
 80019a8:	4002006c 	.word	0x4002006c
 80019ac:	40020000 	.word	0x40020000

080019b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	2204      	movs	r2, #4
 80019ce:	409a      	lsls	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d04f      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xc8>
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d04a      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d107      	bne.n	8001a00 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0204 	bic.w	r2, r2, #4
 80019fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a66      	ldr	r2, [pc, #408]	@ (8001ba0 <HAL_DMA_IRQHandler+0x1f0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d029      	beq.n	8001a5e <HAL_DMA_IRQHandler+0xae>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a65      	ldr	r2, [pc, #404]	@ (8001ba4 <HAL_DMA_IRQHandler+0x1f4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d022      	beq.n	8001a5a <HAL_DMA_IRQHandler+0xaa>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a63      	ldr	r2, [pc, #396]	@ (8001ba8 <HAL_DMA_IRQHandler+0x1f8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d01a      	beq.n	8001a54 <HAL_DMA_IRQHandler+0xa4>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a62      	ldr	r2, [pc, #392]	@ (8001bac <HAL_DMA_IRQHandler+0x1fc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d012      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x9e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a60      	ldr	r2, [pc, #384]	@ (8001bb0 <HAL_DMA_IRQHandler+0x200>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00a      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x98>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a5f      	ldr	r2, [pc, #380]	@ (8001bb4 <HAL_DMA_IRQHandler+0x204>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d102      	bne.n	8001a42 <HAL_DMA_IRQHandler+0x92>
 8001a3c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a40:	e00e      	b.n	8001a60 <HAL_DMA_IRQHandler+0xb0>
 8001a42:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a46:	e00b      	b.n	8001a60 <HAL_DMA_IRQHandler+0xb0>
 8001a48:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001a4c:	e008      	b.n	8001a60 <HAL_DMA_IRQHandler+0xb0>
 8001a4e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a52:	e005      	b.n	8001a60 <HAL_DMA_IRQHandler+0xb0>
 8001a54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a58:	e002      	b.n	8001a60 <HAL_DMA_IRQHandler+0xb0>
 8001a5a:	2340      	movs	r3, #64	@ 0x40
 8001a5c:	e000      	b.n	8001a60 <HAL_DMA_IRQHandler+0xb0>
 8001a5e:	2304      	movs	r3, #4
 8001a60:	4a55      	ldr	r2, [pc, #340]	@ (8001bb8 <HAL_DMA_IRQHandler+0x208>)
 8001a62:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 8094 	beq.w	8001b96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a76:	e08e      	b.n	8001b96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d056      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x186>
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d051      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0320 	and.w	r3, r3, #32
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 020a 	bic.w	r2, r2, #10
 8001aae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a38      	ldr	r2, [pc, #224]	@ (8001ba0 <HAL_DMA_IRQHandler+0x1f0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d029      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x166>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a37      	ldr	r2, [pc, #220]	@ (8001ba4 <HAL_DMA_IRQHandler+0x1f4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d022      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x162>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a35      	ldr	r2, [pc, #212]	@ (8001ba8 <HAL_DMA_IRQHandler+0x1f8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01a      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x15c>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a34      	ldr	r2, [pc, #208]	@ (8001bac <HAL_DMA_IRQHandler+0x1fc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d012      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x156>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a32      	ldr	r2, [pc, #200]	@ (8001bb0 <HAL_DMA_IRQHandler+0x200>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00a      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x150>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a31      	ldr	r2, [pc, #196]	@ (8001bb4 <HAL_DMA_IRQHandler+0x204>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d102      	bne.n	8001afa <HAL_DMA_IRQHandler+0x14a>
 8001af4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001af8:	e00e      	b.n	8001b18 <HAL_DMA_IRQHandler+0x168>
 8001afa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001afe:	e00b      	b.n	8001b18 <HAL_DMA_IRQHandler+0x168>
 8001b00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b04:	e008      	b.n	8001b18 <HAL_DMA_IRQHandler+0x168>
 8001b06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b0a:	e005      	b.n	8001b18 <HAL_DMA_IRQHandler+0x168>
 8001b0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b10:	e002      	b.n	8001b18 <HAL_DMA_IRQHandler+0x168>
 8001b12:	2320      	movs	r3, #32
 8001b14:	e000      	b.n	8001b18 <HAL_DMA_IRQHandler+0x168>
 8001b16:	2302      	movs	r3, #2
 8001b18:	4a27      	ldr	r2, [pc, #156]	@ (8001bb8 <HAL_DMA_IRQHandler+0x208>)
 8001b1a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d034      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b34:	e02f      	b.n	8001b96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d028      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x1e8>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d023      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 020e 	bic.w	r2, r2, #14
 8001b5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d004      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
    }
  }
  return;
 8001b96:	bf00      	nop
 8001b98:	bf00      	nop
}
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40020008 	.word	0x40020008
 8001ba4:	4002001c 	.word	0x4002001c
 8001ba8:	40020030 	.word	0x40020030
 8001bac:	40020044 	.word	0x40020044
 8001bb0:	40020058 	.word	0x40020058
 8001bb4:	4002006c 	.word	0x4002006c
 8001bb8:	40020000 	.word	0x40020000

08001bbc <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_DMA_RegisterCallback+0x20>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e031      	b.n	8001c40 <HAL_DMA_RegisterCallback+0x84>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d121      	bne.n	8001c32 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8001bee:	7afb      	ldrb	r3, [r7, #11]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d81b      	bhi.n	8001c2c <HAL_DMA_RegisterCallback+0x70>
 8001bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bfc <HAL_DMA_RegisterCallback+0x40>)
 8001bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfa:	bf00      	nop
 8001bfc:	08001c0d 	.word	0x08001c0d
 8001c00:	08001c15 	.word	0x08001c15
 8001c04:	08001c1d 	.word	0x08001c1d
 8001c08:	08001c25 	.word	0x08001c25
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8001c12:	e010      	b.n	8001c36 <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;         
 8001c1a:	e00c      	b.n	8001c36 <HAL_DMA_RegisterCallback+0x7a>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	631a      	str	r2, [r3, #48]	@ 0x30
      break;         
 8001c22:	e008      	b.n	8001c36 <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	635a      	str	r2, [r3, #52]	@ 0x34
      break; 
 8001c2a:	e004      	b.n	8001c36 <HAL_DMA_RegisterCallback+0x7a>
      
    default:
      status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 8001c30:	e001      	b.n	8001c36 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop

08001c4c <HAL_DMA_UnRegisterCallback>:
  * @param CallbackID: User Callback identifer
  *                    a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_DMA_UnRegisterCallback+0x1e>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e03f      	b.n	8001cea <HAL_DMA_UnRegisterCallback+0x9e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d12f      	bne.n	8001cdc <HAL_DMA_UnRegisterCallback+0x90>
  {
    switch (CallbackID)
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d829      	bhi.n	8001cd6 <HAL_DMA_UnRegisterCallback+0x8a>
 8001c82:	a201      	add	r2, pc, #4	@ (adr r2, 8001c88 <HAL_DMA_UnRegisterCallback+0x3c>)
 8001c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c88:	08001c9d 	.word	0x08001c9d
 8001c8c:	08001ca5 	.word	0x08001ca5
 8001c90:	08001cad 	.word	0x08001cad
 8001c94:	08001cb5 	.word	0x08001cb5
 8001c98:	08001cbd 	.word	0x08001cbd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8001ca2:	e01d      	b.n	8001ce0 <HAL_DMA_UnRegisterCallback+0x94>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;         
 8001caa:	e019      	b.n	8001ce0 <HAL_DMA_UnRegisterCallback+0x94>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	631a      	str	r2, [r3, #48]	@ 0x30
      break;         
 8001cb2:	e015      	b.n	8001ce0 <HAL_DMA_UnRegisterCallback+0x94>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	635a      	str	r2, [r3, #52]	@ 0x34
      break; 
 8001cba:	e011      	b.n	8001ce0 <HAL_DMA_UnRegisterCallback+0x94>

    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	629a      	str	r2, [r3, #40]	@ 0x28
      hdma->XferHalfCpltCallback = NULL;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hdma->XferErrorCallback = NULL;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	631a      	str	r2, [r3, #48]	@ 0x30
      hdma->XferAbortCallback = NULL;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	635a      	str	r2, [r3, #52]	@ 0x34
      break; 
 8001cd4:	e004      	b.n	8001ce0 <HAL_DMA_UnRegisterCallback+0x94>

    default:
      status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8001cda:	e001      	b.n	8001ce0 <HAL_DMA_UnRegisterCallback+0x94>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b10      	cmp	r3, #16
 8001d4e:	d108      	bne.n	8001d62 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d60:	e007      	b.n	8001d72 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	60da      	str	r2, [r3, #12]
}
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_EXTI_SetConfigLine+0x16>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e08f      	b.n	8001eb6 <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8001da8:	2201      	movs	r2, #1
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d052      	beq.n	8001e64 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 8001dca:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	493c      	ldr	r1, [pc, #240]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
 8001dd6:	e006      	b.n	8001de6 <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8001dd8:	4b39      	ldr	r3, [pc, #228]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	4937      	ldr	r1, [pc, #220]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d006      	beq.n	8001e00 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 8001df2:	4b33      	ldr	r3, [pc, #204]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	4932      	ldr	r1, [pc, #200]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60cb      	str	r3, [r1, #12]
 8001dfe:	e006      	b.n	8001e0e <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8001e00:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	492d      	ldr	r1, [pc, #180]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8001e16:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8001e1a:	d123      	bne.n	8001e64 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));
      
      regval = AFIO->EXTICR[linepos >> 2u];
 8001e1c:	4a29      	ldr	r2, [pc, #164]	@ (8001ec4 <HAL_EXTI_SetConfigLine+0x148>)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e28:	60fb      	str	r3, [r7, #12]
      regval &= ~(AFIO_EXTICR1_EXTI0 << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
      AFIO->EXTICR[linepos >> 2u] = regval;
 8001e56:	491b      	ldr	r1, [pc, #108]	@ (8001ec4 <HAL_EXTI_SetConfigLine+0x148>)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 8001e70:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4912      	ldr	r1, [pc, #72]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
 8001e7c:	e006      	b.n	8001e8c <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8001e7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	490e      	ldr	r1, [pc, #56]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d006      	beq.n	8001ea6 <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4908      	ldr	r1, [pc, #32]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
 8001ea4:	e006      	b.n	8001eb4 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	4904      	ldr	r1, [pc, #16]	@ (8001ec0 <HAL_EXTI_SetConfigLine+0x144>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	371c      	adds	r7, #28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	40010400 	.word	0x40010400
 8001ec4:	40010000 	.word	0x40010000

08001ec8 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <HAL_EXTI_GetConfigLine+0x16>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e061      	b.n	8001fa6 <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 8001efe:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb0 <HAL_EXTI_GetConfigLine+0xe8>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	e002      	b.n	8001f18 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 8001f18:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <HAL_EXTI_GetConfigLine+0xe8>)
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f043 0202 	orr.w	r2, r3, #2
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d02d      	beq.n	8001fa4 <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 8001f48:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <HAL_EXTI_GetConfigLine+0xe8>)
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <HAL_EXTI_GetConfigLine+0xe8>)
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f043 0202 	orr.w	r2, r3, #2
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8001f7a:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8001f7e:	d111      	bne.n	8001fa4 <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = AFIO->EXTICR[linepos >> 2u];
 8001f80:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb4 <HAL_EXTI_GetConfigLine+0xec>)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8c:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (AFIO_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	0e1a      	lsrs	r2, r3, #24
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	371c      	adds	r7, #28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	40010400 	.word	0x40010400
 8001fb4:	40010000 	.word	0x40010000

08001fb8 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e04c      	b.n	8002064 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 8001fde:	4b24      	ldr	r3, [pc, #144]	@ (8002070 <HAL_EXTI_ClearConfigLine+0xb8>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4922      	ldr	r1, [pc, #136]	@ (8002070 <HAL_EXTI_ClearConfigLine+0xb8>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 8001fec:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <HAL_EXTI_ClearConfigLine+0xb8>)
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	491e      	ldr	r1, [pc, #120]	@ (8002070 <HAL_EXTI_ClearConfigLine+0xb8>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d02d      	beq.n	8002062 <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 8002006:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HAL_EXTI_ClearConfigLine+0xb8>)
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	4918      	ldr	r1, [pc, #96]	@ (8002070 <HAL_EXTI_ClearConfigLine+0xb8>)
 8002010:	4013      	ands	r3, r2
 8002012:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 8002014:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <HAL_EXTI_ClearConfigLine+0xb8>)
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	4914      	ldr	r1, [pc, #80]	@ (8002070 <HAL_EXTI_ClearConfigLine+0xb8>)
 800201e:	4013      	ands	r3, r2
 8002020:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800202a:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800202e:	d118      	bne.n	8002062 <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = AFIO->EXTICR[linepos >> 2u];
 8002030:	4a10      	ldr	r2, [pc, #64]	@ (8002074 <HAL_EXTI_ClearConfigLine+0xbc>)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	3302      	adds	r3, #2
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	60fb      	str	r3, [r7, #12]
      regval &= ~(AFIO_EXTICR1_EXTI0 << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
      AFIO->EXTICR[linepos >> 2u] = regval;
 8002054:	4907      	ldr	r1, [pc, #28]	@ (8002074 <HAL_EXTI_ClearConfigLine+0xbc>)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	3302      	adds	r3, #2
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40010400 	.word	0x40010400
 8002074:	40010000 	.word	0x40010000

08002078 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	460b      	mov	r3, r1
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800208a:	7afb      	ldrb	r3, [r7, #11]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d103      	bne.n	8002098 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	605a      	str	r2, [r3, #4]
      break;
 8002096:	e002      	b.n	800209e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	75fb      	strb	r3, [r7, #23]
      break;
 800209c:	bf00      	nop
  }

  return status;
 800209e:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e003      	b.n	80020c6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80020c4:	2300      	movs	r3, #0
  }
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	2201      	movs	r2, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80020e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <HAL_EXTI_IRQHandler+0x44>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4013      	ands	r3, r2
 80020f0:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80020f8:	4a06      	ldr	r2, [pc, #24]	@ (8002114 <HAL_EXTI_IRQHandler+0x44>)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4798      	blx	r3
    }
  }
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument compilation warning */
  UNUSED(Edge);

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 800212c:	2201      	movs	r2, #1
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <HAL_EXTI_GetPending+0x3c>)
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	401a      	ands	r2, r3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
 8002144:	60fb      	str	r3, [r7, #12]
  return regval;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40010400 	.word	0x40010400

08002158 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument compilation warning */
  UNUSED(Edge);

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	2201      	movs	r2, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8002172:	4a04      	ldr	r2, [pc, #16]	@ (8002184 <HAL_EXTI_ClearPending+0x2c>)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6153      	str	r3, [r2, #20]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2201      	movs	r2, #1
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 80021a0:	4a03      	ldr	r2, [pc, #12]	@ (80021b0 <HAL_EXTI_GenerateSWI+0x28>)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6113      	str	r3, [r2, #16]
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	40010400 	.word	0x40010400

080021b4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80021b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021ce:	4b2f      	ldr	r3, [pc, #188]	@ (800228c <HAL_FLASH_Program+0xd8>)
 80021d0:	7e1b      	ldrb	r3, [r3, #24]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_FLASH_Program+0x26>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e054      	b.n	8002284 <HAL_FLASH_Program+0xd0>
 80021da:	4b2c      	ldr	r3, [pc, #176]	@ (800228c <HAL_FLASH_Program+0xd8>)
 80021dc:	2201      	movs	r2, #1
 80021de:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80021e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80021e4:	f000 fa22 	bl	800262c <FLASH_WaitForLastOperation>
 80021e8:	4603      	mov	r3, r0
 80021ea:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d144      	bne.n	800227c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d102      	bne.n	80021fe <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80021f8:	2301      	movs	r3, #1
 80021fa:	757b      	strb	r3, [r7, #21]
 80021fc:	e007      	b.n	800220e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d102      	bne.n	800220a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002204:	2302      	movs	r3, #2
 8002206:	757b      	strb	r3, [r7, #21]
 8002208:	e001      	b.n	800220e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800220a:	2304      	movs	r3, #4
 800220c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800220e:	2300      	movs	r3, #0
 8002210:	75bb      	strb	r3, [r7, #22]
 8002212:	e02d      	b.n	8002270 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002214:	7dbb      	ldrb	r3, [r7, #22]
 8002216:	005a      	lsls	r2, r3, #1
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	eb02 0c03 	add.w	ip, r2, r3
 800221e:	7dbb      	ldrb	r3, [r7, #22]
 8002220:	0119      	lsls	r1, r3, #4
 8002222:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002226:	f1c1 0620 	rsb	r6, r1, #32
 800222a:	f1a1 0020 	sub.w	r0, r1, #32
 800222e:	fa22 f401 	lsr.w	r4, r2, r1
 8002232:	fa03 f606 	lsl.w	r6, r3, r6
 8002236:	4334      	orrs	r4, r6
 8002238:	fa23 f000 	lsr.w	r0, r3, r0
 800223c:	4304      	orrs	r4, r0
 800223e:	fa23 f501 	lsr.w	r5, r3, r1
 8002242:	b2a3      	uxth	r3, r4
 8002244:	4619      	mov	r1, r3
 8002246:	4660      	mov	r0, ip
 8002248:	f000 f9d4 	bl	80025f4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800224c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002250:	f000 f9ec 	bl	800262c <FLASH_WaitForLastOperation>
 8002254:	4603      	mov	r3, r0
 8002256:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002258:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <HAL_FLASH_Program+0xdc>)
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	4a0c      	ldr	r2, [pc, #48]	@ (8002290 <HAL_FLASH_Program+0xdc>)
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d107      	bne.n	800227a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800226a:	7dbb      	ldrb	r3, [r7, #22]
 800226c:	3301      	adds	r3, #1
 800226e:	75bb      	strb	r3, [r7, #22]
 8002270:	7dba      	ldrb	r2, [r7, #22]
 8002272:	7d7b      	ldrb	r3, [r7, #21]
 8002274:	429a      	cmp	r2, r3
 8002276:	d3cd      	bcc.n	8002214 <HAL_FLASH_Program+0x60>
 8002278:	e000      	b.n	800227c <HAL_FLASH_Program+0xc8>
      {
        break;
 800227a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800227c:	4b03      	ldr	r3, [pc, #12]	@ (800228c <HAL_FLASH_Program+0xd8>)
 800227e:	2200      	movs	r2, #0
 8002280:	761a      	strb	r2, [r3, #24]

  return status;
 8002282:	7dfb      	ldrb	r3, [r7, #23]
}
 8002284:	4618      	mov	r0, r3
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800228c:	200000e0 	.word	0x200000e0
 8002290:	40022000 	.word	0x40022000

08002294 <HAL_FLASH_Program_IT>:
  * @param  Data:        Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022a6:	4b1d      	ldr	r3, [pc, #116]	@ (800231c <HAL_FLASH_Program_IT+0x88>)
 80022a8:	7e1b      	ldrb	r3, [r3, #24]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_FLASH_Program_IT+0x1e>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e030      	b.n	8002314 <HAL_FLASH_Program_IT+0x80>
 80022b2:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <HAL_FLASH_Program_IT+0x88>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	761a      	strb	r2, [r3, #24]
    /* Enable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
  }
#else
  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80022b8:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <HAL_FLASH_Program_IT+0x8c>)
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4a18      	ldr	r2, [pc, #96]	@ (8002320 <HAL_FLASH_Program_IT+0x8c>)
 80022be:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80022c2:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */
  
  pFlash.Address = Address;
 80022c4:	4a15      	ldr	r2, [pc, #84]	@ (800231c <HAL_FLASH_Program_IT+0x88>)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	6093      	str	r3, [r2, #8]
  pFlash.Data = Data;
 80022ca:	4914      	ldr	r1, [pc, #80]	@ (800231c <HAL_FLASH_Program_IT+0x88>)
 80022cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022d0:	e9c1 2304 	strd	r2, r3, [r1, #16]

  if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d106      	bne.n	80022e8 <HAL_FLASH_Program_IT+0x54>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
 80022da:	4b10      	ldr	r3, [pc, #64]	@ (800231c <HAL_FLASH_Program_IT+0x88>)
 80022dc:	2203      	movs	r2, #3
 80022de:	701a      	strb	r2, [r3, #0]
    /* Program halfword (16-bit) at a specified address. */
    pFlash.DataRemaining = 1U;
 80022e0:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <HAL_FLASH_Program_IT+0x88>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	e00f      	b.n	8002308 <HAL_FLASH_Program_IT+0x74>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d106      	bne.n	80022fc <HAL_FLASH_Program_IT+0x68>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_FLASH_Program_IT+0x88>)
 80022f0:	2204      	movs	r2, #4
 80022f2:	701a      	strb	r2, [r3, #0]
    /* Program word (32-bit : 2*16-bit) at a specified address. */
    pFlash.DataRemaining = 2U;
 80022f4:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_FLASH_Program_IT+0x88>)
 80022f6:	2202      	movs	r2, #2
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	e005      	b.n	8002308 <HAL_FLASH_Program_IT+0x74>
  }
  else
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
 80022fc:	4b07      	ldr	r3, [pc, #28]	@ (800231c <HAL_FLASH_Program_IT+0x88>)
 80022fe:	2205      	movs	r2, #5
 8002300:	701a      	strb	r2, [r3, #0]
    /* Program double word (64-bit : 4*16-bit) at a specified address. */
    pFlash.DataRemaining = 4U;
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_FLASH_Program_IT+0x88>)
 8002304:	2204      	movs	r2, #4
 8002306:	605a      	str	r2, [r3, #4]
  }

  /* Program halfword (16-bit) at a specified address. */
  FLASH_Program_HalfWord(Address, (uint16_t)Data);
 8002308:	883b      	ldrh	r3, [r7, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	68b8      	ldr	r0, [r7, #8]
 800230e:	f000 f971 	bl	80025f4 <FLASH_Program_HalfWord>

  return status;
 8002312:	7dfb      	ldrb	r3, [r7, #23]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	200000e0 	.word	0x200000e0
 8002320:	40022000 	.word	0x40022000

08002324 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800232e:	4b6d      	ldr	r3, [pc, #436]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <HAL_FLASH_IRQHandler+0x22>
 800233a:	4b6a      	ldr	r3, [pc, #424]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00e      	beq.n	8002364 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002346:	4b68      	ldr	r3, [pc, #416]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 800234c:	4b66      	ldr	r3, [pc, #408]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 800234e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002352:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002354:	f000 f9b0 	bl	80026b8 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f8d0 	bl	80024fe <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800235e:	4b62      	ldr	r3, [pc, #392]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002364:	4b5f      	ldr	r3, [pc, #380]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80a0 	beq.w	80024b2 <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002372:	4b5c      	ldr	r3, [pc, #368]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002374:	2220      	movs	r2, #32
 8002376:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002378:	4b5b      	ldr	r3, [pc, #364]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8097 	beq.w	80024b2 <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002384:	4b58      	ldr	r3, [pc, #352]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d12d      	bne.n	80023ea <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 800238e:	4b56      	ldr	r3, [pc, #344]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	4a54      	ldr	r2, [pc, #336]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002396:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002398:	4b53      	ldr	r3, [pc, #332]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d017      	beq.n	80023d0 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 80023a0:	4b51      	ldr	r3, [pc, #324]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f8a0 	bl	80024ec <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80023ac:	4b4e      	ldr	r3, [pc, #312]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023b4:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80023b6:	4a4c      	ldr	r2, [pc, #304]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80023bc:	4b49      	ldr	r3, [pc, #292]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	4a48      	ldr	r2, [pc, #288]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 80023c2:	f023 0302 	bic.w	r3, r3, #2
 80023c6:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fdbb 	bl	8002f44 <FLASH_PageErase>
 80023ce:	e070      	b.n	80024b2 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	4a44      	ldr	r2, [pc, #272]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80023dc:	4b42      	ldr	r3, [pc, #264]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f882 	bl	80024ec <HAL_FLASH_EndOfOperationCallback>
 80023e8:	e063      	b.n	80024b2 <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80023ea:	4b3f      	ldr	r3, [pc, #252]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d10c      	bne.n	800240e <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80023f4:	4b3b      	ldr	r3, [pc, #236]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	4a3a      	ldr	r2, [pc, #232]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 80023fa:	f023 0304 	bic.w	r3, r3, #4
 80023fe:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002400:	2000      	movs	r0, #0
 8002402:	f000 f873 	bl	80024ec <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002406:	4b38      	ldr	r3, [pc, #224]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	e051      	b.n	80024b2 <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 800240e:	4b36      	ldr	r3, [pc, #216]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	4a34      	ldr	r2, [pc, #208]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002416:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002418:	4b33      	ldr	r3, [pc, #204]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d024      	beq.n	800246a <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002420:	4b31      	ldr	r3, [pc, #196]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	3302      	adds	r3, #2
 8002426:	4a30      	ldr	r2, [pc, #192]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002428:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 800242a:	4b2f      	ldr	r3, [pc, #188]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002430:	4b2d      	ldr	r3, [pc, #180]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002432:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	0c02      	lsrs	r2, r0, #16
 8002440:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002444:	0c0b      	lsrs	r3, r1, #16
 8002446:	4928      	ldr	r1, [pc, #160]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002448:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800244c:	4b25      	ldr	r3, [pc, #148]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	4a24      	ldr	r2, [pc, #144]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002458:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 800245a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800245e:	b293      	uxth	r3, r2
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f8c6 	bl	80025f4 <FLASH_Program_HalfWord>
 8002468:	e023      	b.n	80024b2 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 800246a:	4b1f      	ldr	r3, [pc, #124]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b03      	cmp	r3, #3
 8002472:	d105      	bne.n	8002480 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002474:	4b1c      	ldr	r3, [pc, #112]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f837 	bl	80024ec <HAL_FLASH_EndOfOperationCallback>
 800247e:	e011      	b.n	80024a4 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002480:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b04      	cmp	r3, #4
 8002488:	d106      	bne.n	8002498 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 800248a:	4b17      	ldr	r3, [pc, #92]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	3b02      	subs	r3, #2
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f82b 	bl	80024ec <HAL_FLASH_EndOfOperationCallback>
 8002496:	e005      	b.n	80024a4 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	3b06      	subs	r3, #6
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f824 	bl	80024ec <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 80024a4:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 80024a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024aa:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80024ac:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80024b2:	4b0d      	ldr	r3, [pc, #52]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10e      	bne.n	80024da <HAL_FLASH_IRQHandler+0x1b6>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80024bc:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	4a08      	ldr	r2, [pc, #32]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 80024c2:	f023 0307 	bic.w	r3, r3, #7
 80024c6:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	4a05      	ldr	r2, [pc, #20]	@ (80024e4 <HAL_FLASH_IRQHandler+0x1c0>)
 80024ce:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 80024d2:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80024d4:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <HAL_FLASH_IRQHandler+0x1c4>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	761a      	strb	r2, [r3, #24]
  }
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40022000 	.word	0x40022000
 80024e8:	200000e0 	.word	0x200000e0

080024ec <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800251a:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <HAL_FLASH_Unlock+0x40>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002526:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_FLASH_Unlock+0x40>)
 8002528:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <HAL_FLASH_Unlock+0x44>)
 800252a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800252c:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <HAL_FLASH_Unlock+0x40>)
 800252e:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <HAL_FLASH_Unlock+0x48>)
 8002530:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002532:	4b07      	ldr	r3, [pc, #28]	@ (8002550 <HAL_FLASH_Unlock+0x40>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002542:	79fb      	ldrb	r3, [r7, #7]
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40022000 	.word	0x40022000
 8002554:	45670123 	.word	0x45670123
 8002558:	cdef89ab 	.word	0xcdef89ab

0800255c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <HAL_FLASH_Lock+0x1c>)
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	4a04      	ldr	r2, [pc, #16]	@ (8002578 <HAL_FLASH_Lock+0x1c>)
 8002566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800256a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40022000 	.word	0x40022000

0800257c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002580:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <HAL_FLASH_OB_Unlock+0x2c>)
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_FLASH_OB_Unlock+0x2c>)
 800258e:	4a07      	ldr	r2, [pc, #28]	@ (80025ac <HAL_FLASH_OB_Unlock+0x30>)
 8002590:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002592:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_FLASH_OB_Unlock+0x2c>)
 8002594:	4a06      	ldr	r2, [pc, #24]	@ (80025b0 <HAL_FLASH_OB_Unlock+0x34>)
 8002596:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002598:	2300      	movs	r3, #0
 800259a:	e000      	b.n	800259e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40022000 	.word	0x40022000
 80025ac:	45670123 	.word	0x45670123
 80025b0:	cdef89ab 	.word	0xcdef89ab

080025b4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_FLASH_OB_Lock+0x1c>)
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	4a04      	ldr	r2, [pc, #16]	@ (80025d0 <HAL_FLASH_OB_Lock+0x1c>)
 80025be:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025c2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40022000 	.word	0x40022000

080025d4 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */
void HAL_FLASH_OB_Launch(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 80025d8:	f7fe fdc1 	bl	800115e <HAL_NVIC_SystemReset>
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80025e4:	4b02      	ldr	r3, [pc, #8]	@ (80025f0 <HAL_FLASH_GetError+0x10>)
 80025e6:	69db      	ldr	r3, [r3, #28]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	200000e0 	.word	0x200000e0

080025f4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002600:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <FLASH_Program_HalfWord+0x30>)
 8002602:	2200      	movs	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002606:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <FLASH_Program_HalfWord+0x34>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	4a07      	ldr	r2, [pc, #28]	@ (8002628 <FLASH_Program_HalfWord+0x34>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	887a      	ldrh	r2, [r7, #2]
 8002616:	801a      	strh	r2, [r3, #0]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	200000e0 	.word	0x200000e0
 8002628:	40022000 	.word	0x40022000

0800262c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7fe fa58 	bl	8000ae8 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800263a:	e010      	b.n	800265e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002642:	d00c      	beq.n	800265e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <FLASH_WaitForLastOperation+0x2e>
 800264a:	f7fe fa4d 	bl	8000ae8 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	429a      	cmp	r2, r3
 8002658:	d201      	bcs.n	800265e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e025      	b.n	80026aa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <FLASH_WaitForLastOperation+0x88>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1e8      	bne.n	800263c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800266a:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <FLASH_WaitForLastOperation+0x88>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002676:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <FLASH_WaitForLastOperation+0x88>)
 8002678:	2220      	movs	r2, #32
 800267a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800267c:	4b0d      	ldr	r3, [pc, #52]	@ (80026b4 <FLASH_WaitForLastOperation+0x88>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10b      	bne.n	80026a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002688:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <FLASH_WaitForLastOperation+0x88>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002694:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <FLASH_WaitForLastOperation+0x88>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80026a0:	f000 f80a 	bl	80026b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40022000 	.word	0x40022000

080026b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80026c2:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <FLASH_SetErrorCode+0x98>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80026ce:	4b21      	ldr	r3, [pc, #132]	@ (8002754 <FLASH_SetErrorCode+0x9c>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002754 <FLASH_SetErrorCode+0x9c>)
 80026d8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f043 0310 	orr.w	r3, r3, #16
 80026e0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80026e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002750 <FLASH_SetErrorCode+0x98>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80026ee:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <FLASH_SetErrorCode+0x9c>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	4a17      	ldr	r2, [pc, #92]	@ (8002754 <FLASH_SetErrorCode+0x9c>)
 80026f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002702:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <FLASH_SetErrorCode+0x98>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <FLASH_SetErrorCode+0x9c>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	4a0f      	ldr	r2, [pc, #60]	@ (8002754 <FLASH_SetErrorCode+0x9c>)
 8002718:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800271a:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <FLASH_SetErrorCode+0x98>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4a0c      	ldr	r2, [pc, #48]	@ (8002750 <FLASH_SetErrorCode+0x98>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f240 1201 	movw	r2, #257	@ 0x101
 800272c:	4293      	cmp	r3, r2
 800272e:	d106      	bne.n	800273e <FLASH_SetErrorCode+0x86>
 8002730:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <FLASH_SetErrorCode+0x98>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	4a06      	ldr	r2, [pc, #24]	@ (8002750 <FLASH_SetErrorCode+0x98>)
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	61d3      	str	r3, [r2, #28]
}  
 800273c:	e002      	b.n	8002744 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800273e:	4a04      	ldr	r2, [pc, #16]	@ (8002750 <FLASH_SetErrorCode+0x98>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	60d3      	str	r3, [r2, #12]
}  
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40022000 	.word	0x40022000
 8002754:	200000e0 	.word	0x200000e0

08002758 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800276a:	4b2f      	ldr	r3, [pc, #188]	@ (8002828 <HAL_FLASHEx_Erase+0xd0>)
 800276c:	7e1b      	ldrb	r3, [r3, #24]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_FLASHEx_Erase+0x1e>
 8002772:	2302      	movs	r3, #2
 8002774:	e053      	b.n	800281e <HAL_FLASHEx_Erase+0xc6>
 8002776:	4b2c      	ldr	r3, [pc, #176]	@ (8002828 <HAL_FLASHEx_Erase+0xd0>)
 8002778:	2201      	movs	r2, #1
 800277a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d116      	bne.n	80027b2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002784:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002788:	f7ff ff50 	bl	800262c <FLASH_WaitForLastOperation>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d141      	bne.n	8002816 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002792:	2001      	movs	r0, #1
 8002794:	f000 f988 	bl	8002aa8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002798:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800279c:	f7ff ff46 	bl	800262c <FLASH_WaitForLastOperation>
 80027a0:	4603      	mov	r3, r0
 80027a2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80027a4:	4b21      	ldr	r3, [pc, #132]	@ (800282c <HAL_FLASHEx_Erase+0xd4>)
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	4a20      	ldr	r2, [pc, #128]	@ (800282c <HAL_FLASHEx_Erase+0xd4>)
 80027aa:	f023 0304 	bic.w	r3, r3, #4
 80027ae:	6113      	str	r3, [r2, #16]
 80027b0:	e031      	b.n	8002816 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80027b2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80027b6:	f7ff ff39 	bl	800262c <FLASH_WaitForLastOperation>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d12a      	bne.n	8002816 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027c6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	e019      	b.n	8002804 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80027d0:	68b8      	ldr	r0, [r7, #8]
 80027d2:	f000 fbb7 	bl	8002f44 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027d6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80027da:	f7ff ff27 	bl	800262c <FLASH_WaitForLastOperation>
 80027de:	4603      	mov	r3, r0
 80027e0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80027e2:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_FLASHEx_Erase+0xd4>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	4a11      	ldr	r2, [pc, #68]	@ (800282c <HAL_FLASHEx_Erase+0xd4>)
 80027e8:	f023 0302 	bic.w	r3, r3, #2
 80027ec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	601a      	str	r2, [r3, #0]
            break;
 80027fa:	e00c      	b.n	8002816 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002802:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	029a      	lsls	r2, r3, #10
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	4413      	add	r3, r2
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	429a      	cmp	r2, r3
 8002814:	d3dc      	bcc.n	80027d0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002816:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <HAL_FLASHEx_Erase+0xd0>)
 8002818:	2200      	movs	r2, #0
 800281a:	761a      	strb	r2, [r3, #24]

  return status;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200000e0 	.word	0x200000e0
 800282c:	40022000 	.word	0x40022000

08002830 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800283c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ac <HAL_FLASHEx_Erase_IT+0x7c>)
 800283e:	7e1b      	ldrb	r3, [r3, #24]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_FLASHEx_Erase_IT+0x18>
 8002844:	2302      	movs	r3, #2
 8002846:	e02d      	b.n	80028a4 <HAL_FLASHEx_Erase_IT+0x74>
 8002848:	4b18      	ldr	r3, [pc, #96]	@ (80028ac <HAL_FLASHEx_Erase_IT+0x7c>)
 800284a:	2201      	movs	r2, #1
 800284c:	761a      	strb	r2, [r3, #24]

  /* If procedure already ongoing, reject the next one */
  if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 800284e:	4b17      	ldr	r3, [pc, #92]	@ (80028ac <HAL_FLASHEx_Erase_IT+0x7c>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_FLASHEx_Erase_IT+0x2c>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e023      	b.n	80028a4 <HAL_FLASHEx_Erase_IT+0x74>
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 800285c:	4b14      	ldr	r3, [pc, #80]	@ (80028b0 <HAL_FLASHEx_Erase_IT+0x80>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	4a13      	ldr	r2, [pc, #76]	@ (80028b0 <HAL_FLASHEx_Erase_IT+0x80>)
 8002862:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8002866:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
  
#endif
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d108      	bne.n	8002882 <HAL_FLASHEx_Erase_IT+0x52>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 8002870:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <HAL_FLASHEx_Erase_IT+0x7c>)
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
        FLASH_MassErase(pEraseInit->Banks);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f914 	bl	8002aa8 <FLASH_MassErase>
 8002880:	e00f      	b.n	80028a2 <HAL_FLASHEx_Erase_IT+0x72>

    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

    pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
 8002882:	4b0a      	ldr	r3, [pc, #40]	@ (80028ac <HAL_FLASHEx_Erase_IT+0x7c>)
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
    pFlash.DataRemaining = pEraseInit->NbPages;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a07      	ldr	r2, [pc, #28]	@ (80028ac <HAL_FLASHEx_Erase_IT+0x7c>)
 800288e:	6053      	str	r3, [r2, #4]
    pFlash.Address = pEraseInit->PageAddress;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a05      	ldr	r2, [pc, #20]	@ (80028ac <HAL_FLASHEx_Erase_IT+0x7c>)
 8002896:	6093      	str	r3, [r2, #8]

    /*Erase 1st page and wait for IT*/
    FLASH_PageErase(pEraseInit->PageAddress);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fb51 	bl	8002f44 <FLASH_PageErase>
  }

  return status;
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	200000e0 	.word	0x200000e0
 80028b0:	40022000 	.word	0x40022000

080028b4 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 80028ba:	23a5      	movs	r3, #165	@ 0xa5
 80028bc:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	71fb      	strb	r3, [r7, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 80028c2:	f000 fb13 	bl	8002eec <FLASH_OB_GetRDP>
 80028c6:	4603      	mov	r3, r0
 80028c8:	71bb      	strb	r3, [r7, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028ca:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80028ce:	f7ff fead 	bl	800262c <FLASH_WaitForLastOperation>
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]

  if(status == HAL_OK)
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d123      	bne.n	8002924 <HAL_FLASHEx_OBErase+0x70>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80028dc:	4b14      	ldr	r3, [pc, #80]	@ (8002930 <HAL_FLASHEx_OBErase+0x7c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80028e2:	4b14      	ldr	r3, [pc, #80]	@ (8002934 <HAL_FLASHEx_OBErase+0x80>)
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	4a13      	ldr	r2, [pc, #76]	@ (8002934 <HAL_FLASHEx_OBErase+0x80>)
 80028e8:	f043 0320 	orr.w	r3, r3, #32
 80028ec:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80028ee:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <HAL_FLASHEx_OBErase+0x80>)
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	4a10      	ldr	r2, [pc, #64]	@ (8002934 <HAL_FLASHEx_OBErase+0x80>)
 80028f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028f8:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028fa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80028fe:	f7ff fe95 	bl	800262c <FLASH_WaitForLastOperation>
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002906:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <HAL_FLASHEx_OBErase+0x80>)
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	4a0a      	ldr	r2, [pc, #40]	@ (8002934 <HAL_FLASHEx_OBErase+0x80>)
 800290c:	f023 0320 	bic.w	r3, r3, #32
 8002910:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_FLASHEx_OBErase+0x70>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8002918:	79bb      	ldrb	r3, [r7, #6]
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fa22 	bl	8002d64 <FLASH_OB_RDP_LevelConfig>
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return the erase status */
  return status;
 8002924:	79fb      	ldrb	r3, [r7, #7]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	200000e0 	.word	0x200000e0
 8002934:	40022000 	.word	0x40022000

08002938 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002944:	4b39      	ldr	r3, [pc, #228]	@ (8002a2c <HAL_FLASHEx_OBProgram+0xf4>)
 8002946:	7e1b      	ldrb	r3, [r3, #24]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_FLASHEx_OBProgram+0x18>
 800294c:	2302      	movs	r3, #2
 800294e:	e069      	b.n	8002a24 <HAL_FLASHEx_OBProgram+0xec>
 8002950:	4b36      	ldr	r3, [pc, #216]	@ (8002a2c <HAL_FLASHEx_OBProgram+0xf4>)
 8002952:	2201      	movs	r2, #1
 8002954:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01a      	beq.n	8002998 <HAL_FLASHEx_OBProgram+0x60>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_FLASHEx_OBProgram+0x42>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f8b6 	bl	8002ae0 <FLASH_OB_EnableWRP>
 8002974:	4603      	mov	r3, r0
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	e006      	b.n	8002988 <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f950 	bl	8002c24 <FLASH_OB_DisableWRP>
 8002984:	4603      	mov	r3, r0
 8002986:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d004      	beq.n	8002998 <HAL_FLASHEx_OBProgram+0x60>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800298e:	4b27      	ldr	r3, [pc, #156]	@ (8002a2c <HAL_FLASHEx_OBProgram+0xf4>)
 8002990:	2200      	movs	r2, #0
 8002992:	761a      	strb	r2, [r3, #24]
      return status;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	e045      	b.n	8002a24 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00e      	beq.n	80029c2 <HAL_FLASHEx_OBProgram+0x8a>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	7c1b      	ldrb	r3, [r3, #16]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 f9db 	bl	8002d64 <FLASH_OB_RDP_LevelConfig>
 80029ae:	4603      	mov	r3, r0
 80029b0:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d004      	beq.n	80029c2 <HAL_FLASHEx_OBProgram+0x8a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80029b8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a2c <HAL_FLASHEx_OBProgram+0xf4>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	761a      	strb	r2, [r3, #24]
      return status;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	e030      	b.n	8002a24 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00e      	beq.n	80029ec <HAL_FLASHEx_OBProgram+0xb4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	7c5b      	ldrb	r3, [r3, #17]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fa16 	bl	8002e04 <FLASH_OB_UserConfig>
 80029d8:	4603      	mov	r3, r0
 80029da:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d004      	beq.n	80029ec <HAL_FLASHEx_OBProgram+0xb4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80029e2:	4b12      	ldr	r3, [pc, #72]	@ (8002a2c <HAL_FLASHEx_OBProgram+0xf4>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	761a      	strb	r2, [r3, #24]
      return status;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	e01b      	b.n	8002a24 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d011      	beq.n	8002a1c <HAL_FLASHEx_OBProgram+0xe4>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7e1b      	ldrb	r3, [r3, #24]
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f000 fa34 	bl	8002e70 <FLASH_OB_ProgramData>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_FLASHEx_OBProgram+0xe4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8002a12:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <HAL_FLASHEx_OBProgram+0xf4>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	761a      	strb	r2, [r3, #24]
      return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	e003      	b.n	8002a24 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a1c:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <HAL_FLASHEx_OBProgram+0xf4>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	761a      	strb	r2, [r3, #24]

  return status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200000e0 	.word	0x200000e0

08002a30 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8002a3e:	f000 fa4b 	bl	8002ed8 <FLASH_OB_GetWRP>
 8002a42:	4602      	mov	r2, r0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8002a48:	f000 fa50 	bl	8002eec <FLASH_OB_GetRDP>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8002a54:	f000 fa66 	bl	8002f24 <FLASH_OB_GetUser>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	745a      	strb	r2, [r3, #17]
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_FLASHEx_OBGetUserData>:
  *            @arg @ref OB_DATA_ADDRESS_DATA0
  *            @arg @ref OB_DATA_ADDRESS_DATA1
  * @retval Value programmed in USER data
  */
uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t value = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  
  if (DATAAdress == OB_DATA_ADDRESS_DATA0)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa0 <HAL_FLASHEx_OBGetUserData+0x38>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d105      	bne.n	8002a88 <HAL_FLASHEx_OBGetUserData+0x20>
  {
    /* Get value programmed in OB USER Data0 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <HAL_FLASHEx_OBGetUserData+0x3c>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	0a9b      	lsrs	r3, r3, #10
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e004      	b.n	8002a92 <HAL_FLASHEx_OBGetUserData+0x2a>
  }
  else
  {
    /* Get value programmed in OB USER Data1 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
 8002a88:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_FLASHEx_OBGetUserData+0x3c>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	0c9b      	lsrs	r3, r3, #18
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	60fb      	str	r3, [r7, #12]
  }
  
  return value;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	1ffff804 	.word	0x1ffff804
 8002aa4:	40022000 	.word	0x40022000

08002aa8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ab0:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <FLASH_MassErase+0x30>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002ab6:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <FLASH_MassErase+0x34>)
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	4a08      	ldr	r2, [pc, #32]	@ (8002adc <FLASH_MassErase+0x34>)
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <FLASH_MassErase+0x34>)
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	4a05      	ldr	r2, [pc, #20]	@ (8002adc <FLASH_MassErase+0x34>)
 8002ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002acc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	200000e0 	.word	0x200000e0
 8002adc:	40022000 	.word	0x40022000

08002ae0 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8002aec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002af0:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8002af2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002af6:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8002af8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002afc:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8002afe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b02:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8002b04:	f000 f9e8 	bl	8002ed8 <FLASH_OB_GetWRP>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	4013      	ands	r3, r2
 8002b10:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0c1b      	lsrs	r3, r3, #16
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	0e1b      	lsrs	r3, r3, #24
 8002b32:	81fb      	strh	r3, [r7, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b34:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b38:	f7ff fd78 	bl	800262c <FLASH_WaitForLastOperation>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d162      	bne.n	8002c0c <FLASH_OB_EnableWRP+0x12c>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b46:	4b34      	ldr	r3, [pc, #208]	@ (8002c18 <FLASH_OB_EnableWRP+0x138>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8002b4c:	f7ff feb2 	bl	80028b4 <HAL_FLASHEx_OBErase>
 8002b50:	4603      	mov	r3, r0
 8002b52:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d158      	bne.n	8002c0c <FLASH_OB_EnableWRP+0x12c>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002b5a:	4b30      	ldr	r3, [pc, #192]	@ (8002c1c <FLASH_OB_EnableWRP+0x13c>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8002c1c <FLASH_OB_EnableWRP+0x13c>)
 8002b60:	f043 0310 	orr.w	r3, r3, #16
 8002b64:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8002b66:	8abb      	ldrh	r3, [r7, #20]
 8002b68:	2bff      	cmp	r3, #255	@ 0xff
 8002b6a:	d00d      	beq.n	8002b88 <FLASH_OB_EnableWRP+0xa8>
      {
        OB->WRP0 &= WRP0_Data;
 8002b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c20 <FLASH_OB_EnableWRP+0x140>)
 8002b6e:	891b      	ldrh	r3, [r3, #8]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	492b      	ldr	r1, [pc, #172]	@ (8002c20 <FLASH_OB_EnableWRP+0x140>)
 8002b74:	8abb      	ldrh	r3, [r7, #20]
 8002b76:	4013      	ands	r3, r2
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b7c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b80:	f7ff fd54 	bl	800262c <FLASH_WaitForLastOperation>
 8002b84:	4603      	mov	r3, r0
 8002b86:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d110      	bne.n	8002bb0 <FLASH_OB_EnableWRP+0xd0>
 8002b8e:	8a7b      	ldrh	r3, [r7, #18]
 8002b90:	2bff      	cmp	r3, #255	@ 0xff
 8002b92:	d00d      	beq.n	8002bb0 <FLASH_OB_EnableWRP+0xd0>
      {
        OB->WRP1 &= WRP1_Data;
 8002b94:	4b22      	ldr	r3, [pc, #136]	@ (8002c20 <FLASH_OB_EnableWRP+0x140>)
 8002b96:	895b      	ldrh	r3, [r3, #10]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	4921      	ldr	r1, [pc, #132]	@ (8002c20 <FLASH_OB_EnableWRP+0x140>)
 8002b9c:	8a7b      	ldrh	r3, [r7, #18]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ba4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ba8:	f7ff fd40 	bl	800262c <FLASH_WaitForLastOperation>
 8002bac:	4603      	mov	r3, r0
 8002bae:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d110      	bne.n	8002bd8 <FLASH_OB_EnableWRP+0xf8>
 8002bb6:	8a3b      	ldrh	r3, [r7, #16]
 8002bb8:	2bff      	cmp	r3, #255	@ 0xff
 8002bba:	d00d      	beq.n	8002bd8 <FLASH_OB_EnableWRP+0xf8>
      {
        OB->WRP2 &= WRP2_Data;
 8002bbc:	4b18      	ldr	r3, [pc, #96]	@ (8002c20 <FLASH_OB_EnableWRP+0x140>)
 8002bbe:	899b      	ldrh	r3, [r3, #12]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	4917      	ldr	r1, [pc, #92]	@ (8002c20 <FLASH_OB_EnableWRP+0x140>)
 8002bc4:	8a3b      	ldrh	r3, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bcc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002bd0:	f7ff fd2c 	bl	800262c <FLASH_WaitForLastOperation>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d110      	bne.n	8002c00 <FLASH_OB_EnableWRP+0x120>
 8002bde:	89fb      	ldrh	r3, [r7, #14]
 8002be0:	2bff      	cmp	r3, #255	@ 0xff
 8002be2:	d00d      	beq.n	8002c00 <FLASH_OB_EnableWRP+0x120>
      {
        OB->WRP3 &= WRP3_Data;
 8002be4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <FLASH_OB_EnableWRP+0x140>)
 8002be6:	89db      	ldrh	r3, [r3, #14]
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	490d      	ldr	r1, [pc, #52]	@ (8002c20 <FLASH_OB_EnableWRP+0x140>)
 8002bec:	89fb      	ldrh	r3, [r7, #14]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bf4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002bf8:	f7ff fd18 	bl	800262c <FLASH_WaitForLastOperation>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002c00:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <FLASH_OB_EnableWRP+0x13c>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	4a05      	ldr	r2, [pc, #20]	@ (8002c1c <FLASH_OB_EnableWRP+0x13c>)
 8002c06:	f023 0310 	bic.w	r3, r3, #16
 8002c0a:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200000e0 	.word	0x200000e0
 8002c1c:	40022000 	.word	0x40022000
 8002c20:	1ffff800 	.word	0x1ffff800

08002c24 <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8002c30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c34:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8002c36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c3a:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8002c3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c40:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8002c42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c46:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8002c48:	f000 f946 	bl	8002ed8 <FLASH_OB_GetWRP>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	0e1b      	lsrs	r3, r3, #24
 8002c74:	81fb      	strh	r3, [r7, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c76:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002c7a:	f7ff fcd7 	bl	800262c <FLASH_WaitForLastOperation>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d162      	bne.n	8002d4e <FLASH_OB_DisableWRP+0x12a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c88:	4b33      	ldr	r3, [pc, #204]	@ (8002d58 <FLASH_OB_DisableWRP+0x134>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8002c8e:	f7ff fe11 	bl	80028b4 <HAL_FLASHEx_OBErase>
 8002c92:	4603      	mov	r3, r0
 8002c94:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d158      	bne.n	8002d4e <FLASH_OB_DisableWRP+0x12a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d5c <FLASH_OB_DisableWRP+0x138>)
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8002d5c <FLASH_OB_DisableWRP+0x138>)
 8002ca2:	f043 0310 	orr.w	r3, r3, #16
 8002ca6:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8002ca8:	8abb      	ldrh	r3, [r7, #20]
 8002caa:	2bff      	cmp	r3, #255	@ 0xff
 8002cac:	d00d      	beq.n	8002cca <FLASH_OB_DisableWRP+0xa6>
      {
        OB->WRP0 |= WRP0_Data;
 8002cae:	4b2c      	ldr	r3, [pc, #176]	@ (8002d60 <FLASH_OB_DisableWRP+0x13c>)
 8002cb0:	891b      	ldrh	r3, [r3, #8]
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	492a      	ldr	r1, [pc, #168]	@ (8002d60 <FLASH_OB_DisableWRP+0x13c>)
 8002cb6:	8abb      	ldrh	r3, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cbe:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002cc2:	f7ff fcb3 	bl	800262c <FLASH_WaitForLastOperation>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d110      	bne.n	8002cf2 <FLASH_OB_DisableWRP+0xce>
 8002cd0:	8a7b      	ldrh	r3, [r7, #18]
 8002cd2:	2bff      	cmp	r3, #255	@ 0xff
 8002cd4:	d00d      	beq.n	8002cf2 <FLASH_OB_DisableWRP+0xce>
      {
        OB->WRP1 |= WRP1_Data;
 8002cd6:	4b22      	ldr	r3, [pc, #136]	@ (8002d60 <FLASH_OB_DisableWRP+0x13c>)
 8002cd8:	895b      	ldrh	r3, [r3, #10]
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	4920      	ldr	r1, [pc, #128]	@ (8002d60 <FLASH_OB_DisableWRP+0x13c>)
 8002cde:	8a7b      	ldrh	r3, [r7, #18]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ce6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002cea:	f7ff fc9f 	bl	800262c <FLASH_WaitForLastOperation>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d110      	bne.n	8002d1a <FLASH_OB_DisableWRP+0xf6>
 8002cf8:	8a3b      	ldrh	r3, [r7, #16]
 8002cfa:	2bff      	cmp	r3, #255	@ 0xff
 8002cfc:	d00d      	beq.n	8002d1a <FLASH_OB_DisableWRP+0xf6>
      {
        OB->WRP2 |= WRP2_Data;
 8002cfe:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <FLASH_OB_DisableWRP+0x13c>)
 8002d00:	899b      	ldrh	r3, [r3, #12]
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	4916      	ldr	r1, [pc, #88]	@ (8002d60 <FLASH_OB_DisableWRP+0x13c>)
 8002d06:	8a3b      	ldrh	r3, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d0e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d12:	f7ff fc8b 	bl	800262c <FLASH_WaitForLastOperation>
 8002d16:	4603      	mov	r3, r0
 8002d18:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d110      	bne.n	8002d42 <FLASH_OB_DisableWRP+0x11e>
 8002d20:	89fb      	ldrh	r3, [r7, #14]
 8002d22:	2bff      	cmp	r3, #255	@ 0xff
 8002d24:	d00d      	beq.n	8002d42 <FLASH_OB_DisableWRP+0x11e>
      {
        OB->WRP3 |= WRP3_Data;
 8002d26:	4b0e      	ldr	r3, [pc, #56]	@ (8002d60 <FLASH_OB_DisableWRP+0x13c>)
 8002d28:	89db      	ldrh	r3, [r3, #14]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	490c      	ldr	r1, [pc, #48]	@ (8002d60 <FLASH_OB_DisableWRP+0x13c>)
 8002d2e:	89fb      	ldrh	r3, [r7, #14]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d36:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d3a:	f7ff fc77 	bl	800262c <FLASH_WaitForLastOperation>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002d42:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <FLASH_OB_DisableWRP+0x138>)
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	4a05      	ldr	r2, [pc, #20]	@ (8002d5c <FLASH_OB_DisableWRP+0x138>)
 8002d48:	f023 0310 	bic.w	r3, r3, #16
 8002d4c:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	200000e0 	.word	0x200000e0
 8002d5c:	40022000 	.word	0x40022000
 8002d60:	1ffff800 	.word	0x1ffff800

08002d64 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d72:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d76:	f7ff fc59 	bl	800262c <FLASH_WaitForLastOperation>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d133      	bne.n	8002dec <FLASH_OB_RDP_LevelConfig+0x88>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d84:	4b1c      	ldr	r3, [pc, #112]	@ (8002df8 <FLASH_OB_RDP_LevelConfig+0x94>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dfc <FLASH_OB_RDP_LevelConfig+0x98>)
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dfc <FLASH_OB_RDP_LevelConfig+0x98>)
 8002d90:	f043 0320 	orr.w	r3, r3, #32
 8002d94:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002d96:	4b19      	ldr	r3, [pc, #100]	@ (8002dfc <FLASH_OB_RDP_LevelConfig+0x98>)
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	4a18      	ldr	r2, [pc, #96]	@ (8002dfc <FLASH_OB_RDP_LevelConfig+0x98>)
 8002d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002da0:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002da2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002da6:	f7ff fc41 	bl	800262c <FLASH_WaitForLastOperation>
 8002daa:	4603      	mov	r3, r0
 8002dac:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002dae:	4b13      	ldr	r3, [pc, #76]	@ (8002dfc <FLASH_OB_RDP_LevelConfig+0x98>)
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	4a12      	ldr	r2, [pc, #72]	@ (8002dfc <FLASH_OB_RDP_LevelConfig+0x98>)
 8002db4:	f023 0320 	bic.w	r3, r3, #32
 8002db8:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d115      	bne.n	8002dec <FLASH_OB_RDP_LevelConfig+0x88>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <FLASH_OB_RDP_LevelConfig+0x98>)
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002dfc <FLASH_OB_RDP_LevelConfig+0x98>)
 8002dc6:	f043 0310 	orr.w	r3, r3, #16
 8002dca:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <FLASH_OB_RDP_LevelConfig+0x9c>)
 8002dce:	79fa      	ldrb	r2, [r7, #7]
 8002dd0:	b292      	uxth	r2, r2
 8002dd2:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8002dd4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002dd8:	f7ff fc28 	bl	800262c <FLASH_WaitForLastOperation>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	73fb      	strb	r3, [r7, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002de0:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <FLASH_OB_RDP_LevelConfig+0x98>)
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	4a05      	ldr	r2, [pc, #20]	@ (8002dfc <FLASH_OB_RDP_LevelConfig+0x98>)
 8002de6:	f023 0310 	bic.w	r3, r3, #16
 8002dea:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200000e0 	.word	0x200000e0
 8002dfc:	40022000 	.word	0x40022000
 8002e00:	1ffff800 	.word	0x1ffff800

08002e04 <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e12:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002e16:	f7ff fc09 	bl	800262c <FLASH_WaitForLastOperation>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d11a      	bne.n	8002e5a <FLASH_OB_UserConfig+0x56>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e24:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <FLASH_OB_UserConfig+0x60>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e68 <FLASH_OB_UserConfig+0x64>)
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e68 <FLASH_OB_UserConfig+0x64>)
 8002e30:	f043 0310 	orr.w	r3, r3, #16
 8002e34:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0U);
#else
    OB->USER = (UserConfig | 0x88U);
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	f063 0377 	orn	r3, r3, #119	@ 0x77
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <FLASH_OB_UserConfig+0x68>)
 8002e40:	805a      	strh	r2, [r3, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e42:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002e46:	f7ff fbf1 	bl	800262c <FLASH_WaitForLastOperation>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002e4e:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <FLASH_OB_UserConfig+0x64>)
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	4a05      	ldr	r2, [pc, #20]	@ (8002e68 <FLASH_OB_UserConfig+0x64>)
 8002e54:	f023 0310 	bic.w	r3, r3, #16
 8002e58:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200000e0 	.word	0x200000e0
 8002e68:	40022000 	.word	0x40022000
 8002e6c:	1ffff800 	.word	0x1ffff800

08002e70 <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e80:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002e84:	f7ff fbd2 	bl	800262c <FLASH_WaitForLastOperation>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d118      	bne.n	8002ec4 <FLASH_OB_ProgramData+0x54>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <FLASH_OB_ProgramData+0x60>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8002e98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed4 <FLASH_OB_ProgramData+0x64>)
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed4 <FLASH_OB_ProgramData+0x64>)
 8002e9e:	f043 0310 	orr.w	r3, r3, #16
 8002ea2:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	b292      	uxth	r2, r2
 8002eaa:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002eac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002eb0:	f7ff fbbc 	bl	800262c <FLASH_WaitForLastOperation>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	73fb      	strb	r3, [r7, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002eb8:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <FLASH_OB_ProgramData+0x64>)
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	4a05      	ldr	r2, [pc, #20]	@ (8002ed4 <FLASH_OB_ProgramData+0x64>)
 8002ebe:	f023 0310 	bic.w	r3, r3, #16
 8002ec2:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200000e0 	.word	0x200000e0
 8002ed4:	40022000 	.word	0x40022000

08002ed8 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8002edc:	4b02      	ldr	r3, [pc, #8]	@ (8002ee8 <FLASH_OB_GetWRP+0x10>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	40022000 	.word	0x40022000

08002eec <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 8002ef2:	23a5      	movs	r3, #165	@ 0xa5
 8002ef4:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8002efa:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <FLASH_OB_GetRDP+0x34>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d102      	bne.n	8002f10 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	e001      	b.n	8002f14 <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8002f10:	23a5      	movs	r3, #165	@ 0xa5
 8002f12:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 8002f14:	687b      	ldr	r3, [r7, #4]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	40022000 	.word	0x40022000

08002f24 <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <FLASH_OB_GetUser+0x1c>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	089b      	lsrs	r3, r3, #2
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	b2db      	uxtb	r3, r3
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40022000 	.word	0x40022000

08002f44 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <FLASH_PageErase+0x38>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002f52:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <FLASH_PageErase+0x3c>)
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	4a0a      	ldr	r2, [pc, #40]	@ (8002f80 <FLASH_PageErase+0x3c>)
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002f5e:	4a08      	ldr	r2, [pc, #32]	@ (8002f80 <FLASH_PageErase+0x3c>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002f64:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <FLASH_PageErase+0x3c>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	4a05      	ldr	r2, [pc, #20]	@ (8002f80 <FLASH_PageErase+0x3c>)
 8002f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f6e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	200000e0 	.word	0x200000e0
 8002f80:	40022000 	.word	0x40022000

08002f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b08b      	sub	sp, #44	@ 0x2c
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f92:	2300      	movs	r3, #0
 8002f94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f96:	e169      	b.n	800326c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f98:	2201      	movs	r2, #1
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f040 8158 	bne.w	8003266 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4a9a      	ldr	r2, [pc, #616]	@ (8003224 <HAL_GPIO_Init+0x2a0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d05e      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fc0:	4a98      	ldr	r2, [pc, #608]	@ (8003224 <HAL_GPIO_Init+0x2a0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d875      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fc6:	4a98      	ldr	r2, [pc, #608]	@ (8003228 <HAL_GPIO_Init+0x2a4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d058      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fcc:	4a96      	ldr	r2, [pc, #600]	@ (8003228 <HAL_GPIO_Init+0x2a4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d86f      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fd2:	4a96      	ldr	r2, [pc, #600]	@ (800322c <HAL_GPIO_Init+0x2a8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d052      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fd8:	4a94      	ldr	r2, [pc, #592]	@ (800322c <HAL_GPIO_Init+0x2a8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d869      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fde:	4a94      	ldr	r2, [pc, #592]	@ (8003230 <HAL_GPIO_Init+0x2ac>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d04c      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fe4:	4a92      	ldr	r2, [pc, #584]	@ (8003230 <HAL_GPIO_Init+0x2ac>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d863      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fea:	4a92      	ldr	r2, [pc, #584]	@ (8003234 <HAL_GPIO_Init+0x2b0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d046      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002ff0:	4a90      	ldr	r2, [pc, #576]	@ (8003234 <HAL_GPIO_Init+0x2b0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d85d      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002ff6:	2b12      	cmp	r3, #18
 8002ff8:	d82a      	bhi.n	8003050 <HAL_GPIO_Init+0xcc>
 8002ffa:	2b12      	cmp	r3, #18
 8002ffc:	d859      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <HAL_GPIO_Init+0x80>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	0800307f 	.word	0x0800307f
 8003008:	08003059 	.word	0x08003059
 800300c:	0800306b 	.word	0x0800306b
 8003010:	080030ad 	.word	0x080030ad
 8003014:	080030b3 	.word	0x080030b3
 8003018:	080030b3 	.word	0x080030b3
 800301c:	080030b3 	.word	0x080030b3
 8003020:	080030b3 	.word	0x080030b3
 8003024:	080030b3 	.word	0x080030b3
 8003028:	080030b3 	.word	0x080030b3
 800302c:	080030b3 	.word	0x080030b3
 8003030:	080030b3 	.word	0x080030b3
 8003034:	080030b3 	.word	0x080030b3
 8003038:	080030b3 	.word	0x080030b3
 800303c:	080030b3 	.word	0x080030b3
 8003040:	080030b3 	.word	0x080030b3
 8003044:	080030b3 	.word	0x080030b3
 8003048:	08003061 	.word	0x08003061
 800304c:	08003075 	.word	0x08003075
 8003050:	4a79      	ldr	r2, [pc, #484]	@ (8003238 <HAL_GPIO_Init+0x2b4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003056:	e02c      	b.n	80030b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	623b      	str	r3, [r7, #32]
          break;
 800305e:	e029      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	3304      	adds	r3, #4
 8003066:	623b      	str	r3, [r7, #32]
          break;
 8003068:	e024      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	3308      	adds	r3, #8
 8003070:	623b      	str	r3, [r7, #32]
          break;
 8003072:	e01f      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	330c      	adds	r3, #12
 800307a:	623b      	str	r3, [r7, #32]
          break;
 800307c:	e01a      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003086:	2304      	movs	r3, #4
 8003088:	623b      	str	r3, [r7, #32]
          break;
 800308a:	e013      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d105      	bne.n	80030a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003094:	2308      	movs	r3, #8
 8003096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	611a      	str	r2, [r3, #16]
          break;
 800309e:	e009      	b.n	80030b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030a0:	2308      	movs	r3, #8
 80030a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	615a      	str	r2, [r3, #20]
          break;
 80030aa:	e003      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030ac:	2300      	movs	r3, #0
 80030ae:	623b      	str	r3, [r7, #32]
          break;
 80030b0:	e000      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          break;
 80030b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2bff      	cmp	r3, #255	@ 0xff
 80030b8:	d801      	bhi.n	80030be <HAL_GPIO_Init+0x13a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	e001      	b.n	80030c2 <HAL_GPIO_Init+0x13e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2bff      	cmp	r3, #255	@ 0xff
 80030c8:	d802      	bhi.n	80030d0 <HAL_GPIO_Init+0x14c>
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	e002      	b.n	80030d6 <HAL_GPIO_Init+0x152>
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	3b08      	subs	r3, #8
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	210f      	movs	r1, #15
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	401a      	ands	r2, r3
 80030e8:	6a39      	ldr	r1, [r7, #32]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	431a      	orrs	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80b1 	beq.w	8003266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003104:	4b4d      	ldr	r3, [pc, #308]	@ (800323c <HAL_GPIO_Init+0x2b8>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	4a4c      	ldr	r2, [pc, #304]	@ (800323c <HAL_GPIO_Init+0x2b8>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6193      	str	r3, [r2, #24]
 8003110:	4b4a      	ldr	r3, [pc, #296]	@ (800323c <HAL_GPIO_Init+0x2b8>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800311c:	4a48      	ldr	r2, [pc, #288]	@ (8003240 <HAL_GPIO_Init+0x2bc>)
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	220f      	movs	r2, #15
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a40      	ldr	r2, [pc, #256]	@ (8003244 <HAL_GPIO_Init+0x2c0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d013      	beq.n	8003170 <HAL_GPIO_Init+0x1ec>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3f      	ldr	r2, [pc, #252]	@ (8003248 <HAL_GPIO_Init+0x2c4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00d      	beq.n	800316c <HAL_GPIO_Init+0x1e8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3e      	ldr	r2, [pc, #248]	@ (800324c <HAL_GPIO_Init+0x2c8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <HAL_GPIO_Init+0x1e4>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3d      	ldr	r2, [pc, #244]	@ (8003250 <HAL_GPIO_Init+0x2cc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_GPIO_Init+0x1e0>
 8003160:	2303      	movs	r3, #3
 8003162:	e006      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 8003164:	2304      	movs	r3, #4
 8003166:	e004      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 8003168:	2302      	movs	r3, #2
 800316a:	e002      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 8003170:	2300      	movs	r3, #0
 8003172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003174:	f002 0203 	and.w	r2, r2, #3
 8003178:	0092      	lsls	r2, r2, #2
 800317a:	4093      	lsls	r3, r2
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003182:	492f      	ldr	r1, [pc, #188]	@ (8003240 <HAL_GPIO_Init+0x2bc>)
 8003184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d006      	beq.n	80031aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800319c:	4b2d      	ldr	r3, [pc, #180]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	492c      	ldr	r1, [pc, #176]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
 80031a8:	e006      	b.n	80031b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	4928      	ldr	r1, [pc, #160]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d006      	beq.n	80031d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031c4:	4b23      	ldr	r3, [pc, #140]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4922      	ldr	r1, [pc, #136]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031d2:	4b20      	ldr	r3, [pc, #128]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	43db      	mvns	r3, r3
 80031da:	491e      	ldr	r1, [pc, #120]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 80031dc:	4013      	ands	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d006      	beq.n	80031fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031ec:	4b19      	ldr	r3, [pc, #100]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	4918      	ldr	r1, [pc, #96]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]
 80031f8:	e006      	b.n	8003208 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031fa:	4b16      	ldr	r3, [pc, #88]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	43db      	mvns	r3, r3
 8003202:	4914      	ldr	r1, [pc, #80]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 8003204:	4013      	ands	r3, r2
 8003206:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d021      	beq.n	8003258 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003214:	4b0f      	ldr	r3, [pc, #60]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	490e      	ldr	r1, [pc, #56]	@ (8003254 <HAL_GPIO_Init+0x2d0>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	60cb      	str	r3, [r1, #12]
 8003220:	e021      	b.n	8003266 <HAL_GPIO_Init+0x2e2>
 8003222:	bf00      	nop
 8003224:	10320000 	.word	0x10320000
 8003228:	10310000 	.word	0x10310000
 800322c:	10220000 	.word	0x10220000
 8003230:	10210000 	.word	0x10210000
 8003234:	10120000 	.word	0x10120000
 8003238:	10110000 	.word	0x10110000
 800323c:	40021000 	.word	0x40021000
 8003240:	40010000 	.word	0x40010000
 8003244:	40010800 	.word	0x40010800
 8003248:	40010c00 	.word	0x40010c00
 800324c:	40011000 	.word	0x40011000
 8003250:	40011400 	.word	0x40011400
 8003254:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003258:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <HAL_GPIO_Init+0x304>)
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	43db      	mvns	r3, r3
 8003260:	4909      	ldr	r1, [pc, #36]	@ (8003288 <HAL_GPIO_Init+0x304>)
 8003262:	4013      	ands	r3, r2
 8003264:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	3301      	adds	r3, #1
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	fa22 f303 	lsr.w	r3, r2, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	f47f ae8e 	bne.w	8002f98 <HAL_GPIO_Init+0x14>
  }
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	372c      	adds	r7, #44	@ 0x2c
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	40010400 	.word	0x40010400

0800328c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	@ 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800329a:	e09a      	b.n	80033d2 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800329c:	2201      	movs	r2, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 808d 	beq.w	80033cc <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80032b2:	4a4e      	ldr	r2, [pc, #312]	@ (80033ec <HAL_GPIO_DeInit+0x160>)
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	3302      	adds	r3, #2
 80032ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032be:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	220f      	movs	r2, #15
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4013      	ands	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a46      	ldr	r2, [pc, #280]	@ (80033f0 <HAL_GPIO_DeInit+0x164>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d013      	beq.n	8003304 <HAL_GPIO_DeInit+0x78>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a45      	ldr	r2, [pc, #276]	@ (80033f4 <HAL_GPIO_DeInit+0x168>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00d      	beq.n	8003300 <HAL_GPIO_DeInit+0x74>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a44      	ldr	r2, [pc, #272]	@ (80033f8 <HAL_GPIO_DeInit+0x16c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d007      	beq.n	80032fc <HAL_GPIO_DeInit+0x70>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a43      	ldr	r2, [pc, #268]	@ (80033fc <HAL_GPIO_DeInit+0x170>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d101      	bne.n	80032f8 <HAL_GPIO_DeInit+0x6c>
 80032f4:	2303      	movs	r3, #3
 80032f6:	e006      	b.n	8003306 <HAL_GPIO_DeInit+0x7a>
 80032f8:	2304      	movs	r3, #4
 80032fa:	e004      	b.n	8003306 <HAL_GPIO_DeInit+0x7a>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e002      	b.n	8003306 <HAL_GPIO_DeInit+0x7a>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_GPIO_DeInit+0x7a>
 8003304:	2300      	movs	r3, #0
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	f002 0203 	and.w	r2, r2, #3
 800330c:	0092      	lsls	r2, r2, #2
 800330e:	4093      	lsls	r3, r2
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	429a      	cmp	r2, r3
 8003314:	d132      	bne.n	800337c <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	220f      	movs	r2, #15
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003326:	4a31      	ldr	r2, [pc, #196]	@ (80033ec <HAL_GPIO_DeInit+0x160>)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	3302      	adds	r3, #2
 800332e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	43da      	mvns	r2, r3
 8003336:	482d      	ldr	r0, [pc, #180]	@ (80033ec <HAL_GPIO_DeInit+0x160>)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	400a      	ands	r2, r1
 800333e:	3302      	adds	r3, #2
 8003340:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003344:	4b2e      	ldr	r3, [pc, #184]	@ (8003400 <HAL_GPIO_DeInit+0x174>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	43db      	mvns	r3, r3
 800334c:	492c      	ldr	r1, [pc, #176]	@ (8003400 <HAL_GPIO_DeInit+0x174>)
 800334e:	4013      	ands	r3, r2
 8003350:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003352:	4b2b      	ldr	r3, [pc, #172]	@ (8003400 <HAL_GPIO_DeInit+0x174>)
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	43db      	mvns	r3, r3
 800335a:	4929      	ldr	r1, [pc, #164]	@ (8003400 <HAL_GPIO_DeInit+0x174>)
 800335c:	4013      	ands	r3, r2
 800335e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003360:	4b27      	ldr	r3, [pc, #156]	@ (8003400 <HAL_GPIO_DeInit+0x174>)
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	43db      	mvns	r3, r3
 8003368:	4925      	ldr	r1, [pc, #148]	@ (8003400 <HAL_GPIO_DeInit+0x174>)
 800336a:	4013      	ands	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800336e:	4b24      	ldr	r3, [pc, #144]	@ (8003400 <HAL_GPIO_DeInit+0x174>)
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	43db      	mvns	r3, r3
 8003376:	4922      	ldr	r1, [pc, #136]	@ (8003400 <HAL_GPIO_DeInit+0x174>)
 8003378:	4013      	ands	r3, r2
 800337a:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2bff      	cmp	r3, #255	@ 0xff
 8003380:	d801      	bhi.n	8003386 <HAL_GPIO_DeInit+0xfa>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	e001      	b.n	800338a <HAL_GPIO_DeInit+0xfe>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3304      	adds	r3, #4
 800338a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2bff      	cmp	r3, #255	@ 0xff
 8003390:	d802      	bhi.n	8003398 <HAL_GPIO_DeInit+0x10c>
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	e002      	b.n	800339e <HAL_GPIO_DeInit+0x112>
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	3b08      	subs	r3, #8
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	210f      	movs	r1, #15
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	401a      	ands	r2, r3
 80033b0:	2104      	movs	r1, #4
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	431a      	orrs	r2, r3
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	401a      	ands	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	60da      	str	r2, [r3, #12]
    }

    position++;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	3301      	adds	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f47f af5e 	bne.w	800329c <HAL_GPIO_DeInit+0x10>
  }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	3724      	adds	r7, #36	@ 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40010800 	.word	0x40010800
 80033f4:	40010c00 	.word	0x40010c00
 80033f8:	40011000 	.word	0x40011000
 80033fc:	40011400 	.word	0x40011400
 8003400:	40010400 	.word	0x40010400

08003404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	887b      	ldrh	r3, [r7, #2]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
 8003420:	e001      	b.n	8003426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003426:	7bfb      	ldrb	r3, [r7, #15]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	807b      	strh	r3, [r7, #2]
 800343e:	4613      	mov	r3, r2
 8003440:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003442:	787b      	ldrb	r3, [r7, #1]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003448:	887a      	ldrh	r2, [r7, #2]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800344e:	e003      	b.n	8003458 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003450:	887b      	ldrh	r3, [r7, #2]
 8003452:	041a      	lsls	r2, r3, #16
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	611a      	str	r2, [r3, #16]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr

08003462 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003462:	b480      	push	{r7}
 8003464:	b085      	sub	sp, #20
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	460b      	mov	r3, r1
 800346c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003474:	887a      	ldrh	r2, [r7, #2]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4013      	ands	r3, r2
 800347a:	041a      	lsls	r2, r3, #16
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	43d9      	mvns	r1, r3
 8003480:	887b      	ldrh	r3, [r7, #2]
 8003482:	400b      	ands	r3, r1
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	611a      	str	r2, [r3, #16]
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 80034a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034a4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 80034a6:	887a      	ldrh	r2, [r7, #2]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	619a      	str	r2, [r3, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 80034b4:	887a      	ldrh	r2, [r7, #2]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	619a      	str	r2, [r3, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	619a      	str	r2, [r3, #24]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	60fb      	str	r3, [r7, #12]

  /* read again in order to confirm lock is active */
  if ((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e000      	b.n	80034d8 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
	...

080034e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034ee:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d006      	beq.n	8003508 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034fa:	4a05      	ldr	r2, [pc, #20]	@ (8003510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f806 	bl	8003514 <HAL_GPIO_EXTI_Callback>
  }
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40010400 	.word	0x40010400

08003514 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_GPIOEx_ConfigEventout>:
  * @param  GPIO_PinSource Select the pin used to output the Cortex EVENTOUT signal.
  *   This parameter can be a value of @ref GPIOEx_EVENTOUT_PIN.
  * @retval None
  */
void HAL_GPIOEx_ConfigEventout(uint32_t GPIO_PortSource, uint32_t GPIO_PinSource)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  /* Verify the parameters */
  assert_param(IS_AFIO_EVENTOUT_PORT(GPIO_PortSource));
  assert_param(IS_AFIO_EVENTOUT_PIN(GPIO_PinSource));

  /* Apply the new configuration */
  MODIFY_REG(AFIO->EVCR, (AFIO_EVCR_PORT) | (AFIO_EVCR_PIN), (GPIO_PortSource) | (GPIO_PinSource));
 8003532:	4b07      	ldr	r3, [pc, #28]	@ (8003550 <HAL_GPIOEx_ConfigEventout+0x28>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	430b      	orrs	r3, r1
 8003540:	4903      	ldr	r1, [pc, #12]	@ (8003550 <HAL_GPIOEx_ConfigEventout+0x28>)
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr
 8003550:	40010000 	.word	0x40010000

08003554 <HAL_GPIOEx_EnableEventout>:
/**
  * @brief  Enables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_EnableEventout(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 8003558:	4b04      	ldr	r3, [pc, #16]	@ (800356c <HAL_GPIOEx_EnableEventout+0x18>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a03      	ldr	r2, [pc, #12]	@ (800356c <HAL_GPIOEx_EnableEventout+0x18>)
 800355e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003562:	6013      	str	r3, [r2, #0]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	40010000 	.word	0x40010000

08003570 <HAL_GPIOEx_DisableEventout>:
/**
  * @brief  Disables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_DisableEventout(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 8003574:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <HAL_GPIOEx_DisableEventout+0x18>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a03      	ldr	r2, [pc, #12]	@ (8003588 <HAL_GPIOEx_DisableEventout+0x18>)
 800357a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800357e:	6013      	str	r3, [r2, #0]
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	40010000 	.word	0x40010000

0800358c <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8003590:	bf20      	wfe
  __asm volatile( "nop" );
 8003592:	bf00      	nop
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <HAL_PWR_DeInit>:
/**
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.  
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 80035a0:	4b07      	ldr	r3, [pc, #28]	@ (80035c0 <HAL_PWR_DeInit+0x24>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	4a06      	ldr	r2, [pc, #24]	@ (80035c0 <HAL_PWR_DeInit+0x24>)
 80035a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035aa:	6113      	str	r3, [r2, #16]
  __HAL_RCC_PWR_RELEASE_RESET();
 80035ac:	4b04      	ldr	r3, [pc, #16]	@ (80035c0 <HAL_PWR_DeInit+0x24>)
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	4a03      	ldr	r2, [pc, #12]	@ (80035c0 <HAL_PWR_DeInit+0x24>)
 80035b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	6113      	str	r3, [r2, #16]
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	40021000 	.word	0x40021000

080035c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80035c8:	4b03      	ldr	r3, [pc, #12]	@ (80035d8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
}
 80035ce:	bf00      	nop
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	420e0020 	.word	0x420e0020

080035dc <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80035e0:	4b03      	ldr	r3, [pc, #12]	@ (80035f0 <HAL_PWR_DisableBkUpAccess+0x14>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	420e0020 	.word	0x420e0020

080035f4 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 80035fc:	4b2a      	ldr	r3, [pc, #168]	@ (80036a8 <HAL_PWR_ConfigPVD+0xb4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4927      	ldr	r1, [pc, #156]	@ (80036a8 <HAL_PWR_ConfigPVD+0xb4>)
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800360e:	4b27      	ldr	r3, [pc, #156]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4a26      	ldr	r2, [pc, #152]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 8003614:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003618:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800361a:	4b24      	ldr	r3, [pc, #144]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a23      	ldr	r2, [pc, #140]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 8003620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003624:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8003626:	4b21      	ldr	r3, [pc, #132]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	4a20      	ldr	r2, [pc, #128]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 800362c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003630:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003632:	4b1e      	ldr	r3, [pc, #120]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	4a1d      	ldr	r2, [pc, #116]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 8003638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800363c:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800364a:	4b18      	ldr	r3, [pc, #96]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a17      	ldr	r2, [pc, #92]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 8003650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003654:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003662:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4a11      	ldr	r2, [pc, #68]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800366c:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800367a:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	4a0b      	ldr	r2, [pc, #44]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003684:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003692:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	4a05      	ldr	r2, [pc, #20]	@ (80036ac <HAL_PWR_ConfigPVD+0xb8>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800369c:	60d3      	str	r3, [r2, #12]
  }
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr
 80036a8:	40007000 	.word	0x40007000
 80036ac:	40010400 	.word	0x40010400

080036b0 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 80036b4:	4b03      	ldr	r3, [pc, #12]	@ (80036c4 <HAL_PWR_EnablePVD+0x14>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	420e0010 	.word	0x420e0010

080036c8 <HAL_PWR_DisablePVD>:
/**
  * @brief  Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 80036cc:	4b03      	ldr	r3, [pc, #12]	@ (80036dc <HAL_PWR_DisablePVD+0x14>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
}
 80036d2:	bf00      	nop
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	420e0010 	.word	0x420e0010

080036e0 <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036f4:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <HAL_PWR_EnableWakeUpPin+0x34>)
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	461a      	mov	r2, r3
 8003706:	2301      	movs	r3, #1
 8003708:	6013      	str	r3, [r2, #0]
}
 800370a:	bf00      	nop
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	10838020 	.word	0x10838020

08003718 <HAL_PWR_DisableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	60bb      	str	r3, [r7, #8]
  return result;
 800372c:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	4b05      	ldr	r3, [pc, #20]	@ (800374c <HAL_PWR_DisableWakeUpPin+0x34>)
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	461a      	mov	r2, r3
 800373e:	2300      	movs	r3, #0
 8003740:	6013      	str	r3, [r2, #0]
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	10838020 	.word	0x10838020

08003750 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800375c:	4b09      	ldr	r3, [pc, #36]	@ (8003784 <HAL_PWR_EnterSLEEPMode+0x34>)
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	4a08      	ldr	r2, [pc, #32]	@ (8003784 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003762:	f023 0304 	bic.w	r3, r3, #4
 8003766:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800376e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003770:	e002      	b.n	8003778 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8003772:	bf40      	sev
    __WFE();
 8003774:	bf20      	wfe
    __WFE();
 8003776:	bf20      	wfe
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8003794:	4b13      	ldr	r3, [pc, #76]	@ (80037e4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a12      	ldr	r2, [pc, #72]	@ (80037e4 <HAL_PWR_EnterSTOPMode+0x5c>)
 800379a:	f023 0302 	bic.w	r3, r3, #2
 800379e:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 80037a0:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <HAL_PWR_EnterSTOPMode+0x5c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 0201 	bic.w	r2, r3, #1
 80037a8:	490e      	ldr	r1, [pc, #56]	@ (80037e4 <HAL_PWR_EnterSTOPMode+0x5c>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80037b0:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <HAL_PWR_EnterSTOPMode+0x60>)
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	4a0c      	ldr	r2, [pc, #48]	@ (80037e8 <HAL_PWR_EnterSTOPMode+0x60>)
 80037b6:	f043 0304 	orr.w	r3, r3, #4
 80037ba:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80037c2:	bf30      	wfi
 80037c4:	e004      	b.n	80037d0 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80037c6:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 80037c8:	f7ff fee0 	bl	800358c <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 80037cc:	f7ff fede 	bl	800358c <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80037d0:	4b05      	ldr	r3, [pc, #20]	@ (80037e8 <HAL_PWR_EnterSTOPMode+0x60>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	4a04      	ldr	r2, [pc, #16]	@ (80037e8 <HAL_PWR_EnterSTOPMode+0x60>)
 80037d6:	f023 0304 	bic.w	r3, r3, #4
 80037da:	6113      	str	r3, [r2, #16]
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40007000 	.word	0x40007000
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a07      	ldr	r2, [pc, #28]	@ (8003814 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80037f6:	f043 0302 	orr.w	r3, r3, #2
 80037fa:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80037fc:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	4a05      	ldr	r2, [pc, #20]	@ (8003818 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003808:	bf30      	wfi
}
 800380a:	bf00      	nop
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40007000 	.word	0x40007000
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003820:	4b04      	ldr	r3, [pc, #16]	@ (8003834 <HAL_PWR_EnableSleepOnExit+0x18>)
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	4a03      	ldr	r2, [pc, #12]	@ (8003834 <HAL_PWR_EnableSleepOnExit+0x18>)
 8003826:	f043 0302 	orr.w	r3, r3, #2
 800382a:	6113      	str	r3, [r2, #16]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800383c:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <HAL_PWR_DisableSleepOnExit+0x18>)
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	4a03      	ldr	r2, [pc, #12]	@ (8003850 <HAL_PWR_DisableSleepOnExit+0x18>)
 8003842:	f023 0302 	bic.w	r3, r3, #2
 8003846:	6113      	str	r3, [r2, #16]
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8003858:	4b04      	ldr	r3, [pc, #16]	@ (800386c <HAL_PWR_EnableSEVOnPend+0x18>)
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	4a03      	ldr	r2, [pc, #12]	@ (800386c <HAL_PWR_EnableSEVOnPend+0x18>)
 800385e:	f043 0310 	orr.w	r3, r3, #16
 8003862:	6113      	str	r3, [r2, #16]
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8003874:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <HAL_PWR_DisableSEVOnPend+0x18>)
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	4a03      	ldr	r2, [pc, #12]	@ (8003888 <HAL_PWR_DisableSEVOnPend+0x18>)
 800387a:	f023 0310 	bic.w	r3, r3, #16
 800387e:	6113      	str	r3, [r2, #16]
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003890:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <HAL_PWR_PVD_IRQHandler+0x20>)
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800389c:	f000 f808 	bl	80038b0 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80038a0:	4b02      	ldr	r3, [pc, #8]	@ (80038ac <HAL_PWR_PVD_IRQHandler+0x20>)
 80038a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80038a6:	615a      	str	r2, [r3, #20]
  }
}
 80038a8:	bf00      	nop
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40010400 	.word	0x40010400

080038b0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80038c2:	f7fd f911 	bl	8000ae8 <HAL_GetTick>
 80038c6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80038c8:	4b45      	ldr	r3, [pc, #276]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a44      	ldr	r2, [pc, #272]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d6:	f7fd f907 	bl	8000ae8 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e077      	b.n	80039d8 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80038e8:	4b3d      	ldr	r3, [pc, #244]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80038f4:	4b3a      	ldr	r3, [pc, #232]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80038fc:	4a38      	ldr	r2, [pc, #224]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 80038fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003902:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003904:	f7fd f8f0 	bl	8000ae8 <HAL_GetTick>
 8003908:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800390a:	4b35      	ldr	r3, [pc, #212]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 800390c:	2200      	movs	r2, #0
 800390e:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003910:	e00a      	b.n	8003928 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003912:	f7fd f8e9 	bl	8000ae8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e057      	b.n	80039d8 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003928:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ee      	bne.n	8003912 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003934:	4b2b      	ldr	r3, [pc, #172]	@ (80039e4 <HAL_RCC_DeInit+0x128>)
 8003936:	4a2c      	ldr	r2, [pc, #176]	@ (80039e8 <HAL_RCC_DeInit+0x12c>)
 8003938:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800393a:	4b2c      	ldr	r3, [pc, #176]	@ (80039ec <HAL_RCC_DeInit+0x130>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd f890 	bl	8000a64 <HAL_InitTick>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e044      	b.n	80039d8 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800394e:	f7fd f8cb 	bl	8000ae8 <HAL_GetTick>
 8003952:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003954:	4b22      	ldr	r3, [pc, #136]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a21      	ldr	r2, [pc, #132]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 800395a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800395e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003962:	f7fd f8c1 	bl	8000ae8 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e031      	b.n	80039d8 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003974:	4b1a      	ldr	r3, [pc, #104]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8003980:	4b17      	ldr	r3, [pc, #92]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 8003982:	2200      	movs	r2, #0
 8003984:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003986:	f7fd f8af 	bl	8000ae8 <HAL_GetTick>
 800398a:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 800398c:	4b14      	ldr	r3, [pc, #80]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a13      	ldr	r2, [pc, #76]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 8003992:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8003996:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399a:	f7fd f8a5 	bl	8000ae8 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b64      	cmp	r3, #100	@ 0x64
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e015      	b.n	80039d8 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80039ac:	4b0c      	ldr	r3, [pc, #48]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80039b8:	4b09      	ldr	r3, [pc, #36]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a08      	ldr	r2, [pc, #32]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 80039be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039c2:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80039c4:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	4a05      	ldr	r2, [pc, #20]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 80039ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ce:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 80039d0:	4b03      	ldr	r3, [pc, #12]	@ (80039e0 <HAL_RCC_DeInit+0x124>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	20000008 	.word	0x20000008
 80039e8:	007a1200 	.word	0x007a1200
 80039ec:	2000000c 	.word	0x2000000c

080039f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e272      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8087 	beq.w	8003b1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a10:	4b92      	ldr	r3, [pc, #584]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d00c      	beq.n	8003a36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d112      	bne.n	8003a4e <HAL_RCC_OscConfig+0x5e>
 8003a28:	4b8c      	ldr	r3, [pc, #560]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a34:	d10b      	bne.n	8003a4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a36:	4b89      	ldr	r3, [pc, #548]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d06c      	beq.n	8003b1c <HAL_RCC_OscConfig+0x12c>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d168      	bne.n	8003b1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e24c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a56:	d106      	bne.n	8003a66 <HAL_RCC_OscConfig+0x76>
 8003a58:	4b80      	ldr	r3, [pc, #512]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a7f      	ldr	r2, [pc, #508]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	e02e      	b.n	8003ac4 <HAL_RCC_OscConfig+0xd4>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x98>
 8003a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a7a      	ldr	r2, [pc, #488]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4b78      	ldr	r3, [pc, #480]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a77      	ldr	r2, [pc, #476]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003a80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	e01d      	b.n	8003ac4 <HAL_RCC_OscConfig+0xd4>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a90:	d10c      	bne.n	8003aac <HAL_RCC_OscConfig+0xbc>
 8003a92:	4b72      	ldr	r3, [pc, #456]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a71      	ldr	r2, [pc, #452]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a6e      	ldr	r2, [pc, #440]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	e00b      	b.n	8003ac4 <HAL_RCC_OscConfig+0xd4>
 8003aac:	4b6b      	ldr	r3, [pc, #428]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a6a      	ldr	r2, [pc, #424]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	4b68      	ldr	r3, [pc, #416]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a67      	ldr	r2, [pc, #412]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ac2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d013      	beq.n	8003af4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fd f80c 	bl	8000ae8 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad4:	f7fd f808 	bl	8000ae8 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	@ 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e200      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0xe4>
 8003af2:	e014      	b.n	8003b1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fc fff8 	bl	8000ae8 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003afc:	f7fc fff4 	bl	8000ae8 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	@ 0x64
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e1ec      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0e:	4b53      	ldr	r3, [pc, #332]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x10c>
 8003b1a:	e000      	b.n	8003b1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d063      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00b      	beq.n	8003b4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b36:	4b49      	ldr	r3, [pc, #292]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d11c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x18c>
 8003b42:	4b46      	ldr	r3, [pc, #280]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d116      	bne.n	8003b7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4e:	4b43      	ldr	r3, [pc, #268]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <HAL_RCC_OscConfig+0x176>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d001      	beq.n	8003b66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e1c0      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b66:	4b3d      	ldr	r3, [pc, #244]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4939      	ldr	r1, [pc, #228]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7a:	e03a      	b.n	8003bf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d020      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b84:	4b36      	ldr	r3, [pc, #216]	@ (8003c60 <HAL_RCC_OscConfig+0x270>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8a:	f7fc ffad 	bl	8000ae8 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b92:	f7fc ffa9 	bl	8000ae8 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e1a1      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4927      	ldr	r1, [pc, #156]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	600b      	str	r3, [r1, #0]
 8003bc4:	e015      	b.n	8003bf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc6:	4b26      	ldr	r3, [pc, #152]	@ (8003c60 <HAL_RCC_OscConfig+0x270>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fc ff8c 	bl	8000ae8 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd4:	f7fc ff88 	bl	8000ae8 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e180      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d03a      	beq.n	8003c74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d019      	beq.n	8003c3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c06:	4b17      	ldr	r3, [pc, #92]	@ (8003c64 <HAL_RCC_OscConfig+0x274>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0c:	f7fc ff6c 	bl	8000ae8 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c14:	f7fc ff68 	bl	8000ae8 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e160      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <HAL_RCC_OscConfig+0x26c>)
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c32:	2001      	movs	r0, #1
 8003c34:	f000 fbee 	bl	8004414 <RCC_Delay>
 8003c38:	e01c      	b.n	8003c74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c64 <HAL_RCC_OscConfig+0x274>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c40:	f7fc ff52 	bl	8000ae8 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c46:	e00f      	b.n	8003c68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c48:	f7fc ff4e 	bl	8000ae8 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d908      	bls.n	8003c68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e146      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	42420000 	.word	0x42420000
 8003c64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c68:	4b92      	ldr	r3, [pc, #584]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e9      	bne.n	8003c48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80a6 	beq.w	8003dce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c82:	2300      	movs	r3, #0
 8003c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c86:	4b8b      	ldr	r3, [pc, #556]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10d      	bne.n	8003cae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c92:	4b88      	ldr	r3, [pc, #544]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	4a87      	ldr	r2, [pc, #540]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c9c:	61d3      	str	r3, [r2, #28]
 8003c9e:	4b85      	ldr	r3, [pc, #532]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003caa:	2301      	movs	r3, #1
 8003cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cae:	4b82      	ldr	r3, [pc, #520]	@ (8003eb8 <HAL_RCC_OscConfig+0x4c8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d118      	bne.n	8003cec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cba:	4b7f      	ldr	r3, [pc, #508]	@ (8003eb8 <HAL_RCC_OscConfig+0x4c8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a7e      	ldr	r2, [pc, #504]	@ (8003eb8 <HAL_RCC_OscConfig+0x4c8>)
 8003cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc6:	f7fc ff0f 	bl	8000ae8 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cce:	f7fc ff0b 	bl	8000ae8 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b64      	cmp	r3, #100	@ 0x64
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e103      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce0:	4b75      	ldr	r3, [pc, #468]	@ (8003eb8 <HAL_RCC_OscConfig+0x4c8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0f0      	beq.n	8003cce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x312>
 8003cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6213      	str	r3, [r2, #32]
 8003d00:	e02d      	b.n	8003d5e <HAL_RCC_OscConfig+0x36e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x334>
 8003d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	4a69      	ldr	r2, [pc, #420]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	6213      	str	r3, [r2, #32]
 8003d16:	4b67      	ldr	r3, [pc, #412]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	4a66      	ldr	r2, [pc, #408]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	6213      	str	r3, [r2, #32]
 8003d22:	e01c      	b.n	8003d5e <HAL_RCC_OscConfig+0x36e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	d10c      	bne.n	8003d46 <HAL_RCC_OscConfig+0x356>
 8003d2c:	4b61      	ldr	r3, [pc, #388]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	4a60      	ldr	r2, [pc, #384]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003d32:	f043 0304 	orr.w	r3, r3, #4
 8003d36:	6213      	str	r3, [r2, #32]
 8003d38:	4b5e      	ldr	r3, [pc, #376]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	4a5d      	ldr	r2, [pc, #372]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6213      	str	r3, [r2, #32]
 8003d44:	e00b      	b.n	8003d5e <HAL_RCC_OscConfig+0x36e>
 8003d46:	4b5b      	ldr	r3, [pc, #364]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	4a5a      	ldr	r2, [pc, #360]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	6213      	str	r3, [r2, #32]
 8003d52:	4b58      	ldr	r3, [pc, #352]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	4a57      	ldr	r2, [pc, #348]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d015      	beq.n	8003d92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d66:	f7fc febf 	bl	8000ae8 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6c:	e00a      	b.n	8003d84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6e:	f7fc febb 	bl	8000ae8 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e0b1      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d84:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ee      	beq.n	8003d6e <HAL_RCC_OscConfig+0x37e>
 8003d90:	e014      	b.n	8003dbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d92:	f7fc fea9 	bl	8000ae8 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d98:	e00a      	b.n	8003db0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f7fc fea5 	bl	8000ae8 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e09b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db0:	4b40      	ldr	r3, [pc, #256]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1ee      	bne.n	8003d9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8087 	beq.w	8003ee6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dd8:	4b36      	ldr	r3, [pc, #216]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d061      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d146      	bne.n	8003e7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dec:	4b33      	ldr	r3, [pc, #204]	@ (8003ebc <HAL_RCC_OscConfig+0x4cc>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fc fe79 	bl	8000ae8 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfa:	f7fc fe75 	bl	8000ae8 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e06d      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0c:	4b29      	ldr	r3, [pc, #164]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f0      	bne.n	8003dfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e20:	d108      	bne.n	8003e34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e22:	4b24      	ldr	r3, [pc, #144]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	4921      	ldr	r1, [pc, #132]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e34:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a19      	ldr	r1, [r3, #32]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	430b      	orrs	r3, r1
 8003e46:	491b      	ldr	r1, [pc, #108]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ebc <HAL_RCC_OscConfig+0x4cc>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fc fe49 	bl	8000ae8 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fc fe45 	bl	8000ae8 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e03d      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e6c:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x46a>
 8003e78:	e035      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b10      	ldr	r3, [pc, #64]	@ (8003ebc <HAL_RCC_OscConfig+0x4cc>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fc fe32 	bl	8000ae8 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fc fe2e 	bl	8000ae8 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e026      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9a:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <HAL_RCC_OscConfig+0x4c4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x498>
 8003ea6:	e01e      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e019      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <HAL_RCC_OscConfig+0x500>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0d0      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f08:	4b6a      	ldr	r3, [pc, #424]	@ (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d910      	bls.n	8003f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b67      	ldr	r3, [pc, #412]	@ (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 0207 	bic.w	r2, r3, #7
 8003f1e:	4965      	ldr	r1, [pc, #404]	@ (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b63      	ldr	r3, [pc, #396]	@ (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0b8      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d020      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f50:	4b59      	ldr	r3, [pc, #356]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a58      	ldr	r2, [pc, #352]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f68:	4b53      	ldr	r3, [pc, #332]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	4a52      	ldr	r2, [pc, #328]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f74:	4b50      	ldr	r3, [pc, #320]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	494d      	ldr	r1, [pc, #308]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d040      	beq.n	8004014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b47      	ldr	r3, [pc, #284]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d115      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e07f      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb2:	4b41      	ldr	r3, [pc, #260]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e073      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e06b      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fd2:	4b39      	ldr	r3, [pc, #228]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f023 0203 	bic.w	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4936      	ldr	r1, [pc, #216]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fe4:	f7fc fd80 	bl	8000ae8 <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fec:	f7fc fd7c 	bl	8000ae8 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e053      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	4b2d      	ldr	r3, [pc, #180]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 020c 	and.w	r2, r3, #12
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	429a      	cmp	r2, r3
 8004012:	d1eb      	bne.n	8003fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004014:	4b27      	ldr	r3, [pc, #156]	@ (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d210      	bcs.n	8004044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b24      	ldr	r3, [pc, #144]	@ (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 0207 	bic.w	r2, r3, #7
 800402a:	4922      	ldr	r1, [pc, #136]	@ (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b20      	ldr	r3, [pc, #128]	@ (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e032      	b.n	80040aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004050:	4b19      	ldr	r3, [pc, #100]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4916      	ldr	r1, [pc, #88]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800406e:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	490e      	ldr	r1, [pc, #56]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004082:	f000 f871 	bl	8004168 <HAL_RCC_GetSysClockFreq>
 8004086:	4602      	mov	r2, r0
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	490a      	ldr	r1, [pc, #40]	@ (80040bc <HAL_RCC_ClockConfig+0x1c8>)
 8004094:	5ccb      	ldrb	r3, [r1, r3]
 8004096:	fa22 f303 	lsr.w	r3, r2, r3
 800409a:	4a09      	ldr	r2, [pc, #36]	@ (80040c0 <HAL_RCC_ClockConfig+0x1cc>)
 800409c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800409e:	4b09      	ldr	r3, [pc, #36]	@ (80040c4 <HAL_RCC_ClockConfig+0x1d0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fc fcde 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40022000 	.word	0x40022000
 80040b8:	40021000 	.word	0x40021000
 80040bc:	08007ebc 	.word	0x08007ebc
 80040c0:	20000008 	.word	0x20000008
 80040c4:	2000000c 	.word	0x2000000c

080040c8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08a      	sub	sp, #40	@ 0x28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80040d4:	f107 0318 	add.w	r3, r7, #24
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80040e2:	2302      	movs	r3, #2
 80040e4:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80040e6:	2303      	movs	r3, #3
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80040ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040f2:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80040f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004130 <HAL_RCC_MCOConfig+0x68>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004130 <HAL_RCC_MCOConfig+0x68>)
 80040fa:	f043 0304 	orr.w	r3, r3, #4
 80040fe:	6193      	str	r3, [r2, #24]
 8004100:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_RCC_MCOConfig+0x68>)
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800410c:	f107 0318 	add.w	r3, r7, #24
 8004110:	4619      	mov	r1, r3
 8004112:	4808      	ldr	r0, [pc, #32]	@ (8004134 <HAL_RCC_MCOConfig+0x6c>)
 8004114:	f7fe ff36 	bl	8002f84 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8004118:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <HAL_RCC_MCOConfig+0x68>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004120:	4903      	ldr	r1, [pc, #12]	@ (8004130 <HAL_RCC_MCOConfig+0x68>)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
}
 8004128:	bf00      	nop
 800412a:	3728      	adds	r7, #40	@ 0x28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000
 8004134:	40010800 	.word	0x40010800

08004138 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800413c:	4b03      	ldr	r3, [pc, #12]	@ (800414c <HAL_RCC_EnableCSS+0x14>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]
}
 8004142:	bf00      	nop
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	4242004c 	.word	0x4242004c

08004150 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8004154:	4b03      	ldr	r3, [pc, #12]	@ (8004164 <HAL_RCC_DisableCSS+0x14>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	4242004c 	.word	0x4242004c

08004168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004168:	b490      	push	{r4, r7}
 800416a:	b08a      	sub	sp, #40	@ 0x28
 800416c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800416e:	4b29      	ldr	r3, [pc, #164]	@ (8004214 <HAL_RCC_GetSysClockFreq+0xac>)
 8004170:	1d3c      	adds	r4, r7, #4
 8004172:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004178:	f240 2301 	movw	r3, #513	@ 0x201
 800417c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	2300      	movs	r3, #0
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	2300      	movs	r3, #0
 8004188:	627b      	str	r3, [r7, #36]	@ 0x24
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004192:	4b21      	ldr	r3, [pc, #132]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d002      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0x40>
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d003      	beq.n	80041ae <HAL_RCC_GetSysClockFreq+0x46>
 80041a6:	e02b      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041a8:	4b1c      	ldr	r3, [pc, #112]	@ (800421c <HAL_RCC_GetSysClockFreq+0xb4>)
 80041aa:	623b      	str	r3, [r7, #32]
      break;
 80041ac:	e02b      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	0c9b      	lsrs	r3, r3, #18
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	3328      	adds	r3, #40	@ 0x28
 80041b8:	443b      	add	r3, r7
 80041ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041be:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d012      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041ca:	4b13      	ldr	r3, [pc, #76]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	0c5b      	lsrs	r3, r3, #17
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	3328      	adds	r3, #40	@ 0x28
 80041d6:	443b      	add	r3, r7
 80041d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	4a0e      	ldr	r2, [pc, #56]	@ (800421c <HAL_RCC_GetSysClockFreq+0xb4>)
 80041e2:	fb03 f202 	mul.w	r2, r3, r2
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ee:	e004      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	4a0b      	ldr	r2, [pc, #44]	@ (8004220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f4:	fb02 f303 	mul.w	r3, r2, r3
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	623b      	str	r3, [r7, #32]
      break;
 80041fe:	e002      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004200:	4b06      	ldr	r3, [pc, #24]	@ (800421c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004202:	623b      	str	r3, [r7, #32]
      break;
 8004204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004206:	6a3b      	ldr	r3, [r7, #32]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3728      	adds	r7, #40	@ 0x28
 800420c:	46bd      	mov	sp, r7
 800420e:	bc90      	pop	{r4, r7}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	08007e78 	.word	0x08007e78
 8004218:	40021000 	.word	0x40021000
 800421c:	007a1200 	.word	0x007a1200
 8004220:	003d0900 	.word	0x003d0900

08004224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004228:	4b02      	ldr	r3, [pc, #8]	@ (8004234 <HAL_RCC_GetHCLKFreq+0x10>)
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr
 8004234:	20000008 	.word	0x20000008

08004238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800423c:	f7ff fff2 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	0a1b      	lsrs	r3, r3, #8
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	4903      	ldr	r1, [pc, #12]	@ (800425c <HAL_RCC_GetPCLK1Freq+0x24>)
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000
 800425c:	08007ecc 	.word	0x08007ecc

08004260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004264:	f7ff ffde 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	0adb      	lsrs	r3, r3, #11
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	4903      	ldr	r1, [pc, #12]	@ (8004284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40021000 	.word	0x40021000
 8004284:	08007ecc 	.word	0x08007ecc

08004288 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	220f      	movs	r2, #15
 8004294:	601a      	str	r2, [r3, #0]
  /* Get the Prediv1 source --------------------------------------------------*/
  RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
#endif /* RCC_CFGR2_PREDIV1SRC */

  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8004296:	4b3c      	ldr	r3, [pc, #240]	@ (8004388 <HAL_RCC_GetOscConfig+0x100>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800429e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042a2:	d104      	bne.n	80042ae <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80042aa:	605a      	str	r2, [r3, #4]
 80042ac:	e00e      	b.n	80042cc <HAL_RCC_GetOscConfig+0x44>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 80042ae:	4b36      	ldr	r3, [pc, #216]	@ (8004388 <HAL_RCC_GetOscConfig+0x100>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ba:	d104      	bne.n	80042c6 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80042c2:	605a      	str	r2, [r3, #4]
 80042c4:	e002      	b.n	80042cc <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	605a      	str	r2, [r3, #4]
  }
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 80042cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004388 <HAL_RCC_GetOscConfig+0x100>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	609a      	str	r2, [r3, #8]

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 80042d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004388 <HAL_RCC_GetOscConfig+0x100>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d103      	bne.n	80042ec <HAL_RCC_GetOscConfig+0x64>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	611a      	str	r2, [r3, #16]
 80042ea:	e002      	b.n	80042f2 <HAL_RCC_GetOscConfig+0x6a>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	611a      	str	r2, [r3, #16]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 80042f2:	4b25      	ldr	r3, [pc, #148]	@ (8004388 <HAL_RCC_GetOscConfig+0x100>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	08db      	lsrs	r3, r3, #3
 80042f8:	f003 021f 	and.w	r2, r3, #31
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	615a      	str	r2, [r3, #20]

  /* Get the LSE configuration -----------------------------------------------*/
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8004300:	4b21      	ldr	r3, [pc, #132]	@ (8004388 <HAL_RCC_GetOscConfig+0x100>)
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d103      	bne.n	8004314 <HAL_RCC_GetOscConfig+0x8c>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2205      	movs	r2, #5
 8004310:	60da      	str	r2, [r3, #12]
 8004312:	e00c      	b.n	800432e <HAL_RCC_GetOscConfig+0xa6>
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8004314:	4b1c      	ldr	r3, [pc, #112]	@ (8004388 <HAL_RCC_GetOscConfig+0x100>)
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d103      	bne.n	8004328 <HAL_RCC_GetOscConfig+0xa0>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	e002      	b.n	800432e <HAL_RCC_GetOscConfig+0xa6>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	60da      	str	r2, [r3, #12]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
 800432e:	4b16      	ldr	r3, [pc, #88]	@ (8004388 <HAL_RCC_GetOscConfig+0x100>)
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d103      	bne.n	8004342 <HAL_RCC_GetOscConfig+0xba>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	619a      	str	r2, [r3, #24]
 8004340:	e002      	b.n	8004348 <HAL_RCC_GetOscConfig+0xc0>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	619a      	str	r2, [r3, #24]
  }


  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 8004348:	4b0f      	ldr	r3, [pc, #60]	@ (8004388 <HAL_RCC_GetOscConfig+0x100>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004350:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004354:	d103      	bne.n	800435e <HAL_RCC_GetOscConfig+0xd6>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2202      	movs	r2, #2
 800435a:	61da      	str	r2, [r3, #28]
 800435c:	e002      	b.n	8004364 <HAL_RCC_GetOscConfig+0xdc>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	61da      	str	r2, [r3, #28]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8004364:	4b08      	ldr	r3, [pc, #32]	@ (8004388 <HAL_RCC_GetOscConfig+0x100>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 8004370:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <HAL_RCC_GetOscConfig+0x100>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	625a      	str	r2, [r3, #36]	@ 0x24
    RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
  }
  RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
  RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
#endif /* RCC_CR_PLL2ON */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000

0800438c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	220f      	movs	r2, #15
 800439a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800439c:	4b11      	ldr	r3, [pc, #68]	@ (80043e4 <HAL_RCC_GetClockConfig+0x58>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 0203 	and.w	r2, r3, #3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043a8:	4b0e      	ldr	r3, [pc, #56]	@ (80043e4 <HAL_RCC_GetClockConfig+0x58>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043b4:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <HAL_RCC_GetClockConfig+0x58>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80043c0:	4b08      	ldr	r3, [pc, #32]	@ (80043e4 <HAL_RCC_GetClockConfig+0x58>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	08db      	lsrs	r3, r3, #3
 80043c6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043ce:	4b06      	ldr	r3, [pc, #24]	@ (80043e8 <HAL_RCC_GetClockConfig+0x5c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0207 	and.w	r2, r3, #7
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40022000 	.word	0x40022000

080043ec <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80043f0:	4b06      	ldr	r3, [pc, #24]	@ (800440c <HAL_RCC_NMI_IRQHandler+0x20>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f8:	2b80      	cmp	r3, #128	@ 0x80
 80043fa:	d104      	bne.n	8004406 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80043fc:	f000 f828 	bl	8004450 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004400:	4b03      	ldr	r3, [pc, #12]	@ (8004410 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004402:	2280      	movs	r2, #128	@ 0x80
 8004404:	701a      	strb	r2, [r3, #0]
  }
}
 8004406:	bf00      	nop
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	4002100a 	.word	0x4002100a

08004414 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800441c:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <RCC_Delay+0x34>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0a      	ldr	r2, [pc, #40]	@ (800444c <RCC_Delay+0x38>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	0a5b      	lsrs	r3, r3, #9
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	fb02 f303 	mul.w	r3, r2, r3
 800442e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004430:	bf00      	nop
  }
  while (Delay --);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	60fa      	str	r2, [r7, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f9      	bne.n	8004430 <RCC_Delay+0x1c>
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	20000008 	.word	0x20000008
 800444c:	10624dd3 	.word	0x10624dd3

08004450 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d07d      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004478:	2300      	movs	r3, #0
 800447a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800447c:	4b4f      	ldr	r3, [pc, #316]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10d      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004488:	4b4c      	ldr	r3, [pc, #304]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	4a4b      	ldr	r2, [pc, #300]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004492:	61d3      	str	r3, [r2, #28]
 8004494:	4b49      	ldr	r3, [pc, #292]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a4:	4b46      	ldr	r3, [pc, #280]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d118      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044b0:	4b43      	ldr	r3, [pc, #268]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a42      	ldr	r2, [pc, #264]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044bc:	f7fc fb14 	bl	8000ae8 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c2:	e008      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c4:	f7fc fb10 	bl	8000ae8 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	@ 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e06d      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d6:	4b3a      	ldr	r3, [pc, #232]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e2:	4b36      	ldr	r3, [pc, #216]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d02e      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d027      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004500:	4b2e      	ldr	r3, [pc, #184]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004508:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800450a:	4b2e      	ldr	r3, [pc, #184]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800450c:	2201      	movs	r2, #1
 800450e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004510:	4b2c      	ldr	r3, [pc, #176]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004516:	4a29      	ldr	r2, [pc, #164]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d014      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7fc fadf 	bl	8000ae8 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452c:	e00a      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fc fadb 	bl	8000ae8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e036      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004544:	4b1d      	ldr	r3, [pc, #116]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ee      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004550:	4b1a      	ldr	r3, [pc, #104]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4917      	ldr	r1, [pc, #92]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455e:	4313      	orrs	r3, r2
 8004560:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004568:	4b14      	ldr	r3, [pc, #80]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	4a13      	ldr	r2, [pc, #76]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004572:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004580:	4b0e      	ldr	r3, [pc, #56]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	490b      	ldr	r1, [pc, #44]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458e:	4313      	orrs	r3, r2
 8004590:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800459e:	4b07      	ldr	r3, [pc, #28]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	4904      	ldr	r1, [pc, #16]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40021000 	.word	0x40021000
 80045c0:	40007000 	.word	0x40007000
 80045c4:	42420440 	.word	0x42420440

080045c8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         returns the configuration information for the Extended Peripherals clocks(RTC, I2S, ADC clocks).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t srcclk = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

  /* Get the RTC configuration -----------------------------------------------*/
  srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80045da:	4b12      	ldr	r3, [pc, #72]	@ (8004624 <HAL_RCCEx_GetPeriphCLKConfig+0x5c>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045e2:	60fb      	str	r3, [r7, #12]
  /* Source clock is LSE or LSI*/
  PeriphClkInit->RTCClockSelection = srcclk;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	605a      	str	r2, [r3, #4]

  /* Get the ADC clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f043 0202 	orr.w	r2, r3, #2
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
  PeriphClkInit->AdcClockSelection = __HAL_RCC_GET_ADC_SOURCE();
 80045f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004624 <HAL_RCCEx_GetPeriphCLKConfig+0x5c>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	609a      	str	r2, [r3, #8]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /* Get the USB clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USB;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f043 0210 	orr.w	r2, r3, #16
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	601a      	str	r2, [r3, #0]
  PeriphClkInit->UsbClockSelection = __HAL_RCC_GET_USB_SOURCE();
 800460e:	4b05      	ldr	r3, [pc, #20]	@ (8004624 <HAL_RCCEx_GetPeriphCLKConfig+0x5c>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	60da      	str	r2, [r3, #12]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	40021000 	.word	0x40021000

08004628 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b08d      	sub	sp, #52	@ 0x34
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004630:	4b58      	ldr	r3, [pc, #352]	@ (8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004632:	f107 040c 	add.w	r4, r7, #12
 8004636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800463c:	f240 2301 	movw	r3, #513	@ 0x201
 8004640:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
 8004646:	2300      	movs	r3, #0
 8004648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800464a:	2300      	movs	r3, #0
 800464c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	2300      	movs	r3, #0
 8004654:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b10      	cmp	r3, #16
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b10      	cmp	r3, #16
 8004660:	f200 808e 	bhi.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d049      	beq.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d079      	beq.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004670:	e086      	b.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8004672:	4b49      	ldr	r3, [pc, #292]	@ (8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004678:	4b47      	ldr	r3, [pc, #284]	@ (8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d07f      	beq.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	0c9b      	lsrs	r3, r3, #18
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	3330      	adds	r3, #48	@ 0x30
 800468e:	443b      	add	r3, r7
 8004690:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004694:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d017      	beq.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	0c5b      	lsrs	r3, r3, #17
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	3330      	adds	r3, #48	@ 0x30
 80046ac:	443b      	add	r3, r7
 80046ae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046b2:	627b      	str	r3, [r7, #36]	@ 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80046be:	4a37      	ldr	r2, [pc, #220]	@ (800479c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	fb02 f303 	mul.w	r3, r2, r3
 80046cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ce:	e004      	b.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	4a33      	ldr	r2, [pc, #204]	@ (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80046d4:	fb02 f303 	mul.w	r3, r2, r3
 80046d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80046da:	4b2f      	ldr	r3, [pc, #188]	@ (8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046e6:	d102      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80046e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80046ec:	e04a      	b.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80046ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	4a2c      	ldr	r2, [pc, #176]	@ (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80046f4:	fba2 2303 	umull	r2, r3, r2, r3
 80046f8:	085b      	lsrs	r3, r3, #1
 80046fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80046fc:	e042      	b.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80046fe:	4b26      	ldr	r3, [pc, #152]	@ (8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800470a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800470e:	d108      	bne.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800471a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800471e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004720:	e01f      	b.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800472c:	d109      	bne.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800472e:	4b1a      	ldr	r3, [pc, #104]	@ (8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800473a:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800473e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004740:	e00f      	b.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004748:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800474c:	d11c      	bne.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800474e:	4b12      	ldr	r3, [pc, #72]	@ (8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d016      	beq.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800475a:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800475e:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8004760:	e012      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004762:	e011      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004764:	f7ff fd7c 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 8004768:	4602      	mov	r2, r0
 800476a:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	0b9b      	lsrs	r3, r3, #14
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	3301      	adds	r3, #1
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800477e:	e004      	b.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004780:	bf00      	nop
 8004782:	e002      	b.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004784:	bf00      	nop
 8004786:	e000      	b.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004788:	bf00      	nop
    }
  }
  return (frequency);
 800478a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800478c:	4618      	mov	r0, r3
 800478e:	3734      	adds	r7, #52	@ 0x34
 8004790:	46bd      	mov	sp, r7
 8004792:	bd90      	pop	{r4, r7, pc}
 8004794:	08007e88 	.word	0x08007e88
 8004798:	40021000 	.word	0x40021000
 800479c:	007a1200 	.word	0x007a1200
 80047a0:	003d0900 	.word	0x003d0900
 80047a4:	aaaaaaab 	.word	0xaaaaaaab

080047a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e03f      	b.n	800483a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fb fe70 	bl	80004b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2224      	movs	r2, #36	@ 0x24
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f001 ffc7 	bl	8006780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e047      	b.n	80048e4 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d106      	bne.n	800486e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fb fe23 	bl	80004b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2224      	movs	r2, #36	@ 0x24
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004884:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f001 ff7a 	bl	8006780 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800489a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80048aa:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0208 	orr.w	r2, r2, #8
 80048ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e057      	b.n	80049b0 <HAL_LIN_Init+0xc4>
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d106      	bne.n	800491a <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7fb fdcd 	bl	80004b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2224      	movs	r2, #36	@ 0x24
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004930:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f001 ff24 	bl	8006780 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004946:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004956:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004966:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0220 	bic.w	r2, r2, #32
 8004976:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6919      	ldr	r1, [r3, #16]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004996:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	460b      	mov	r3, r1
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e05f      	b.n	8004a90 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7fb fd65 	bl	80004b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2224      	movs	r2, #36	@ 0x24
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f001 febc 	bl	8006780 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a26:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 020f 	bic.w	r2, r2, #15
 8004a36:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6919      	ldr	r1, [r3, #16]
 8004a3e:	7afa      	ldrb	r2, [r7, #11]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a56:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68d9      	ldr	r1, [r3, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a76:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e021      	b.n	8004aee <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2224      	movs	r2, #36	@ 0x24
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fb fd34 	bl	8000530 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr

08004b1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b08a      	sub	sp, #40	@ 0x28
 8004b1e:	af02      	add	r7, sp, #8
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	603b      	str	r3, [r7, #0]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d17c      	bne.n	8004c34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <HAL_UART_Transmit+0x2c>
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e075      	b.n	8004c36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_UART_Transmit+0x3e>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e06e      	b.n	8004c36 <HAL_UART_Transmit+0x11c>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2221      	movs	r2, #33	@ 0x21
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b6e:	f7fb ffbb 	bl	8000ae8 <HAL_GetTick>
 8004b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	88fa      	ldrh	r2, [r7, #6]
 8004b7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b88:	d108      	bne.n	8004b9c <HAL_UART_Transmit+0x82>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d104      	bne.n	8004b9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	e003      	b.n	8004ba4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8004bac:	e02a      	b.n	8004c04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2180      	movs	r1, #128	@ 0x80
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f001 fb08 	bl	80061ce <UART_WaitOnFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e036      	b.n	8004c36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	3302      	adds	r3, #2
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	e007      	b.n	8004bf6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	781a      	ldrb	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1cf      	bne.n	8004bae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2140      	movs	r1, #64	@ 0x40
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f001 fad8 	bl	80061ce <UART_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e006      	b.n	8004c36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e000      	b.n	8004c36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3720      	adds	r7, #32
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b08a      	sub	sp, #40	@ 0x28
 8004c42:	af02      	add	r7, sp, #8
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	f040 808c 	bne.w	8004d78 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <HAL_UART_Receive+0x2e>
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e084      	b.n	8004d7a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_UART_Receive+0x40>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e07d      	b.n	8004d7a <HAL_UART_Receive+0x13c>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2222      	movs	r2, #34	@ 0x22
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c9a:	f7fb ff25 	bl	8000ae8 <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	88fa      	ldrh	r2, [r7, #6]
 8004caa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb4:	d108      	bne.n	8004cc8 <HAL_UART_Receive+0x8a>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d104      	bne.n	8004cc8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	e003      	b.n	8004cd0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004cd8:	e043      	b.n	8004d62 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2120      	movs	r1, #32
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f001 fa72 	bl	80061ce <UART_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e042      	b.n	8004d7a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10c      	bne.n	8004d14 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	3302      	adds	r3, #2
 8004d10:	61bb      	str	r3, [r7, #24]
 8004d12:	e01f      	b.n	8004d54 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d1c:	d007      	beq.n	8004d2e <HAL_UART_Receive+0xf0>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <HAL_UART_Receive+0xfe>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	e008      	b.n	8004d4e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3301      	adds	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1b6      	bne.n	8004cda <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e000      	b.n	8004d7a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004d78:	2302      	movs	r3, #2
  }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d130      	bne.n	8004dfe <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_UART_Transmit_IT+0x26>
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e029      	b.n	8004e00 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d101      	bne.n	8004dba <HAL_UART_Transmit_IT+0x38>
 8004db6:	2302      	movs	r3, #2
 8004db8:	e022      	b.n	8004e00 <HAL_UART_Transmit_IT+0x7e>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	88fa      	ldrh	r2, [r7, #6]
 8004dd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2221      	movs	r2, #33	@ 0x21
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004df8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e000      	b.n	8004e00 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004dfe:	2302      	movs	r3, #2
  }
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	4613      	mov	r3, r2
 8004e16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d11d      	bne.n	8004e60 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <HAL_UART_Receive_IT+0x26>
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e016      	b.n	8004e62 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_UART_Receive_IT+0x38>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e00f      	b.n	8004e62 <HAL_UART_Receive_IT+0x58>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	461a      	mov	r2, r3
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f001 fa03 	bl	8006262 <UART_Start_Receive_IT>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	e000      	b.n	8004e62 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e60:	2302      	movs	r3, #2
  }
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d153      	bne.n	8004f2e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_UART_Transmit_DMA+0x26>
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e04c      	b.n	8004f30 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UART_Transmit_DMA+0x38>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e045      	b.n	8004f30 <HAL_UART_Transmit_DMA+0xc4>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2221      	movs	r2, #33	@ 0x21
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed0:	4a19      	ldr	r2, [pc, #100]	@ (8004f38 <HAL_UART_Transmit_DMA+0xcc>)
 8004ed2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed8:	4a18      	ldr	r2, [pc, #96]	@ (8004f3c <HAL_UART_Transmit_DMA+0xd0>)
 8004eda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee0:	4a17      	ldr	r2, [pc, #92]	@ (8004f40 <HAL_UART_Transmit_DMA+0xd4>)
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee8:	2200      	movs	r2, #0
 8004eea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004eec:	f107 0308 	add.w	r3, r7, #8
 8004ef0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3304      	adds	r3, #4
 8004f00:	461a      	mov	r2, r3
 8004f02:	88fb      	ldrh	r3, [r7, #6]
 8004f04:	f7fc fab2 	bl	800146c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f10:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f28:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e000      	b.n	8004f30 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004f2e:	2302      	movs	r3, #2
  }
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	08006001 	.word	0x08006001
 8004f3c:	08006053 	.word	0x08006053
 8004f40:	0800613b 	.word	0x0800613b

08004f44 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d11d      	bne.n	8004f9a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_UART_Receive_DMA+0x26>
 8004f64:	88fb      	ldrh	r3, [r7, #6]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e016      	b.n	8004f9c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_UART_Receive_DMA+0x38>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e00f      	b.n	8004f9c <HAL_UART_Receive_DMA+0x58>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	631a      	str	r2, [r3, #48]	@ 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f001 f99f 	bl	80062d4 <UART_Start_Receive_DMA>
 8004f96:	4603      	mov	r3, r0
 8004f98:	e000      	b.n	8004f9c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f9a:	2302      	movs	r3, #2
  }
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_UART_DMAPause+0x1a>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e050      	b.n	8005060 <HAL_UART_DMAPause+0xbc>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bf14      	ite	ne
 8004fd4:	2301      	movne	r3, #1
 8004fd6:	2300      	moveq	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b21      	cmp	r3, #33	@ 0x21
 8004fe6:	d10a      	bne.n	8004ffe <HAL_UART_DMAPause+0x5a>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d007      	beq.n	8004ffe <HAL_UART_DMAPause+0x5a>
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695a      	ldr	r2, [r3, #20]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ffc:	615a      	str	r2, [r3, #20]
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005008:	2b00      	cmp	r3, #0
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b22      	cmp	r3, #34	@ 0x22
 800501e:	d11a      	bne.n	8005056 <HAL_UART_DMAPause+0xb2>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d017      	beq.n	8005056 <HAL_UART_DMAPause+0xb2>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005034:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695a      	ldr	r2, [r3, #20]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0201 	bic.w	r2, r2, #1
 8005044:	615a      	str	r2, [r3, #20]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695a      	ldr	r2, [r3, #20]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005054:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_UART_DMAResume+0x16>
 800507c:	2302      	movs	r3, #2
 800507e:	e03f      	b.n	8005100 <HAL_UART_DMAResume+0x96>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b21      	cmp	r3, #33	@ 0x21
 8005092:	d107      	bne.n	80050a4 <HAL_UART_DMAResume+0x3a>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80050a2:	615a      	str	r2, [r3, #20]
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b22      	cmp	r3, #34	@ 0x22
 80050ae:	d122      	bne.n	80050f6 <HAL_UART_DMAResume+0x8c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050d4:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	615a      	str	r2, [r3, #20]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050f4:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr

0800510a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf14      	ite	ne
 8005124:	2301      	movne	r3, #1
 8005126:	2300      	moveq	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b21      	cmp	r3, #33	@ 0x21
 8005136:	d116      	bne.n	8005166 <HAL_UART_DMAStop+0x5c>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d013      	beq.n	8005166 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800514c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005152:	2b00      	cmp	r3, #0
 8005154:	d004      	beq.n	8005160 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800515a:	4618      	mov	r0, r3
 800515c:	f7fc f9e5 	bl	800152a <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f001 f91b 	bl	800639c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf14      	ite	ne
 8005174:	2301      	movne	r3, #1
 8005176:	2300      	moveq	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b22      	cmp	r3, #34	@ 0x22
 8005186:	d116      	bne.n	80051b6 <HAL_UART_DMAStop+0xac>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d013      	beq.n	80051b6 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800519c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d004      	beq.n	80051b0 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fc f9bd 	bl	800152a <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f001 f908 	bl	80063c6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	4613      	mov	r3, r2
 80051ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b20      	cmp	r3, #32
 80051da:	f040 80c9 	bne.w	8005370 <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <HAL_UARTEx_ReceiveToIdle+0x2a>
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e0c1      	b.n	8005372 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_UARTEx_ReceiveToIdle+0x3c>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e0ba      	b.n	8005372 <HAL_UARTEx_ReceiveToIdle+0x1b2>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2222      	movs	r2, #34	@ 0x22
 800520e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005218:	f7fb fc66 	bl	8000ae8 <HAL_GetTick>
 800521c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	88fa      	ldrh	r2, [r7, #6]
 8005222:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005232:	d108      	bne.n	8005246 <HAL_UARTEx_ReceiveToIdle+0x86>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d104      	bne.n	8005246 <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	e003      	b.n	800524e <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800524a:	2300      	movs	r3, #0
 800524c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2200      	movs	r2, #0
 800525a:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800525c:	e074      	b.n	8005348 <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b10      	cmp	r3, #16
 800526a:	d114      	bne.n	8005296 <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

          return HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	e06d      	b.n	8005372 <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d13c      	bne.n	800531e <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10c      	bne.n	80052c4 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	3302      	adds	r3, #2
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	e01f      	b.n	8005304 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
           if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052cc:	d007      	beq.n	80052de <HAL_UARTEx_ReceiveToIdle+0x11e>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <HAL_UARTEx_ReceiveToIdle+0x12c>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_UARTEx_ReceiveToIdle+0x12c>
           {
             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	e008      	b.n	80052fe <HAL_UARTEx_ReceiveToIdle+0x13e>
           }
           else
           {
             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	701a      	strb	r2, [r3, #0]
           }

          pdata8bits++;
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	3301      	adds	r3, #1
 8005302:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	3301      	adds	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	85da      	strh	r2, [r3, #46]	@ 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800531e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005324:	d010      	beq.n	8005348 <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005326:	f7fb fbdf 	bl	8000ae8 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005332:	429a      	cmp	r2, r3
 8005334:	d302      	bcc.n	800533c <HAL_UARTEx_ReceiveToIdle+0x17c>
 8005336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005338:	2b00      	cmp	r3, #0
 800533a:	d105      	bne.n	8005348 <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e014      	b.n	8005372 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d185      	bne.n	800525e <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800535a:	b29b      	uxth	r3, r3
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	b29a      	uxth	r2, r3
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	e000      	b.n	8005372 <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 8005370:	2302      	movs	r3, #2
  }
}
 8005372:	4618      	mov	r0, r3
 8005374:	3720      	adds	r7, #32
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b086      	sub	sp, #24
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	4613      	mov	r3, r2
 8005386:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b20      	cmp	r3, #32
 8005392:	d13c      	bne.n	800540e <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e035      	b.n	8005410 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e02e      	b.n	8005410 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80053c0:	88fb      	ldrh	r3, [r7, #6]
 80053c2:	461a      	mov	r2, r3
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 ff4b 	bl	8006262 <UART_Start_Receive_IT>
 80053cc:	4603      	mov	r3, r0
 80053ce:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80053d0:	7dfb      	ldrb	r3, [r7, #23]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d119      	bne.n	800540a <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d113      	bne.n	8005406 <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0210 	orr.w	r2, r2, #16
 8005402:	60da      	str	r2, [r3, #12]
 8005404:	e001      	b.n	800540a <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800540a:	7dfb      	ldrb	r3, [r7, #23]
 800540c:	e000      	b.n	8005410 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 800540e:	2302      	movs	r3, #2
  }
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b20      	cmp	r3, #32
 8005430:	d13c      	bne.n	80054ac <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005438:	88fb      	ldrh	r3, [r7, #6]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e035      	b.n	80054ae <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800544c:	2302      	movs	r3, #2
 800544e:	e02e      	b.n	80054ae <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	461a      	mov	r2, r3
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 ff35 	bl	80062d4 <UART_Start_Receive_DMA>
 800546a:	4603      	mov	r3, r0
 800546c:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d119      	bne.n	80054a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005478:	2b01      	cmp	r3, #1
 800547a:	d113      	bne.n	80054a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800547c:	2300      	movs	r3, #0
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0210 	orr.w	r2, r2, #16
 80054a0:	60da      	str	r2, [r3, #12]
 80054a2:	e001      	b.n	80054a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	e000      	b.n	80054ae <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80054ac:	2302      	movs	r3, #2
  }
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 72f0 	bic.w	r2, r2, #480	@ 0x1e0
 80054cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d107      	bne.n	80054f6 <HAL_UART_Abort+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0210 	bic.w	r2, r2, #16
 80054f4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005500:	2b00      	cmp	r3, #0
 8005502:	d024      	beq.n	800554e <HAL_UART_Abort+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005512:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005518:	2b00      	cmp	r3, #0
 800551a:	d018      	beq.n	800554e <HAL_UART_Abort+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005520:	2200      	movs	r2, #0
 8005522:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005528:	4618      	mov	r0, r3
 800552a:	f7fb fffe 	bl	800152a <HAL_DMA_Abort>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00c      	beq.n	800554e <HAL_UART_Abort+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005538:	4618      	mov	r0, r3
 800553a:	f7fc fbe7 	bl	8001d0c <HAL_DMA_GetError>
 800553e:	4603      	mov	r3, r0
 8005540:	2b20      	cmp	r3, #32
 8005542:	d104      	bne.n	800554e <HAL_UART_Abort+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2210      	movs	r2, #16
 8005548:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e040      	b.n	80055d0 <HAL_UART_Abort+0x11a>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	d024      	beq.n	80055a6 <HAL_UART_Abort+0xf0>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695a      	ldr	r2, [r3, #20]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800556a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d018      	beq.n	80055a6 <HAL_UART_Abort+0xf0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005578:	2200      	movs	r2, #0
 800557a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	4618      	mov	r0, r3
 8005582:	f7fb ffd2 	bl	800152a <HAL_DMA_Abort>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00c      	beq.n	80055a6 <HAL_UART_Abort+0xf0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005590:	4618      	mov	r0, r3
 8005592:	f7fc fbbb 	bl	8001d0c <HAL_DMA_GetError>
 8005596:	4603      	mov	r3, r0
 8005598:	2b20      	cmp	r3, #32
 800559a:	d104      	bne.n	80055a6 <HAL_UART_Abort+0xf0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2210      	movs	r2, #16
 80055a0:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e014      	b.n	80055d0 <HAL_UART_Abort+0x11a>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->gState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80055ee:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d024      	beq.n	8005648 <HAL_UART_AbortTransmit+0x70>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800560c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005612:	2b00      	cmp	r3, #0
 8005614:	d018      	beq.n	8005648 <HAL_UART_AbortTransmit+0x70>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561a:	2200      	movs	r2, #0
 800561c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005622:	4618      	mov	r0, r3
 8005624:	f7fb ff81 	bl	800152a <HAL_DMA_Abort>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00c      	beq.n	8005648 <HAL_UART_AbortTransmit+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005632:	4618      	mov	r0, r3
 8005634:	f7fc fb6a 	bl	8001d0c <HAL_DMA_GetError>
 8005638:	4603      	mov	r3, r0
 800563a:	2b20      	cmp	r3, #32
 800563c:	d104      	bne.n	8005648 <HAL_UART_AbortTransmit+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2210      	movs	r2, #16
 8005642:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e007      	b.n	8005658 <HAL_UART_AbortTransmit+0x80>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8005676:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695a      	ldr	r2, [r3, #20]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568c:	2b01      	cmp	r3, #1
 800568e:	d107      	bne.n	80056a0 <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0210 	bic.w	r2, r2, #16
 800569e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d024      	beq.n	80056f8 <HAL_UART_AbortReceive+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695a      	ldr	r2, [r3, #20]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056bc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d018      	beq.n	80056f8 <HAL_UART_AbortReceive+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ca:	2200      	movs	r2, #0
 80056cc:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fb ff29 	bl	800152a <HAL_DMA_Abort>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <HAL_UART_AbortReceive+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fc fb12 	bl	8001d0c <HAL_DMA_GetError>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d104      	bne.n	80056f8 <HAL_UART_AbortReceive+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2210      	movs	r2, #16
 80056f2:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e00a      	b.n	800570e <HAL_UART_AbortReceive+0xae>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2220      	movs	r2, #32
 8005702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8005720:	2301      	movs	r3, #1
 8005722:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 72f0 	bic.w	r2, r2, #480	@ 0x1e0
 8005732:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695a      	ldr	r2, [r3, #20]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0201 	bic.w	r2, r2, #1
 8005742:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005748:	2b01      	cmp	r3, #1
 800574a:	d107      	bne.n	800575c <HAL_UART_Abort_IT+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0210 	bic.w	r2, r2, #16
 800575a:	60da      	str	r2, [r3, #12]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00f      	beq.n	8005784 <HAL_UART_Abort_IT+0x6c>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576e:	2b00      	cmp	r3, #0
 8005770:	d004      	beq.n	800577c <HAL_UART_Abort_IT+0x64>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005776:	4a40      	ldr	r2, [pc, #256]	@ (8005878 <HAL_UART_Abort_IT+0x160>)
 8005778:	635a      	str	r2, [r3, #52]	@ 0x34
 800577a:	e003      	b.n	8005784 <HAL_UART_Abort_IT+0x6c>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005780:	2200      	movs	r2, #0
 8005782:	635a      	str	r2, [r3, #52]	@ 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00f      	beq.n	80057ac <HAL_UART_Abort_IT+0x94>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d004      	beq.n	80057a4 <HAL_UART_Abort_IT+0x8c>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579e:	4a37      	ldr	r2, [pc, #220]	@ (800587c <HAL_UART_Abort_IT+0x164>)
 80057a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80057a2:	e003      	b.n	80057ac <HAL_UART_Abort_IT+0x94>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a8:	2200      	movs	r2, #0
 80057aa:	635a      	str	r2, [r3, #52]	@ 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d01a      	beq.n	80057f0 <HAL_UART_Abort_IT+0xd8>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695a      	ldr	r2, [r3, #20]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057c8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00e      	beq.n	80057f0 <HAL_UART_Abort_IT+0xd8>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fb fee2 	bl	80015a0 <HAL_DMA_Abort_IT>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <HAL_UART_Abort_IT+0xd4>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e6:	2200      	movs	r2, #0
 80057e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80057ea:	e001      	b.n	80057f0 <HAL_UART_Abort_IT+0xd8>
      }
      else
      {
        AbortCplt = 0x00U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01c      	beq.n	8005838 <HAL_UART_Abort_IT+0x120>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800580c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005812:	2b00      	cmp	r3, #0
 8005814:	d010      	beq.n	8005838 <HAL_UART_Abort_IT+0x120>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581a:	4618      	mov	r0, r3
 800581c:	f7fb fec0 	bl	80015a0 <HAL_DMA_Abort_IT>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d006      	beq.n	8005834 <HAL_UART_Abort_IT+0x11c>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582a:	2200      	movs	r2, #0
 800582c:	635a      	str	r2, [r3, #52]	@ 0x34
        AbortCplt = 0x01U;
 800582e:	2301      	movs	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	e001      	b.n	8005838 <HAL_UART_Abort_IT+0x120>
      }
      else
      {
        AbortCplt = 0x00U;
 8005834:	2300      	movs	r3, #0
 8005836:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d116      	bne.n	800586c <HAL_UART_Abort_IT+0x154>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fa9b 	bl	8005da2 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	08006447 	.word	0x08006447
 800587c:	080064a7 	.word	0x080064a7

08005880 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8005896:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d02a      	beq.n	80058fc <HAL_UART_AbortTransmit_IT+0x7c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695a      	ldr	r2, [r3, #20]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058b4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d013      	beq.n	80058e6 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c2:	4a16      	ldr	r2, [pc, #88]	@ (800591c <HAL_UART_AbortTransmit_IT+0x9c>)
 80058c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fb fe68 	bl	80015a0 <HAL_DMA_Abort_IT>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d01c      	beq.n	8005910 <HAL_UART_AbortTransmit_IT+0x90>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058e0:	4610      	mov	r0, r2
 80058e2:	4798      	blx	r3
 80058e4:	e014      	b.n	8005910 <HAL_UART_AbortTransmit_IT+0x90>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	84da      	strh	r2, [r3, #38]	@ 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fa5d 	bl	8005db4 <HAL_UART_AbortTransmitCpltCallback>
 80058fa:	e009      	b.n	8005910 <HAL_UART_AbortTransmit_IT+0x90>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fa52 	bl	8005db4 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	08006507 	.word	0x08006507

08005920 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8005936:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695a      	ldr	r2, [r3, #20]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594c:	2b01      	cmp	r3, #1
 800594e:	d107      	bne.n	8005960 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0210 	bic.w	r2, r2, #16
 800595e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d02d      	beq.n	80059ca <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695a      	ldr	r2, [r3, #20]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800597c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005982:	2b00      	cmp	r3, #0
 8005984:	d013      	beq.n	80059ae <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598a:	4a19      	ldr	r2, [pc, #100]	@ (80059f0 <HAL_UART_AbortReceive_IT+0xd0>)
 800598c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005992:	4618      	mov	r0, r3
 8005994:	f7fb fe04 	bl	80015a0 <HAL_DMA_Abort_IT>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d022      	beq.n	80059e4 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80059a8:	4610      	mov	r0, r2
 80059aa:	4798      	blx	r3
 80059ac:	e01a      	b.n	80059e4 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f9ff 	bl	8005dc6 <HAL_UART_AbortReceiveCpltCallback>
 80059c8:	e00c      	b.n	80059e4 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f9f1 	bl	8005dc6 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	08006531 	.word	0x08006531

080059f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08a      	sub	sp, #40	@ 0x28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10d      	bne.n	8005a46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_UART_IRQHandler+0x52>
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fdf5 	bl	800662e <UART_Receive_IT>
      return;
 8005a44:	e17b      	b.n	8005d3e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80b1 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x1bc>
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d105      	bne.n	8005a64 <HAL_UART_IRQHandler+0x70>
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80a6 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <HAL_UART_IRQHandler+0x90>
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7c:	f043 0201 	orr.w	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xb0>
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	f043 0202 	orr.w	r2, r3, #2
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_UART_IRQHandler+0xd0>
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abc:	f043 0204 	orr.w	r2, r3, #4
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00f      	beq.n	8005aee <HAL_UART_IRQHandler+0xfa>
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	f003 0320 	and.w	r3, r3, #32
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d104      	bne.n	8005ae2 <HAL_UART_IRQHandler+0xee>
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae6:	f043 0208 	orr.w	r2, r3, #8
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 811e 	beq.w	8005d34 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <HAL_UART_IRQHandler+0x11e>
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fd8e 	bl	800662e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	bf14      	ite	ne
 8005b20:	2301      	movne	r3, #1
 8005b22:	2300      	moveq	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <HAL_UART_IRQHandler+0x146>
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d031      	beq.n	8005b9e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fc43 	bl	80063c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d023      	beq.n	8005b96 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b5c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d013      	beq.n	8005b8e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	4a76      	ldr	r2, [pc, #472]	@ (8005d44 <HAL_UART_IRQHandler+0x350>)
 8005b6c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fb fd14 	bl	80015a0 <HAL_DMA_Abort_IT>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d016      	beq.n	8005bac <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b88:	4610      	mov	r0, r2
 8005b8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8c:	e00e      	b.n	8005bac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f8fe 	bl	8005d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	e00a      	b.n	8005bac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f8fa 	bl	8005d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	e006      	b.n	8005bac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f8f6 	bl	8005d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8005baa:	e0c3      	b.n	8005d34 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	bf00      	nop
    return;
 8005bae:	e0c1      	b.n	8005d34 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	f040 80a1 	bne.w	8005cfc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 809b 	beq.w	8005cfc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8095 	beq.w	8005cfc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d04e      	beq.n	8005c94 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005c00:	8a3b      	ldrh	r3, [r7, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 8098 	beq.w	8005d38 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c0c:	8a3a      	ldrh	r2, [r7, #16]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	f080 8092 	bcs.w	8005d38 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8a3a      	ldrh	r2, [r7, #16]
 8005c18:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d02b      	beq.n	8005c7c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c32:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695a      	ldr	r2, [r3, #20]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695a      	ldr	r2, [r3, #20]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c52:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	631a      	str	r2, [r3, #48]	@ 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0210 	bic.w	r2, r2, #16
 8005c70:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fb fc57 	bl	800152a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f8a3 	bl	8005dd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c92:	e051      	b.n	8005d38 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d047      	beq.n	8005d3c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005cac:	8a7b      	ldrh	r3, [r7, #18]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d044      	beq.n	8005d3c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8005cc0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695a      	ldr	r2, [r3, #20]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	631a      	str	r2, [r3, #48]	@ 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0210 	bic.w	r2, r2, #16
 8005cee:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cf0:	8a7b      	ldrh	r3, [r7, #18]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f86f 	bl	8005dd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005cfa:	e01f      	b.n	8005d3c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d008      	beq.n	8005d18 <HAL_UART_IRQHandler+0x324>
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fc25 	bl	8006560 <UART_Transmit_IT>
    return;
 8005d16:	e012      	b.n	8005d3e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00d      	beq.n	8005d3e <HAL_UART_IRQHandler+0x34a>
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fc66 	bl	80065fe <UART_EndTransmit_IT>
    return;
 8005d32:	e004      	b.n	8005d3e <HAL_UART_IRQHandler+0x34a>
    return;
 8005d34:	bf00      	nop
 8005d36:	e002      	b.n	8005d3e <HAL_UART_IRQHandler+0x34a>
      return;
 8005d38:	bf00      	nop
 8005d3a:	e000      	b.n	8005d3e <HAL_UART_IRQHandler+0x34a>
      return;
 8005d3c:	bf00      	nop
  }
}
 8005d3e:	3728      	adds	r7, #40	@ 0x28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	0800641f 	.word	0x0800641f

08005d48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr

08005d5a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr

08005d6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr

08005d7e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr

08005d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr

08005da2 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr

08005dee <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_LIN_SendBreak+0x16>
 8005e00:	2302      	movs	r3, #2
 8005e02:	e018      	b.n	8005e36 <HAL_LIN_SendBreak+0x48>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2224      	movs	r2, #36	@ 0x24
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Send break characters */
  SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr

08005e40 <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_MultiProcessor_EnterMuteMode+0x16>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e018      	b.n	8005e88 <HAL_MultiProcessor_EnterMuteMode+0x48>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2224      	movs	r2, #36	@ 0x24
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0202 	orr.w	r2, r2, #2
 8005e74:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc80      	pop	{r7}
 8005e90:	4770      	bx	lr

08005e92 <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_MultiProcessor_ExitMuteMode+0x16>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e018      	b.n	8005eda <HAL_MultiProcessor_ExitMuteMode+0x48>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2224      	movs	r2, #36	@ 0x24
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0202 	bic.w	r2, r2, #2
 8005ec6:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8005efa:	2302      	movs	r3, #2
 8005efc:	e020      	b.n	8005f40 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2224      	movs	r2, #36	@ 0x24
 8005f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f023 030c 	bic.w	r3, r3, #12
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f043 0308 	orr.w	r3, r3, #8
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr

08005f4a <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e020      	b.n	8005fa6 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2224      	movs	r2, #36	@ 0x24
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 030c 	bic.w	r3, r3, #12
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f043 0304 	orr.w	r3, r3, #4
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr

08005fb0 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	b2db      	uxtb	r3, r3
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr

08006000 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	2b00      	cmp	r3, #0
 800601a:	d113      	bne.n	8006044 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695a      	ldr	r2, [r3, #20]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006030:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006040:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006042:	e002      	b.n	800604a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7ff fe7f 	bl	8005d48 <HAL_UART_TxCpltCallback>
}
 800604a:	bf00      	nop
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fe7a 	bl	8005d5a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b084      	sub	sp, #16
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0320 	and.w	r3, r3, #32
 8006086:	2b00      	cmp	r3, #0
 8006088:	d12a      	bne.n	80060e0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800609e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695a      	ldr	r2, [r3, #20]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0201 	bic.w	r2, r2, #1
 80060ae:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695a      	ldr	r2, [r3, #20]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060be:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d107      	bne.n	80060e0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0210 	bic.w	r2, r2, #16
 80060de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d106      	bne.n	80060f6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060ec:	4619      	mov	r1, r3
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7ff fe72 	bl	8005dd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060f4:	e002      	b.n	80060fc <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff fe38 	bl	8005d6c <HAL_UART_RxCpltCallback>
}
 80060fc:	bf00      	nop
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006110:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006116:	2b01      	cmp	r3, #1
 8006118:	d108      	bne.n	800612c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800611e:	085b      	lsrs	r3, r3, #1
 8006120:	b29b      	uxth	r3, r3
 8006122:	4619      	mov	r1, r3
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f7ff fe57 	bl	8005dd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800612a:	e002      	b.n	8006132 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f7ff fe26 	bl	8005d7e <HAL_UART_RxHalfCpltCallback>
}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006156:	2b00      	cmp	r3, #0
 8006158:	bf14      	ite	ne
 800615a:	2301      	movne	r3, #1
 800615c:	2300      	moveq	r3, #0
 800615e:	b2db      	uxtb	r3, r3
 8006160:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b21      	cmp	r3, #33	@ 0x21
 800616c:	d108      	bne.n	8006180 <UART_DMAError+0x46>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2200      	movs	r2, #0
 8006178:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800617a:	68b8      	ldr	r0, [r7, #8]
 800617c:	f000 f90e 	bl	800639c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618a:	2b00      	cmp	r3, #0
 800618c:	bf14      	ite	ne
 800618e:	2301      	movne	r3, #1
 8006190:	2300      	moveq	r3, #0
 8006192:	b2db      	uxtb	r3, r3
 8006194:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b22      	cmp	r3, #34	@ 0x22
 80061a0:	d108      	bne.n	80061b4 <UART_DMAError+0x7a>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2200      	movs	r2, #0
 80061ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80061ae:	68b8      	ldr	r0, [r7, #8]
 80061b0:	f000 f909 	bl	80063c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b8:	f043 0210 	orr.w	r2, r3, #16
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061c0:	68b8      	ldr	r0, [r7, #8]
 80061c2:	f7ff fde5 	bl	8005d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	603b      	str	r3, [r7, #0]
 80061da:	4613      	mov	r3, r2
 80061dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061de:	e02c      	b.n	800623a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061e6:	d028      	beq.n	800623a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <UART_WaitOnFlagUntilTimeout+0x30>
 80061ee:	f7fa fc7b 	bl	8000ae8 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d21d      	bcs.n	800623a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800620c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695a      	ldr	r2, [r3, #20]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2220      	movs	r2, #32
 8006222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e00f      	b.n	800625a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4013      	ands	r3, r2
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	429a      	cmp	r2, r3
 8006248:	bf0c      	ite	eq
 800624a:	2301      	moveq	r3, #1
 800624c:	2300      	movne	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	429a      	cmp	r2, r3
 8006256:	d0c3      	beq.n	80061e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	4613      	mov	r3, r2
 800626e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	88fa      	ldrh	r2, [r7, #6]
 800627a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	88fa      	ldrh	r2, [r7, #6]
 8006280:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2222      	movs	r2, #34	@ 0x22
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062a6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695a      	ldr	r2, [r3, #20]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0220 	orr.w	r2, r2, #32
 80062c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr

080062d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	88fa      	ldrh	r2, [r7, #6]
 80062ec:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2222      	movs	r2, #34	@ 0x22
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006300:	4a23      	ldr	r2, [pc, #140]	@ (8006390 <UART_Start_Receive_DMA+0xbc>)
 8006302:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006308:	4a22      	ldr	r2, [pc, #136]	@ (8006394 <UART_Start_Receive_DMA+0xc0>)
 800630a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006310:	4a21      	ldr	r2, [pc, #132]	@ (8006398 <UART_Start_Receive_DMA+0xc4>)
 8006312:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006318:	2200      	movs	r2, #0
 800631a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800631c:	f107 0308 	add.w	r3, r7, #8
 8006320:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3304      	adds	r3, #4
 800632c:	4619      	mov	r1, r3
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	88fb      	ldrh	r3, [r7, #6]
 8006334:	f7fb f89a 	bl	800146c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006338:	2300      	movs	r3, #0
 800633a:	613b      	str	r3, [r7, #16]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006364:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695a      	ldr	r2, [r3, #20]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0201 	orr.w	r2, r2, #1
 8006374:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695a      	ldr	r2, [r3, #20]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006384:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	0800606f 	.word	0x0800606f
 8006394:	08006105 	.word	0x08006105
 8006398:	0800613b 	.word	0x0800613b

0800639c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80063b2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr

080063c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 80063dc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695a      	ldr	r2, [r3, #20]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0201 	bic.w	r2, r2, #1
 80063ec:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d107      	bne.n	8006406 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0210 	bic.w	r2, r2, #16
 8006404:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr

0800641e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff fca9 	bl	8005d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006452:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006458:	2200      	movs	r2, #0
 800645a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800646a:	2b00      	cmp	r3, #0
 800646c:	d117      	bne.n	800649e <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff fc83 	bl	8005da2 <HAL_UART_AbortCpltCallback>
 800649c:	e000      	b.n	80064a0 <UART_DMATxAbortCallback+0x5a>
      return;
 800649e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b8:	2200      	movs	r2, #0
 80064ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d004      	beq.n	80064ce <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d117      	bne.n	80064fe <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f7ff fc53 	bl	8005da2 <HAL_UART_AbortCpltCallback>
 80064fc:	e000      	b.n	8006500 <UART_DMARxAbortCallback+0x5a>
      return;
 80064fe:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff fc46 	bl	8005db4 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006528:	bf00      	nop
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f7ff fc37 	bl	8005dc6 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006558:	bf00      	nop
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b21      	cmp	r3, #33	@ 0x21
 8006572:	d13e      	bne.n	80065f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800657c:	d114      	bne.n	80065a8 <UART_Transmit_IT+0x48>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d110      	bne.n	80065a8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800659a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	1c9a      	adds	r2, r3, #2
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	621a      	str	r2, [r3, #32]
 80065a6:	e008      	b.n	80065ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	1c59      	adds	r1, r3, #1
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6211      	str	r1, [r2, #32]
 80065b2:	781a      	ldrb	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	4619      	mov	r1, r3
 80065c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10f      	bne.n	80065ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e000      	b.n	80065f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065f2:	2302      	movs	r3, #2
  }
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr

080065fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006614:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff fb92 	bl	8005d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b086      	sub	sp, #24
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b22      	cmp	r3, #34	@ 0x22
 8006640:	f040 8099 	bne.w	8006776 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800664c:	d117      	bne.n	800667e <UART_Receive_IT+0x50>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d113      	bne.n	800667e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	b29b      	uxth	r3, r3
 8006668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666c:	b29a      	uxth	r2, r3
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006676:	1c9a      	adds	r2, r3, #2
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	629a      	str	r2, [r3, #40]	@ 0x28
 800667c:	e026      	b.n	80066cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006682:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006684:	2300      	movs	r3, #0
 8006686:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006690:	d007      	beq.n	80066a2 <UART_Receive_IT+0x74>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <UART_Receive_IT+0x82>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e008      	b.n	80066c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	4619      	mov	r1, r3
 80066da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d148      	bne.n	8006772 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0220 	bic.w	r2, r2, #32
 80066ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695a      	ldr	r2, [r3, #20]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0201 	bic.w	r2, r2, #1
 800670e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671c:	2b01      	cmp	r3, #1
 800671e:	d123      	bne.n	8006768 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0210 	bic.w	r2, r2, #16
 8006734:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b10      	cmp	r3, #16
 8006742:	d10a      	bne.n	800675a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff fb39 	bl	8005dd8 <HAL_UARTEx_RxEventCallback>
 8006766:	e002      	b.n	800676e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff faff 	bl	8005d6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e002      	b.n	8006778 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	e000      	b.n	8006778 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006776:	2302      	movs	r3, #2
  }
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80067ba:	f023 030c 	bic.w	r3, r3, #12
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	430b      	orrs	r3, r1
 80067c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006894 <UART_SetConfig+0x114>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d103      	bne.n	80067f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067e8:	f7fd fd3a 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	e002      	b.n	80067f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fd fd22 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 80067f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	009a      	lsls	r2, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	4a22      	ldr	r2, [pc, #136]	@ (8006898 <UART_SetConfig+0x118>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	0119      	lsls	r1, r3, #4
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009a      	lsls	r2, r3, #2
 8006820:	441a      	add	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	fbb2 f2f3 	udiv	r2, r2, r3
 800682c:	4b1a      	ldr	r3, [pc, #104]	@ (8006898 <UART_SetConfig+0x118>)
 800682e:	fba3 0302 	umull	r0, r3, r3, r2
 8006832:	095b      	lsrs	r3, r3, #5
 8006834:	2064      	movs	r0, #100	@ 0x64
 8006836:	fb00 f303 	mul.w	r3, r0, r3
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	3332      	adds	r3, #50	@ 0x32
 8006840:	4a15      	ldr	r2, [pc, #84]	@ (8006898 <UART_SetConfig+0x118>)
 8006842:	fba2 2303 	umull	r2, r3, r2, r3
 8006846:	095b      	lsrs	r3, r3, #5
 8006848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800684c:	4419      	add	r1, r3
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009a      	lsls	r2, r3, #2
 8006858:	441a      	add	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	fbb2 f2f3 	udiv	r2, r2, r3
 8006864:	4b0c      	ldr	r3, [pc, #48]	@ (8006898 <UART_SetConfig+0x118>)
 8006866:	fba3 0302 	umull	r0, r3, r3, r2
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	2064      	movs	r0, #100	@ 0x64
 800686e:	fb00 f303 	mul.w	r3, r0, r3
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	3332      	adds	r3, #50	@ 0x32
 8006878:	4a07      	ldr	r2, [pc, #28]	@ (8006898 <UART_SetConfig+0x118>)
 800687a:	fba2 2303 	umull	r2, r3, r2, r3
 800687e:	095b      	lsrs	r3, r3, #5
 8006880:	f003 020f 	and.w	r2, r3, #15
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	440a      	add	r2, r1
 800688a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800688c:	bf00      	nop
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	40013800 	.word	0x40013800
 8006898:	51eb851f 	.word	0x51eb851f

0800689c <exit>:
 800689c:	b508      	push	{r3, lr}
 800689e:	4b06      	ldr	r3, [pc, #24]	@ (80068b8 <exit+0x1c>)
 80068a0:	4604      	mov	r4, r0
 80068a2:	b113      	cbz	r3, 80068aa <exit+0xe>
 80068a4:	2100      	movs	r1, #0
 80068a6:	f3af 8000 	nop.w
 80068aa:	4b04      	ldr	r3, [pc, #16]	@ (80068bc <exit+0x20>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <exit+0x16>
 80068b0:	4798      	blx	r3
 80068b2:	4620      	mov	r0, r4
 80068b4:	f7f9 fee3 	bl	800067e <_exit>
 80068b8:	00000000 	.word	0x00000000
 80068bc:	20000238 	.word	0x20000238

080068c0 <std>:
 80068c0:	2300      	movs	r3, #0
 80068c2:	b510      	push	{r4, lr}
 80068c4:	4604      	mov	r4, r0
 80068c6:	e9c0 3300 	strd	r3, r3, [r0]
 80068ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ce:	6083      	str	r3, [r0, #8]
 80068d0:	8181      	strh	r1, [r0, #12]
 80068d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80068d4:	81c2      	strh	r2, [r0, #14]
 80068d6:	6183      	str	r3, [r0, #24]
 80068d8:	4619      	mov	r1, r3
 80068da:	2208      	movs	r2, #8
 80068dc:	305c      	adds	r0, #92	@ 0x5c
 80068de:	f000 f9b5 	bl	8006c4c <memset>
 80068e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006918 <std+0x58>)
 80068e4:	6224      	str	r4, [r4, #32]
 80068e6:	6263      	str	r3, [r4, #36]	@ 0x24
 80068e8:	4b0c      	ldr	r3, [pc, #48]	@ (800691c <std+0x5c>)
 80068ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006920 <std+0x60>)
 80068ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006924 <std+0x64>)
 80068f2:	6323      	str	r3, [r4, #48]	@ 0x30
 80068f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006928 <std+0x68>)
 80068f6:	429c      	cmp	r4, r3
 80068f8:	d006      	beq.n	8006908 <std+0x48>
 80068fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068fe:	4294      	cmp	r4, r2
 8006900:	d002      	beq.n	8006908 <std+0x48>
 8006902:	33d0      	adds	r3, #208	@ 0xd0
 8006904:	429c      	cmp	r4, r3
 8006906:	d105      	bne.n	8006914 <std+0x54>
 8006908:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800690c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006910:	f000 b9cf 	b.w	8006cb2 <__retarget_lock_init_recursive>
 8006914:	bd10      	pop	{r4, pc}
 8006916:	bf00      	nop
 8006918:	08007569 	.word	0x08007569
 800691c:	0800758f 	.word	0x0800758f
 8006920:	080075c7 	.word	0x080075c7
 8006924:	080075eb 	.word	0x080075eb
 8006928:	20000100 	.word	0x20000100

0800692c <stdio_exit_handler>:
 800692c:	4a02      	ldr	r2, [pc, #8]	@ (8006938 <stdio_exit_handler+0xc>)
 800692e:	4903      	ldr	r1, [pc, #12]	@ (800693c <stdio_exit_handler+0x10>)
 8006930:	4803      	ldr	r0, [pc, #12]	@ (8006940 <stdio_exit_handler+0x14>)
 8006932:	f000 b8ef 	b.w	8006b14 <_fwalk_sglue>
 8006936:	bf00      	nop
 8006938:	20000014 	.word	0x20000014
 800693c:	080074d9 	.word	0x080074d9
 8006940:	20000024 	.word	0x20000024

08006944 <cleanup_stdio>:
 8006944:	6841      	ldr	r1, [r0, #4]
 8006946:	4b0c      	ldr	r3, [pc, #48]	@ (8006978 <cleanup_stdio+0x34>)
 8006948:	b510      	push	{r4, lr}
 800694a:	4299      	cmp	r1, r3
 800694c:	4604      	mov	r4, r0
 800694e:	d001      	beq.n	8006954 <cleanup_stdio+0x10>
 8006950:	f000 fdc2 	bl	80074d8 <_fflush_r>
 8006954:	68a1      	ldr	r1, [r4, #8]
 8006956:	4b09      	ldr	r3, [pc, #36]	@ (800697c <cleanup_stdio+0x38>)
 8006958:	4299      	cmp	r1, r3
 800695a:	d002      	beq.n	8006962 <cleanup_stdio+0x1e>
 800695c:	4620      	mov	r0, r4
 800695e:	f000 fdbb 	bl	80074d8 <_fflush_r>
 8006962:	68e1      	ldr	r1, [r4, #12]
 8006964:	4b06      	ldr	r3, [pc, #24]	@ (8006980 <cleanup_stdio+0x3c>)
 8006966:	4299      	cmp	r1, r3
 8006968:	d004      	beq.n	8006974 <cleanup_stdio+0x30>
 800696a:	4620      	mov	r0, r4
 800696c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006970:	f000 bdb2 	b.w	80074d8 <_fflush_r>
 8006974:	bd10      	pop	{r4, pc}
 8006976:	bf00      	nop
 8006978:	20000100 	.word	0x20000100
 800697c:	20000168 	.word	0x20000168
 8006980:	200001d0 	.word	0x200001d0

08006984 <__fp_lock>:
 8006984:	b508      	push	{r3, lr}
 8006986:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8006988:	07da      	lsls	r2, r3, #31
 800698a:	d405      	bmi.n	8006998 <__fp_lock+0x14>
 800698c:	898b      	ldrh	r3, [r1, #12]
 800698e:	059b      	lsls	r3, r3, #22
 8006990:	d402      	bmi.n	8006998 <__fp_lock+0x14>
 8006992:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8006994:	f000 f991 	bl	8006cba <__retarget_lock_acquire_recursive>
 8006998:	2000      	movs	r0, #0
 800699a:	bd08      	pop	{r3, pc}

0800699c <__fp_unlock>:
 800699c:	b508      	push	{r3, lr}
 800699e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80069a0:	07da      	lsls	r2, r3, #31
 80069a2:	d405      	bmi.n	80069b0 <__fp_unlock+0x14>
 80069a4:	898b      	ldrh	r3, [r1, #12]
 80069a6:	059b      	lsls	r3, r3, #22
 80069a8:	d402      	bmi.n	80069b0 <__fp_unlock+0x14>
 80069aa:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 80069ac:	f000 f98b 	bl	8006cc6 <__retarget_lock_release_recursive>
 80069b0:	2000      	movs	r0, #0
 80069b2:	bd08      	pop	{r3, pc}

080069b4 <global_stdio_init.part.0>:
 80069b4:	b510      	push	{r4, lr}
 80069b6:	4b0b      	ldr	r3, [pc, #44]	@ (80069e4 <global_stdio_init.part.0+0x30>)
 80069b8:	4c0b      	ldr	r4, [pc, #44]	@ (80069e8 <global_stdio_init.part.0+0x34>)
 80069ba:	4a0c      	ldr	r2, [pc, #48]	@ (80069ec <global_stdio_init.part.0+0x38>)
 80069bc:	4620      	mov	r0, r4
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	2104      	movs	r1, #4
 80069c2:	2200      	movs	r2, #0
 80069c4:	f7ff ff7c 	bl	80068c0 <std>
 80069c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069cc:	2201      	movs	r2, #1
 80069ce:	2109      	movs	r1, #9
 80069d0:	f7ff ff76 	bl	80068c0 <std>
 80069d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069d8:	2202      	movs	r2, #2
 80069da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069de:	2112      	movs	r1, #18
 80069e0:	f7ff bf6e 	b.w	80068c0 <std>
 80069e4:	20000238 	.word	0x20000238
 80069e8:	20000100 	.word	0x20000100
 80069ec:	0800692d 	.word	0x0800692d

080069f0 <__sfp_lock_acquire>:
 80069f0:	4801      	ldr	r0, [pc, #4]	@ (80069f8 <__sfp_lock_acquire+0x8>)
 80069f2:	f000 b962 	b.w	8006cba <__retarget_lock_acquire_recursive>
 80069f6:	bf00      	nop
 80069f8:	20000243 	.word	0x20000243

080069fc <__sfp_lock_release>:
 80069fc:	4801      	ldr	r0, [pc, #4]	@ (8006a04 <__sfp_lock_release+0x8>)
 80069fe:	f000 b962 	b.w	8006cc6 <__retarget_lock_release_recursive>
 8006a02:	bf00      	nop
 8006a04:	20000243 	.word	0x20000243

08006a08 <__sfp>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	4607      	mov	r7, r0
 8006a0c:	f7ff fff0 	bl	80069f0 <__sfp_lock_acquire>
 8006a10:	4b23      	ldr	r3, [pc, #140]	@ (8006aa0 <__sfp+0x98>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	b90b      	cbnz	r3, 8006a1a <__sfp+0x12>
 8006a16:	f7ff ffcd 	bl	80069b4 <global_stdio_init.part.0>
 8006a1a:	4e22      	ldr	r6, [pc, #136]	@ (8006aa4 <__sfp+0x9c>)
 8006a1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	d50f      	bpl.n	8006a44 <__sfp+0x3c>
 8006a24:	6835      	ldr	r5, [r6, #0]
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	d137      	bne.n	8006a9a <__sfp+0x92>
 8006a2a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8006a2e:	4638      	mov	r0, r7
 8006a30:	f000 fac2 	bl	8006fb8 <_malloc_r>
 8006a34:	4604      	mov	r4, r0
 8006a36:	bb28      	cbnz	r0, 8006a84 <__sfp+0x7c>
 8006a38:	6030      	str	r0, [r6, #0]
 8006a3a:	f7ff ffdf 	bl	80069fc <__sfp_lock_release>
 8006a3e:	230c      	movs	r3, #12
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	e01b      	b.n	8006a7c <__sfp+0x74>
 8006a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a48:	b9d5      	cbnz	r5, 8006a80 <__sfp+0x78>
 8006a4a:	4b17      	ldr	r3, [pc, #92]	@ (8006aa8 <__sfp+0xa0>)
 8006a4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a50:	60e3      	str	r3, [r4, #12]
 8006a52:	6665      	str	r5, [r4, #100]	@ 0x64
 8006a54:	f000 f92d 	bl	8006cb2 <__retarget_lock_init_recursive>
 8006a58:	f7ff ffd0 	bl	80069fc <__sfp_lock_release>
 8006a5c:	2208      	movs	r2, #8
 8006a5e:	4629      	mov	r1, r5
 8006a60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a68:	6025      	str	r5, [r4, #0]
 8006a6a:	61a5      	str	r5, [r4, #24]
 8006a6c:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8006a70:	f000 f8ec 	bl	8006c4c <memset>
 8006a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8006a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a80:	3468      	adds	r4, #104	@ 0x68
 8006a82:	e7cd      	b.n	8006a20 <__sfp+0x18>
 8006a84:	2304      	movs	r3, #4
 8006a86:	6005      	str	r5, [r0, #0]
 8006a88:	6043      	str	r3, [r0, #4]
 8006a8a:	300c      	adds	r0, #12
 8006a8c:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8006a90:	4629      	mov	r1, r5
 8006a92:	60a0      	str	r0, [r4, #8]
 8006a94:	f000 f8da 	bl	8006c4c <memset>
 8006a98:	6034      	str	r4, [r6, #0]
 8006a9a:	6836      	ldr	r6, [r6, #0]
 8006a9c:	e7be      	b.n	8006a1c <__sfp+0x14>
 8006a9e:	bf00      	nop
 8006aa0:	20000238 	.word	0x20000238
 8006aa4:	20000014 	.word	0x20000014
 8006aa8:	ffff0001 	.word	0xffff0001

08006aac <__sinit>:
 8006aac:	b510      	push	{r4, lr}
 8006aae:	4604      	mov	r4, r0
 8006ab0:	f7ff ff9e 	bl	80069f0 <__sfp_lock_acquire>
 8006ab4:	6a23      	ldr	r3, [r4, #32]
 8006ab6:	b11b      	cbz	r3, 8006ac0 <__sinit+0x14>
 8006ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006abc:	f7ff bf9e 	b.w	80069fc <__sfp_lock_release>
 8006ac0:	4b04      	ldr	r3, [pc, #16]	@ (8006ad4 <__sinit+0x28>)
 8006ac2:	6223      	str	r3, [r4, #32]
 8006ac4:	4b04      	ldr	r3, [pc, #16]	@ (8006ad8 <__sinit+0x2c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f5      	bne.n	8006ab8 <__sinit+0xc>
 8006acc:	f7ff ff72 	bl	80069b4 <global_stdio_init.part.0>
 8006ad0:	e7f2      	b.n	8006ab8 <__sinit+0xc>
 8006ad2:	bf00      	nop
 8006ad4:	08006945 	.word	0x08006945
 8006ad8:	20000238 	.word	0x20000238

08006adc <__fp_lock_all>:
 8006adc:	b508      	push	{r3, lr}
 8006ade:	f7ff ff87 	bl	80069f0 <__sfp_lock_acquire>
 8006ae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	4a01      	ldr	r2, [pc, #4]	@ (8006af0 <__fp_lock_all+0x14>)
 8006aea:	4902      	ldr	r1, [pc, #8]	@ (8006af4 <__fp_lock_all+0x18>)
 8006aec:	f000 b812 	b.w	8006b14 <_fwalk_sglue>
 8006af0:	20000014 	.word	0x20000014
 8006af4:	08006985 	.word	0x08006985

08006af8 <__fp_unlock_all>:
 8006af8:	b508      	push	{r3, lr}
 8006afa:	2000      	movs	r0, #0
 8006afc:	4a03      	ldr	r2, [pc, #12]	@ (8006b0c <__fp_unlock_all+0x14>)
 8006afe:	4904      	ldr	r1, [pc, #16]	@ (8006b10 <__fp_unlock_all+0x18>)
 8006b00:	f000 f808 	bl	8006b14 <_fwalk_sglue>
 8006b04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b08:	f7ff bf78 	b.w	80069fc <__sfp_lock_release>
 8006b0c:	20000014 	.word	0x20000014
 8006b10:	0800699d 	.word	0x0800699d

08006b14 <_fwalk_sglue>:
 8006b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b18:	4607      	mov	r7, r0
 8006b1a:	4688      	mov	r8, r1
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	2600      	movs	r6, #0
 8006b20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b24:	f1b9 0901 	subs.w	r9, r9, #1
 8006b28:	d505      	bpl.n	8006b36 <_fwalk_sglue+0x22>
 8006b2a:	6824      	ldr	r4, [r4, #0]
 8006b2c:	2c00      	cmp	r4, #0
 8006b2e:	d1f7      	bne.n	8006b20 <_fwalk_sglue+0xc>
 8006b30:	4630      	mov	r0, r6
 8006b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b36:	89ab      	ldrh	r3, [r5, #12]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d907      	bls.n	8006b4c <_fwalk_sglue+0x38>
 8006b3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b40:	3301      	adds	r3, #1
 8006b42:	d003      	beq.n	8006b4c <_fwalk_sglue+0x38>
 8006b44:	4629      	mov	r1, r5
 8006b46:	4638      	mov	r0, r7
 8006b48:	47c0      	blx	r8
 8006b4a:	4306      	orrs	r6, r0
 8006b4c:	3568      	adds	r5, #104	@ 0x68
 8006b4e:	e7e9      	b.n	8006b24 <_fwalk_sglue+0x10>

08006b50 <_iprintf_r>:
 8006b50:	b40e      	push	{r1, r2, r3}
 8006b52:	b503      	push	{r0, r1, lr}
 8006b54:	ab03      	add	r3, sp, #12
 8006b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b5a:	6881      	ldr	r1, [r0, #8]
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	f000 f8e7 	bl	8006d30 <_vfiprintf_r>
 8006b62:	b002      	add	sp, #8
 8006b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b68:	b003      	add	sp, #12
 8006b6a:	4770      	bx	lr

08006b6c <iprintf>:
 8006b6c:	b40f      	push	{r0, r1, r2, r3}
 8006b6e:	b507      	push	{r0, r1, r2, lr}
 8006b70:	4906      	ldr	r1, [pc, #24]	@ (8006b8c <iprintf+0x20>)
 8006b72:	ab04      	add	r3, sp, #16
 8006b74:	6808      	ldr	r0, [r1, #0]
 8006b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b7a:	6881      	ldr	r1, [r0, #8]
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	f000 f8d7 	bl	8006d30 <_vfiprintf_r>
 8006b82:	b003      	add	sp, #12
 8006b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b88:	b004      	add	sp, #16
 8006b8a:	4770      	bx	lr
 8006b8c:	20000020 	.word	0x20000020

08006b90 <_puts_r>:
 8006b90:	6a03      	ldr	r3, [r0, #32]
 8006b92:	b570      	push	{r4, r5, r6, lr}
 8006b94:	4605      	mov	r5, r0
 8006b96:	460e      	mov	r6, r1
 8006b98:	6884      	ldr	r4, [r0, #8]
 8006b9a:	b90b      	cbnz	r3, 8006ba0 <_puts_r+0x10>
 8006b9c:	f7ff ff86 	bl	8006aac <__sinit>
 8006ba0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ba2:	07db      	lsls	r3, r3, #31
 8006ba4:	d405      	bmi.n	8006bb2 <_puts_r+0x22>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	0598      	lsls	r0, r3, #22
 8006baa:	d402      	bmi.n	8006bb2 <_puts_r+0x22>
 8006bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bae:	f000 f884 	bl	8006cba <__retarget_lock_acquire_recursive>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	0719      	lsls	r1, r3, #28
 8006bb6:	d502      	bpl.n	8006bbe <_puts_r+0x2e>
 8006bb8:	6923      	ldr	r3, [r4, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d135      	bne.n	8006c2a <_puts_r+0x9a>
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f000 fd5d 	bl	8007680 <__swsetup_r>
 8006bc6:	b380      	cbz	r0, 8006c2a <_puts_r+0x9a>
 8006bc8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006bcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bce:	07da      	lsls	r2, r3, #31
 8006bd0:	d405      	bmi.n	8006bde <_puts_r+0x4e>
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	059b      	lsls	r3, r3, #22
 8006bd6:	d402      	bmi.n	8006bde <_puts_r+0x4e>
 8006bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bda:	f000 f874 	bl	8006cc6 <__retarget_lock_release_recursive>
 8006bde:	4628      	mov	r0, r5
 8006be0:	bd70      	pop	{r4, r5, r6, pc}
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	da04      	bge.n	8006bf0 <_puts_r+0x60>
 8006be6:	69a2      	ldr	r2, [r4, #24]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	dc17      	bgt.n	8006c1c <_puts_r+0x8c>
 8006bec:	290a      	cmp	r1, #10
 8006bee:	d015      	beq.n	8006c1c <_puts_r+0x8c>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	6022      	str	r2, [r4, #0]
 8006bf6:	7019      	strb	r1, [r3, #0]
 8006bf8:	68a3      	ldr	r3, [r4, #8]
 8006bfa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	60a3      	str	r3, [r4, #8]
 8006c02:	2900      	cmp	r1, #0
 8006c04:	d1ed      	bne.n	8006be2 <_puts_r+0x52>
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da11      	bge.n	8006c2e <_puts_r+0x9e>
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	210a      	movs	r1, #10
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 fcef 	bl	80075f2 <__swbuf_r>
 8006c14:	3001      	adds	r0, #1
 8006c16:	d0d7      	beq.n	8006bc8 <_puts_r+0x38>
 8006c18:	250a      	movs	r5, #10
 8006c1a:	e7d7      	b.n	8006bcc <_puts_r+0x3c>
 8006c1c:	4622      	mov	r2, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 fce7 	bl	80075f2 <__swbuf_r>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d1e7      	bne.n	8006bf8 <_puts_r+0x68>
 8006c28:	e7ce      	b.n	8006bc8 <_puts_r+0x38>
 8006c2a:	3e01      	subs	r6, #1
 8006c2c:	e7e4      	b.n	8006bf8 <_puts_r+0x68>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	6022      	str	r2, [r4, #0]
 8006c34:	220a      	movs	r2, #10
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	e7ee      	b.n	8006c18 <_puts_r+0x88>
	...

08006c3c <puts>:
 8006c3c:	4b02      	ldr	r3, [pc, #8]	@ (8006c48 <puts+0xc>)
 8006c3e:	4601      	mov	r1, r0
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	f7ff bfa5 	b.w	8006b90 <_puts_r>
 8006c46:	bf00      	nop
 8006c48:	20000020 	.word	0x20000020

08006c4c <memset>:
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	4402      	add	r2, r0
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d100      	bne.n	8006c56 <memset+0xa>
 8006c54:	4770      	bx	lr
 8006c56:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5a:	e7f9      	b.n	8006c50 <memset+0x4>

08006c5c <__errno>:
 8006c5c:	4b01      	ldr	r3, [pc, #4]	@ (8006c64 <__errno+0x8>)
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	20000020 	.word	0x20000020

08006c68 <__libc_init_array>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	2600      	movs	r6, #0
 8006c6c:	4d0c      	ldr	r5, [pc, #48]	@ (8006ca0 <__libc_init_array+0x38>)
 8006c6e:	4c0d      	ldr	r4, [pc, #52]	@ (8006ca4 <__libc_init_array+0x3c>)
 8006c70:	1b64      	subs	r4, r4, r5
 8006c72:	10a4      	asrs	r4, r4, #2
 8006c74:	42a6      	cmp	r6, r4
 8006c76:	d109      	bne.n	8006c8c <__libc_init_array+0x24>
 8006c78:	f001 f892 	bl	8007da0 <_init>
 8006c7c:	2600      	movs	r6, #0
 8006c7e:	4d0a      	ldr	r5, [pc, #40]	@ (8006ca8 <__libc_init_array+0x40>)
 8006c80:	4c0a      	ldr	r4, [pc, #40]	@ (8006cac <__libc_init_array+0x44>)
 8006c82:	1b64      	subs	r4, r4, r5
 8006c84:	10a4      	asrs	r4, r4, #2
 8006c86:	42a6      	cmp	r6, r4
 8006c88:	d105      	bne.n	8006c96 <__libc_init_array+0x2e>
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}
 8006c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c90:	4798      	blx	r3
 8006c92:	3601      	adds	r6, #1
 8006c94:	e7ee      	b.n	8006c74 <__libc_init_array+0xc>
 8006c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c9a:	4798      	blx	r3
 8006c9c:	3601      	adds	r6, #1
 8006c9e:	e7f2      	b.n	8006c86 <__libc_init_array+0x1e>
 8006ca0:	08007f10 	.word	0x08007f10
 8006ca4:	08007f10 	.word	0x08007f10
 8006ca8:	08007f10 	.word	0x08007f10
 8006cac:	08007f14 	.word	0x08007f14

08006cb0 <__retarget_lock_init>:
 8006cb0:	4770      	bx	lr

08006cb2 <__retarget_lock_init_recursive>:
 8006cb2:	4770      	bx	lr

08006cb4 <__retarget_lock_close>:
 8006cb4:	4770      	bx	lr

08006cb6 <__retarget_lock_close_recursive>:
 8006cb6:	4770      	bx	lr

08006cb8 <__retarget_lock_acquire>:
 8006cb8:	4770      	bx	lr

08006cba <__retarget_lock_acquire_recursive>:
 8006cba:	4770      	bx	lr

08006cbc <__retarget_lock_try_acquire>:
 8006cbc:	2001      	movs	r0, #1
 8006cbe:	4770      	bx	lr

08006cc0 <__retarget_lock_try_acquire_recursive>:
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	4770      	bx	lr

08006cc4 <__retarget_lock_release>:
 8006cc4:	4770      	bx	lr

08006cc6 <__retarget_lock_release_recursive>:
 8006cc6:	4770      	bx	lr

08006cc8 <__sfputc_r>:
 8006cc8:	6893      	ldr	r3, [r2, #8]
 8006cca:	b410      	push	{r4}
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	6093      	str	r3, [r2, #8]
 8006cd2:	da07      	bge.n	8006ce4 <__sfputc_r+0x1c>
 8006cd4:	6994      	ldr	r4, [r2, #24]
 8006cd6:	42a3      	cmp	r3, r4
 8006cd8:	db01      	blt.n	8006cde <__sfputc_r+0x16>
 8006cda:	290a      	cmp	r1, #10
 8006cdc:	d102      	bne.n	8006ce4 <__sfputc_r+0x1c>
 8006cde:	bc10      	pop	{r4}
 8006ce0:	f000 bc87 	b.w	80075f2 <__swbuf_r>
 8006ce4:	6813      	ldr	r3, [r2, #0]
 8006ce6:	1c58      	adds	r0, r3, #1
 8006ce8:	6010      	str	r0, [r2, #0]
 8006cea:	7019      	strb	r1, [r3, #0]
 8006cec:	4608      	mov	r0, r1
 8006cee:	bc10      	pop	{r4}
 8006cf0:	4770      	bx	lr

08006cf2 <__sfputs_r>:
 8006cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	460f      	mov	r7, r1
 8006cf8:	4614      	mov	r4, r2
 8006cfa:	18d5      	adds	r5, r2, r3
 8006cfc:	42ac      	cmp	r4, r5
 8006cfe:	d101      	bne.n	8006d04 <__sfputs_r+0x12>
 8006d00:	2000      	movs	r0, #0
 8006d02:	e007      	b.n	8006d14 <__sfputs_r+0x22>
 8006d04:	463a      	mov	r2, r7
 8006d06:	4630      	mov	r0, r6
 8006d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0c:	f7ff ffdc 	bl	8006cc8 <__sfputc_r>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	d1f3      	bne.n	8006cfc <__sfputs_r+0xa>
 8006d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d16 <__sprint_r>:
 8006d16:	6893      	ldr	r3, [r2, #8]
 8006d18:	b510      	push	{r4, lr}
 8006d1a:	4614      	mov	r4, r2
 8006d1c:	b133      	cbz	r3, 8006d2c <__sprint_r+0x16>
 8006d1e:	f000 fd05 	bl	800772c <__sfvwrite_r>
 8006d22:	2300      	movs	r3, #0
 8006d24:	60a3      	str	r3, [r4, #8]
 8006d26:	2300      	movs	r3, #0
 8006d28:	6063      	str	r3, [r4, #4]
 8006d2a:	bd10      	pop	{r4, pc}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	e7fa      	b.n	8006d26 <__sprint_r+0x10>

08006d30 <_vfiprintf_r>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	460d      	mov	r5, r1
 8006d36:	4614      	mov	r4, r2
 8006d38:	4698      	mov	r8, r3
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	b09d      	sub	sp, #116	@ 0x74
 8006d3e:	b118      	cbz	r0, 8006d48 <_vfiprintf_r+0x18>
 8006d40:	6a03      	ldr	r3, [r0, #32]
 8006d42:	b90b      	cbnz	r3, 8006d48 <_vfiprintf_r+0x18>
 8006d44:	f7ff feb2 	bl	8006aac <__sinit>
 8006d48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d4a:	07d9      	lsls	r1, r3, #31
 8006d4c:	d405      	bmi.n	8006d5a <_vfiprintf_r+0x2a>
 8006d4e:	89ab      	ldrh	r3, [r5, #12]
 8006d50:	059a      	lsls	r2, r3, #22
 8006d52:	d402      	bmi.n	8006d5a <_vfiprintf_r+0x2a>
 8006d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d56:	f7ff ffb0 	bl	8006cba <__retarget_lock_acquire_recursive>
 8006d5a:	89ab      	ldrh	r3, [r5, #12]
 8006d5c:	071b      	lsls	r3, r3, #28
 8006d5e:	d501      	bpl.n	8006d64 <_vfiprintf_r+0x34>
 8006d60:	692b      	ldr	r3, [r5, #16]
 8006d62:	b99b      	cbnz	r3, 8006d8c <_vfiprintf_r+0x5c>
 8006d64:	4629      	mov	r1, r5
 8006d66:	4630      	mov	r0, r6
 8006d68:	f000 fc8a 	bl	8007680 <__swsetup_r>
 8006d6c:	b170      	cbz	r0, 8006d8c <_vfiprintf_r+0x5c>
 8006d6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d70:	07dc      	lsls	r4, r3, #31
 8006d72:	d504      	bpl.n	8006d7e <_vfiprintf_r+0x4e>
 8006d74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d78:	b01d      	add	sp, #116	@ 0x74
 8006d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7e:	89ab      	ldrh	r3, [r5, #12]
 8006d80:	0598      	lsls	r0, r3, #22
 8006d82:	d4f7      	bmi.n	8006d74 <_vfiprintf_r+0x44>
 8006d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d86:	f7ff ff9e 	bl	8006cc6 <__retarget_lock_release_recursive>
 8006d8a:	e7f3      	b.n	8006d74 <_vfiprintf_r+0x44>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d90:	2320      	movs	r3, #32
 8006d92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d96:	2330      	movs	r3, #48	@ 0x30
 8006d98:	f04f 0901 	mov.w	r9, #1
 8006d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006da0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006f4c <_vfiprintf_r+0x21c>
 8006da4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006da8:	4623      	mov	r3, r4
 8006daa:	469a      	mov	sl, r3
 8006dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006db0:	b10a      	cbz	r2, 8006db6 <_vfiprintf_r+0x86>
 8006db2:	2a25      	cmp	r2, #37	@ 0x25
 8006db4:	d1f9      	bne.n	8006daa <_vfiprintf_r+0x7a>
 8006db6:	ebba 0b04 	subs.w	fp, sl, r4
 8006dba:	d00b      	beq.n	8006dd4 <_vfiprintf_r+0xa4>
 8006dbc:	465b      	mov	r3, fp
 8006dbe:	4622      	mov	r2, r4
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f7ff ff95 	bl	8006cf2 <__sfputs_r>
 8006dc8:	3001      	adds	r0, #1
 8006dca:	f000 80a7 	beq.w	8006f1c <_vfiprintf_r+0x1ec>
 8006dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dd0:	445a      	add	r2, fp
 8006dd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 809f 	beq.w	8006f1c <_vfiprintf_r+0x1ec>
 8006dde:	2300      	movs	r3, #0
 8006de0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006de8:	f10a 0a01 	add.w	sl, sl, #1
 8006dec:	9304      	str	r3, [sp, #16]
 8006dee:	9307      	str	r3, [sp, #28]
 8006df0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006df4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006df6:	4654      	mov	r4, sl
 8006df8:	2205      	movs	r2, #5
 8006dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfe:	4853      	ldr	r0, [pc, #332]	@ (8006f4c <_vfiprintf_r+0x21c>)
 8006e00:	f000 ff32 	bl	8007c68 <memchr>
 8006e04:	9a04      	ldr	r2, [sp, #16]
 8006e06:	b9d8      	cbnz	r0, 8006e40 <_vfiprintf_r+0x110>
 8006e08:	06d1      	lsls	r1, r2, #27
 8006e0a:	bf44      	itt	mi
 8006e0c:	2320      	movmi	r3, #32
 8006e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e12:	0713      	lsls	r3, r2, #28
 8006e14:	bf44      	itt	mi
 8006e16:	232b      	movmi	r3, #43	@ 0x2b
 8006e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e22:	d015      	beq.n	8006e50 <_vfiprintf_r+0x120>
 8006e24:	4654      	mov	r4, sl
 8006e26:	2000      	movs	r0, #0
 8006e28:	f04f 0c0a 	mov.w	ip, #10
 8006e2c:	9a07      	ldr	r2, [sp, #28]
 8006e2e:	4621      	mov	r1, r4
 8006e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e34:	3b30      	subs	r3, #48	@ 0x30
 8006e36:	2b09      	cmp	r3, #9
 8006e38:	d94b      	bls.n	8006ed2 <_vfiprintf_r+0x1a2>
 8006e3a:	b1b0      	cbz	r0, 8006e6a <_vfiprintf_r+0x13a>
 8006e3c:	9207      	str	r2, [sp, #28]
 8006e3e:	e014      	b.n	8006e6a <_vfiprintf_r+0x13a>
 8006e40:	eba0 0308 	sub.w	r3, r0, r8
 8006e44:	fa09 f303 	lsl.w	r3, r9, r3
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	46a2      	mov	sl, r4
 8006e4c:	9304      	str	r3, [sp, #16]
 8006e4e:	e7d2      	b.n	8006df6 <_vfiprintf_r+0xc6>
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	1d19      	adds	r1, r3, #4
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	9103      	str	r1, [sp, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	bfbb      	ittet	lt
 8006e5c:	425b      	neglt	r3, r3
 8006e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e62:	9307      	strge	r3, [sp, #28]
 8006e64:	9307      	strlt	r3, [sp, #28]
 8006e66:	bfb8      	it	lt
 8006e68:	9204      	strlt	r2, [sp, #16]
 8006e6a:	7823      	ldrb	r3, [r4, #0]
 8006e6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e6e:	d10a      	bne.n	8006e86 <_vfiprintf_r+0x156>
 8006e70:	7863      	ldrb	r3, [r4, #1]
 8006e72:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e74:	d132      	bne.n	8006edc <_vfiprintf_r+0x1ac>
 8006e76:	9b03      	ldr	r3, [sp, #12]
 8006e78:	3402      	adds	r4, #2
 8006e7a:	1d1a      	adds	r2, r3, #4
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	9203      	str	r2, [sp, #12]
 8006e80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e84:	9305      	str	r3, [sp, #20]
 8006e86:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006f50 <_vfiprintf_r+0x220>
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	7821      	ldrb	r1, [r4, #0]
 8006e90:	f000 feea 	bl	8007c68 <memchr>
 8006e94:	b138      	cbz	r0, 8006ea6 <_vfiprintf_r+0x176>
 8006e96:	2240      	movs	r2, #64	@ 0x40
 8006e98:	9b04      	ldr	r3, [sp, #16]
 8006e9a:	eba0 000a 	sub.w	r0, r0, sl
 8006e9e:	4082      	lsls	r2, r0
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	3401      	adds	r4, #1
 8006ea4:	9304      	str	r3, [sp, #16]
 8006ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eaa:	2206      	movs	r2, #6
 8006eac:	4829      	ldr	r0, [pc, #164]	@ (8006f54 <_vfiprintf_r+0x224>)
 8006eae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006eb2:	f000 fed9 	bl	8007c68 <memchr>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d03f      	beq.n	8006f3a <_vfiprintf_r+0x20a>
 8006eba:	4b27      	ldr	r3, [pc, #156]	@ (8006f58 <_vfiprintf_r+0x228>)
 8006ebc:	bb1b      	cbnz	r3, 8006f06 <_vfiprintf_r+0x1d6>
 8006ebe:	9b03      	ldr	r3, [sp, #12]
 8006ec0:	3307      	adds	r3, #7
 8006ec2:	f023 0307 	bic.w	r3, r3, #7
 8006ec6:	3308      	adds	r3, #8
 8006ec8:	9303      	str	r3, [sp, #12]
 8006eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ecc:	443b      	add	r3, r7
 8006ece:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ed0:	e76a      	b.n	8006da8 <_vfiprintf_r+0x78>
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eda:	e7a8      	b.n	8006e2e <_vfiprintf_r+0xfe>
 8006edc:	2300      	movs	r3, #0
 8006ede:	f04f 0c0a 	mov.w	ip, #10
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	3401      	adds	r4, #1
 8006ee6:	9305      	str	r3, [sp, #20]
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eee:	3a30      	subs	r2, #48	@ 0x30
 8006ef0:	2a09      	cmp	r2, #9
 8006ef2:	d903      	bls.n	8006efc <_vfiprintf_r+0x1cc>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0c6      	beq.n	8006e86 <_vfiprintf_r+0x156>
 8006ef8:	9105      	str	r1, [sp, #20]
 8006efa:	e7c4      	b.n	8006e86 <_vfiprintf_r+0x156>
 8006efc:	4604      	mov	r4, r0
 8006efe:	2301      	movs	r3, #1
 8006f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f04:	e7f0      	b.n	8006ee8 <_vfiprintf_r+0x1b8>
 8006f06:	ab03      	add	r3, sp, #12
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	462a      	mov	r2, r5
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	4b13      	ldr	r3, [pc, #76]	@ (8006f5c <_vfiprintf_r+0x22c>)
 8006f10:	a904      	add	r1, sp, #16
 8006f12:	f3af 8000 	nop.w
 8006f16:	4607      	mov	r7, r0
 8006f18:	1c78      	adds	r0, r7, #1
 8006f1a:	d1d6      	bne.n	8006eca <_vfiprintf_r+0x19a>
 8006f1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f1e:	07d9      	lsls	r1, r3, #31
 8006f20:	d405      	bmi.n	8006f2e <_vfiprintf_r+0x1fe>
 8006f22:	89ab      	ldrh	r3, [r5, #12]
 8006f24:	059a      	lsls	r2, r3, #22
 8006f26:	d402      	bmi.n	8006f2e <_vfiprintf_r+0x1fe>
 8006f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f2a:	f7ff fecc 	bl	8006cc6 <__retarget_lock_release_recursive>
 8006f2e:	89ab      	ldrh	r3, [r5, #12]
 8006f30:	065b      	lsls	r3, r3, #25
 8006f32:	f53f af1f 	bmi.w	8006d74 <_vfiprintf_r+0x44>
 8006f36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f38:	e71e      	b.n	8006d78 <_vfiprintf_r+0x48>
 8006f3a:	ab03      	add	r3, sp, #12
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	462a      	mov	r2, r5
 8006f40:	4630      	mov	r0, r6
 8006f42:	4b06      	ldr	r3, [pc, #24]	@ (8006f5c <_vfiprintf_r+0x22c>)
 8006f44:	a904      	add	r1, sp, #16
 8006f46:	f000 f929 	bl	800719c <_printf_i>
 8006f4a:	e7e4      	b.n	8006f16 <_vfiprintf_r+0x1e6>
 8006f4c:	08007ed4 	.word	0x08007ed4
 8006f50:	08007eda 	.word	0x08007eda
 8006f54:	08007ede 	.word	0x08007ede
 8006f58:	00000000 	.word	0x00000000
 8006f5c:	08006cf3 	.word	0x08006cf3

08006f60 <vfiprintf>:
 8006f60:	4613      	mov	r3, r2
 8006f62:	460a      	mov	r2, r1
 8006f64:	4601      	mov	r1, r0
 8006f66:	4802      	ldr	r0, [pc, #8]	@ (8006f70 <vfiprintf+0x10>)
 8006f68:	6800      	ldr	r0, [r0, #0]
 8006f6a:	f7ff bee1 	b.w	8006d30 <_vfiprintf_r>
 8006f6e:	bf00      	nop
 8006f70:	20000020 	.word	0x20000020

08006f74 <sbrk_aligned>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	4e0f      	ldr	r6, [pc, #60]	@ (8006fb4 <sbrk_aligned+0x40>)
 8006f78:	460c      	mov	r4, r1
 8006f7a:	6831      	ldr	r1, [r6, #0]
 8006f7c:	4605      	mov	r5, r0
 8006f7e:	b911      	cbnz	r1, 8006f86 <sbrk_aligned+0x12>
 8006f80:	f000 fdd0 	bl	8007b24 <_sbrk_r>
 8006f84:	6030      	str	r0, [r6, #0]
 8006f86:	4621      	mov	r1, r4
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f000 fdcb 	bl	8007b24 <_sbrk_r>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	d103      	bne.n	8006f9a <sbrk_aligned+0x26>
 8006f92:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006f96:	4620      	mov	r0, r4
 8006f98:	bd70      	pop	{r4, r5, r6, pc}
 8006f9a:	1cc4      	adds	r4, r0, #3
 8006f9c:	f024 0403 	bic.w	r4, r4, #3
 8006fa0:	42a0      	cmp	r0, r4
 8006fa2:	d0f8      	beq.n	8006f96 <sbrk_aligned+0x22>
 8006fa4:	1a21      	subs	r1, r4, r0
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f000 fdbc 	bl	8007b24 <_sbrk_r>
 8006fac:	3001      	adds	r0, #1
 8006fae:	d1f2      	bne.n	8006f96 <sbrk_aligned+0x22>
 8006fb0:	e7ef      	b.n	8006f92 <sbrk_aligned+0x1e>
 8006fb2:	bf00      	nop
 8006fb4:	20000244 	.word	0x20000244

08006fb8 <_malloc_r>:
 8006fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fbc:	1ccd      	adds	r5, r1, #3
 8006fbe:	f025 0503 	bic.w	r5, r5, #3
 8006fc2:	3508      	adds	r5, #8
 8006fc4:	2d0c      	cmp	r5, #12
 8006fc6:	bf38      	it	cc
 8006fc8:	250c      	movcc	r5, #12
 8006fca:	2d00      	cmp	r5, #0
 8006fcc:	4606      	mov	r6, r0
 8006fce:	db01      	blt.n	8006fd4 <_malloc_r+0x1c>
 8006fd0:	42a9      	cmp	r1, r5
 8006fd2:	d904      	bls.n	8006fde <_malloc_r+0x26>
 8006fd4:	230c      	movs	r3, #12
 8006fd6:	6033      	str	r3, [r6, #0]
 8006fd8:	2000      	movs	r0, #0
 8006fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070b4 <_malloc_r+0xfc>
 8006fe2:	f000 fab5 	bl	8007550 <__malloc_lock>
 8006fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8006fea:	461c      	mov	r4, r3
 8006fec:	bb44      	cbnz	r4, 8007040 <_malloc_r+0x88>
 8006fee:	4629      	mov	r1, r5
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f7ff ffbf 	bl	8006f74 <sbrk_aligned>
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	d158      	bne.n	80070ae <_malloc_r+0xf6>
 8006ffc:	f8d8 4000 	ldr.w	r4, [r8]
 8007000:	4627      	mov	r7, r4
 8007002:	2f00      	cmp	r7, #0
 8007004:	d143      	bne.n	800708e <_malloc_r+0xd6>
 8007006:	2c00      	cmp	r4, #0
 8007008:	d04b      	beq.n	80070a2 <_malloc_r+0xea>
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	4639      	mov	r1, r7
 800700e:	4630      	mov	r0, r6
 8007010:	eb04 0903 	add.w	r9, r4, r3
 8007014:	f000 fd86 	bl	8007b24 <_sbrk_r>
 8007018:	4581      	cmp	r9, r0
 800701a:	d142      	bne.n	80070a2 <_malloc_r+0xea>
 800701c:	6821      	ldr	r1, [r4, #0]
 800701e:	4630      	mov	r0, r6
 8007020:	1a6d      	subs	r5, r5, r1
 8007022:	4629      	mov	r1, r5
 8007024:	f7ff ffa6 	bl	8006f74 <sbrk_aligned>
 8007028:	3001      	adds	r0, #1
 800702a:	d03a      	beq.n	80070a2 <_malloc_r+0xea>
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	442b      	add	r3, r5
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	f8d8 3000 	ldr.w	r3, [r8]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	bb62      	cbnz	r2, 8007094 <_malloc_r+0xdc>
 800703a:	f8c8 7000 	str.w	r7, [r8]
 800703e:	e00f      	b.n	8007060 <_malloc_r+0xa8>
 8007040:	6822      	ldr	r2, [r4, #0]
 8007042:	1b52      	subs	r2, r2, r5
 8007044:	d420      	bmi.n	8007088 <_malloc_r+0xd0>
 8007046:	2a0b      	cmp	r2, #11
 8007048:	d917      	bls.n	800707a <_malloc_r+0xc2>
 800704a:	1961      	adds	r1, r4, r5
 800704c:	42a3      	cmp	r3, r4
 800704e:	6025      	str	r5, [r4, #0]
 8007050:	bf18      	it	ne
 8007052:	6059      	strne	r1, [r3, #4]
 8007054:	6863      	ldr	r3, [r4, #4]
 8007056:	bf08      	it	eq
 8007058:	f8c8 1000 	streq.w	r1, [r8]
 800705c:	5162      	str	r2, [r4, r5]
 800705e:	604b      	str	r3, [r1, #4]
 8007060:	4630      	mov	r0, r6
 8007062:	f000 fa7b 	bl	800755c <__malloc_unlock>
 8007066:	f104 000b 	add.w	r0, r4, #11
 800706a:	1d23      	adds	r3, r4, #4
 800706c:	f020 0007 	bic.w	r0, r0, #7
 8007070:	1ac2      	subs	r2, r0, r3
 8007072:	bf1c      	itt	ne
 8007074:	1a1b      	subne	r3, r3, r0
 8007076:	50a3      	strne	r3, [r4, r2]
 8007078:	e7af      	b.n	8006fda <_malloc_r+0x22>
 800707a:	6862      	ldr	r2, [r4, #4]
 800707c:	42a3      	cmp	r3, r4
 800707e:	bf0c      	ite	eq
 8007080:	f8c8 2000 	streq.w	r2, [r8]
 8007084:	605a      	strne	r2, [r3, #4]
 8007086:	e7eb      	b.n	8007060 <_malloc_r+0xa8>
 8007088:	4623      	mov	r3, r4
 800708a:	6864      	ldr	r4, [r4, #4]
 800708c:	e7ae      	b.n	8006fec <_malloc_r+0x34>
 800708e:	463c      	mov	r4, r7
 8007090:	687f      	ldr	r7, [r7, #4]
 8007092:	e7b6      	b.n	8007002 <_malloc_r+0x4a>
 8007094:	461a      	mov	r2, r3
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	42a3      	cmp	r3, r4
 800709a:	d1fb      	bne.n	8007094 <_malloc_r+0xdc>
 800709c:	2300      	movs	r3, #0
 800709e:	6053      	str	r3, [r2, #4]
 80070a0:	e7de      	b.n	8007060 <_malloc_r+0xa8>
 80070a2:	230c      	movs	r3, #12
 80070a4:	4630      	mov	r0, r6
 80070a6:	6033      	str	r3, [r6, #0]
 80070a8:	f000 fa58 	bl	800755c <__malloc_unlock>
 80070ac:	e794      	b.n	8006fd8 <_malloc_r+0x20>
 80070ae:	6005      	str	r5, [r0, #0]
 80070b0:	e7d6      	b.n	8007060 <_malloc_r+0xa8>
 80070b2:	bf00      	nop
 80070b4:	20000248 	.word	0x20000248

080070b8 <_printf_common>:
 80070b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070bc:	4616      	mov	r6, r2
 80070be:	4698      	mov	r8, r3
 80070c0:	688a      	ldr	r2, [r1, #8]
 80070c2:	690b      	ldr	r3, [r1, #16]
 80070c4:	4607      	mov	r7, r0
 80070c6:	4293      	cmp	r3, r2
 80070c8:	bfb8      	it	lt
 80070ca:	4613      	movlt	r3, r2
 80070cc:	6033      	str	r3, [r6, #0]
 80070ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070d2:	460c      	mov	r4, r1
 80070d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070d8:	b10a      	cbz	r2, 80070de <_printf_common+0x26>
 80070da:	3301      	adds	r3, #1
 80070dc:	6033      	str	r3, [r6, #0]
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	0699      	lsls	r1, r3, #26
 80070e2:	bf42      	ittt	mi
 80070e4:	6833      	ldrmi	r3, [r6, #0]
 80070e6:	3302      	addmi	r3, #2
 80070e8:	6033      	strmi	r3, [r6, #0]
 80070ea:	6825      	ldr	r5, [r4, #0]
 80070ec:	f015 0506 	ands.w	r5, r5, #6
 80070f0:	d106      	bne.n	8007100 <_printf_common+0x48>
 80070f2:	f104 0a19 	add.w	sl, r4, #25
 80070f6:	68e3      	ldr	r3, [r4, #12]
 80070f8:	6832      	ldr	r2, [r6, #0]
 80070fa:	1a9b      	subs	r3, r3, r2
 80070fc:	42ab      	cmp	r3, r5
 80070fe:	dc2b      	bgt.n	8007158 <_printf_common+0xa0>
 8007100:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007104:	6822      	ldr	r2, [r4, #0]
 8007106:	3b00      	subs	r3, #0
 8007108:	bf18      	it	ne
 800710a:	2301      	movne	r3, #1
 800710c:	0692      	lsls	r2, r2, #26
 800710e:	d430      	bmi.n	8007172 <_printf_common+0xba>
 8007110:	4641      	mov	r1, r8
 8007112:	4638      	mov	r0, r7
 8007114:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007118:	47c8      	blx	r9
 800711a:	3001      	adds	r0, #1
 800711c:	d023      	beq.n	8007166 <_printf_common+0xae>
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	6922      	ldr	r2, [r4, #16]
 8007122:	f003 0306 	and.w	r3, r3, #6
 8007126:	2b04      	cmp	r3, #4
 8007128:	bf14      	ite	ne
 800712a:	2500      	movne	r5, #0
 800712c:	6833      	ldreq	r3, [r6, #0]
 800712e:	f04f 0600 	mov.w	r6, #0
 8007132:	bf08      	it	eq
 8007134:	68e5      	ldreq	r5, [r4, #12]
 8007136:	f104 041a 	add.w	r4, r4, #26
 800713a:	bf08      	it	eq
 800713c:	1aed      	subeq	r5, r5, r3
 800713e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007142:	bf08      	it	eq
 8007144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007148:	4293      	cmp	r3, r2
 800714a:	bfc4      	itt	gt
 800714c:	1a9b      	subgt	r3, r3, r2
 800714e:	18ed      	addgt	r5, r5, r3
 8007150:	42b5      	cmp	r5, r6
 8007152:	d11a      	bne.n	800718a <_printf_common+0xd2>
 8007154:	2000      	movs	r0, #0
 8007156:	e008      	b.n	800716a <_printf_common+0xb2>
 8007158:	2301      	movs	r3, #1
 800715a:	4652      	mov	r2, sl
 800715c:	4641      	mov	r1, r8
 800715e:	4638      	mov	r0, r7
 8007160:	47c8      	blx	r9
 8007162:	3001      	adds	r0, #1
 8007164:	d103      	bne.n	800716e <_printf_common+0xb6>
 8007166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800716a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716e:	3501      	adds	r5, #1
 8007170:	e7c1      	b.n	80070f6 <_printf_common+0x3e>
 8007172:	2030      	movs	r0, #48	@ 0x30
 8007174:	18e1      	adds	r1, r4, r3
 8007176:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007180:	4422      	add	r2, r4
 8007182:	3302      	adds	r3, #2
 8007184:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007188:	e7c2      	b.n	8007110 <_printf_common+0x58>
 800718a:	2301      	movs	r3, #1
 800718c:	4622      	mov	r2, r4
 800718e:	4641      	mov	r1, r8
 8007190:	4638      	mov	r0, r7
 8007192:	47c8      	blx	r9
 8007194:	3001      	adds	r0, #1
 8007196:	d0e6      	beq.n	8007166 <_printf_common+0xae>
 8007198:	3601      	adds	r6, #1
 800719a:	e7d9      	b.n	8007150 <_printf_common+0x98>

0800719c <_printf_i>:
 800719c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	7e0f      	ldrb	r7, [r1, #24]
 80071a2:	4691      	mov	r9, r2
 80071a4:	2f78      	cmp	r7, #120	@ 0x78
 80071a6:	4680      	mov	r8, r0
 80071a8:	460c      	mov	r4, r1
 80071aa:	469a      	mov	sl, r3
 80071ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071b2:	d807      	bhi.n	80071c4 <_printf_i+0x28>
 80071b4:	2f62      	cmp	r7, #98	@ 0x62
 80071b6:	d80a      	bhi.n	80071ce <_printf_i+0x32>
 80071b8:	2f00      	cmp	r7, #0
 80071ba:	f000 80d1 	beq.w	8007360 <_printf_i+0x1c4>
 80071be:	2f58      	cmp	r7, #88	@ 0x58
 80071c0:	f000 80b8 	beq.w	8007334 <_printf_i+0x198>
 80071c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071cc:	e03a      	b.n	8007244 <_printf_i+0xa8>
 80071ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071d2:	2b15      	cmp	r3, #21
 80071d4:	d8f6      	bhi.n	80071c4 <_printf_i+0x28>
 80071d6:	a101      	add	r1, pc, #4	@ (adr r1, 80071dc <_printf_i+0x40>)
 80071d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071dc:	08007235 	.word	0x08007235
 80071e0:	08007249 	.word	0x08007249
 80071e4:	080071c5 	.word	0x080071c5
 80071e8:	080071c5 	.word	0x080071c5
 80071ec:	080071c5 	.word	0x080071c5
 80071f0:	080071c5 	.word	0x080071c5
 80071f4:	08007249 	.word	0x08007249
 80071f8:	080071c5 	.word	0x080071c5
 80071fc:	080071c5 	.word	0x080071c5
 8007200:	080071c5 	.word	0x080071c5
 8007204:	080071c5 	.word	0x080071c5
 8007208:	08007347 	.word	0x08007347
 800720c:	08007273 	.word	0x08007273
 8007210:	08007301 	.word	0x08007301
 8007214:	080071c5 	.word	0x080071c5
 8007218:	080071c5 	.word	0x080071c5
 800721c:	08007369 	.word	0x08007369
 8007220:	080071c5 	.word	0x080071c5
 8007224:	08007273 	.word	0x08007273
 8007228:	080071c5 	.word	0x080071c5
 800722c:	080071c5 	.word	0x080071c5
 8007230:	08007309 	.word	0x08007309
 8007234:	6833      	ldr	r3, [r6, #0]
 8007236:	1d1a      	adds	r2, r3, #4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6032      	str	r2, [r6, #0]
 800723c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007240:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007244:	2301      	movs	r3, #1
 8007246:	e09c      	b.n	8007382 <_printf_i+0x1e6>
 8007248:	6833      	ldr	r3, [r6, #0]
 800724a:	6820      	ldr	r0, [r4, #0]
 800724c:	1d19      	adds	r1, r3, #4
 800724e:	6031      	str	r1, [r6, #0]
 8007250:	0606      	lsls	r6, r0, #24
 8007252:	d501      	bpl.n	8007258 <_printf_i+0xbc>
 8007254:	681d      	ldr	r5, [r3, #0]
 8007256:	e003      	b.n	8007260 <_printf_i+0xc4>
 8007258:	0645      	lsls	r5, r0, #25
 800725a:	d5fb      	bpl.n	8007254 <_printf_i+0xb8>
 800725c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007260:	2d00      	cmp	r5, #0
 8007262:	da03      	bge.n	800726c <_printf_i+0xd0>
 8007264:	232d      	movs	r3, #45	@ 0x2d
 8007266:	426d      	negs	r5, r5
 8007268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800726c:	230a      	movs	r3, #10
 800726e:	4858      	ldr	r0, [pc, #352]	@ (80073d0 <_printf_i+0x234>)
 8007270:	e011      	b.n	8007296 <_printf_i+0xfa>
 8007272:	6821      	ldr	r1, [r4, #0]
 8007274:	6833      	ldr	r3, [r6, #0]
 8007276:	0608      	lsls	r0, r1, #24
 8007278:	f853 5b04 	ldr.w	r5, [r3], #4
 800727c:	d402      	bmi.n	8007284 <_printf_i+0xe8>
 800727e:	0649      	lsls	r1, r1, #25
 8007280:	bf48      	it	mi
 8007282:	b2ad      	uxthmi	r5, r5
 8007284:	2f6f      	cmp	r7, #111	@ 0x6f
 8007286:	6033      	str	r3, [r6, #0]
 8007288:	bf14      	ite	ne
 800728a:	230a      	movne	r3, #10
 800728c:	2308      	moveq	r3, #8
 800728e:	4850      	ldr	r0, [pc, #320]	@ (80073d0 <_printf_i+0x234>)
 8007290:	2100      	movs	r1, #0
 8007292:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007296:	6866      	ldr	r6, [r4, #4]
 8007298:	2e00      	cmp	r6, #0
 800729a:	60a6      	str	r6, [r4, #8]
 800729c:	db05      	blt.n	80072aa <_printf_i+0x10e>
 800729e:	6821      	ldr	r1, [r4, #0]
 80072a0:	432e      	orrs	r6, r5
 80072a2:	f021 0104 	bic.w	r1, r1, #4
 80072a6:	6021      	str	r1, [r4, #0]
 80072a8:	d04b      	beq.n	8007342 <_printf_i+0x1a6>
 80072aa:	4616      	mov	r6, r2
 80072ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80072b0:	fb03 5711 	mls	r7, r3, r1, r5
 80072b4:	5dc7      	ldrb	r7, [r0, r7]
 80072b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072ba:	462f      	mov	r7, r5
 80072bc:	42bb      	cmp	r3, r7
 80072be:	460d      	mov	r5, r1
 80072c0:	d9f4      	bls.n	80072ac <_printf_i+0x110>
 80072c2:	2b08      	cmp	r3, #8
 80072c4:	d10b      	bne.n	80072de <_printf_i+0x142>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	07df      	lsls	r7, r3, #31
 80072ca:	d508      	bpl.n	80072de <_printf_i+0x142>
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	6861      	ldr	r1, [r4, #4]
 80072d0:	4299      	cmp	r1, r3
 80072d2:	bfde      	ittt	le
 80072d4:	2330      	movle	r3, #48	@ 0x30
 80072d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80072de:	1b92      	subs	r2, r2, r6
 80072e0:	6122      	str	r2, [r4, #16]
 80072e2:	464b      	mov	r3, r9
 80072e4:	4621      	mov	r1, r4
 80072e6:	4640      	mov	r0, r8
 80072e8:	f8cd a000 	str.w	sl, [sp]
 80072ec:	aa03      	add	r2, sp, #12
 80072ee:	f7ff fee3 	bl	80070b8 <_printf_common>
 80072f2:	3001      	adds	r0, #1
 80072f4:	d14a      	bne.n	800738c <_printf_i+0x1f0>
 80072f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072fa:	b004      	add	sp, #16
 80072fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	f043 0320 	orr.w	r3, r3, #32
 8007306:	6023      	str	r3, [r4, #0]
 8007308:	2778      	movs	r7, #120	@ 0x78
 800730a:	4832      	ldr	r0, [pc, #200]	@ (80073d4 <_printf_i+0x238>)
 800730c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	6831      	ldr	r1, [r6, #0]
 8007314:	061f      	lsls	r7, r3, #24
 8007316:	f851 5b04 	ldr.w	r5, [r1], #4
 800731a:	d402      	bmi.n	8007322 <_printf_i+0x186>
 800731c:	065f      	lsls	r7, r3, #25
 800731e:	bf48      	it	mi
 8007320:	b2ad      	uxthmi	r5, r5
 8007322:	6031      	str	r1, [r6, #0]
 8007324:	07d9      	lsls	r1, r3, #31
 8007326:	bf44      	itt	mi
 8007328:	f043 0320 	orrmi.w	r3, r3, #32
 800732c:	6023      	strmi	r3, [r4, #0]
 800732e:	b11d      	cbz	r5, 8007338 <_printf_i+0x19c>
 8007330:	2310      	movs	r3, #16
 8007332:	e7ad      	b.n	8007290 <_printf_i+0xf4>
 8007334:	4826      	ldr	r0, [pc, #152]	@ (80073d0 <_printf_i+0x234>)
 8007336:	e7e9      	b.n	800730c <_printf_i+0x170>
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	f023 0320 	bic.w	r3, r3, #32
 800733e:	6023      	str	r3, [r4, #0]
 8007340:	e7f6      	b.n	8007330 <_printf_i+0x194>
 8007342:	4616      	mov	r6, r2
 8007344:	e7bd      	b.n	80072c2 <_printf_i+0x126>
 8007346:	6833      	ldr	r3, [r6, #0]
 8007348:	6825      	ldr	r5, [r4, #0]
 800734a:	1d18      	adds	r0, r3, #4
 800734c:	6961      	ldr	r1, [r4, #20]
 800734e:	6030      	str	r0, [r6, #0]
 8007350:	062e      	lsls	r6, r5, #24
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	d501      	bpl.n	800735a <_printf_i+0x1be>
 8007356:	6019      	str	r1, [r3, #0]
 8007358:	e002      	b.n	8007360 <_printf_i+0x1c4>
 800735a:	0668      	lsls	r0, r5, #25
 800735c:	d5fb      	bpl.n	8007356 <_printf_i+0x1ba>
 800735e:	8019      	strh	r1, [r3, #0]
 8007360:	2300      	movs	r3, #0
 8007362:	4616      	mov	r6, r2
 8007364:	6123      	str	r3, [r4, #16]
 8007366:	e7bc      	b.n	80072e2 <_printf_i+0x146>
 8007368:	6833      	ldr	r3, [r6, #0]
 800736a:	2100      	movs	r1, #0
 800736c:	1d1a      	adds	r2, r3, #4
 800736e:	6032      	str	r2, [r6, #0]
 8007370:	681e      	ldr	r6, [r3, #0]
 8007372:	6862      	ldr	r2, [r4, #4]
 8007374:	4630      	mov	r0, r6
 8007376:	f000 fc77 	bl	8007c68 <memchr>
 800737a:	b108      	cbz	r0, 8007380 <_printf_i+0x1e4>
 800737c:	1b80      	subs	r0, r0, r6
 800737e:	6060      	str	r0, [r4, #4]
 8007380:	6863      	ldr	r3, [r4, #4]
 8007382:	6123      	str	r3, [r4, #16]
 8007384:	2300      	movs	r3, #0
 8007386:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800738a:	e7aa      	b.n	80072e2 <_printf_i+0x146>
 800738c:	4632      	mov	r2, r6
 800738e:	4649      	mov	r1, r9
 8007390:	4640      	mov	r0, r8
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	47d0      	blx	sl
 8007396:	3001      	adds	r0, #1
 8007398:	d0ad      	beq.n	80072f6 <_printf_i+0x15a>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	079b      	lsls	r3, r3, #30
 800739e:	d413      	bmi.n	80073c8 <_printf_i+0x22c>
 80073a0:	68e0      	ldr	r0, [r4, #12]
 80073a2:	9b03      	ldr	r3, [sp, #12]
 80073a4:	4298      	cmp	r0, r3
 80073a6:	bfb8      	it	lt
 80073a8:	4618      	movlt	r0, r3
 80073aa:	e7a6      	b.n	80072fa <_printf_i+0x15e>
 80073ac:	2301      	movs	r3, #1
 80073ae:	4632      	mov	r2, r6
 80073b0:	4649      	mov	r1, r9
 80073b2:	4640      	mov	r0, r8
 80073b4:	47d0      	blx	sl
 80073b6:	3001      	adds	r0, #1
 80073b8:	d09d      	beq.n	80072f6 <_printf_i+0x15a>
 80073ba:	3501      	adds	r5, #1
 80073bc:	68e3      	ldr	r3, [r4, #12]
 80073be:	9903      	ldr	r1, [sp, #12]
 80073c0:	1a5b      	subs	r3, r3, r1
 80073c2:	42ab      	cmp	r3, r5
 80073c4:	dcf2      	bgt.n	80073ac <_printf_i+0x210>
 80073c6:	e7eb      	b.n	80073a0 <_printf_i+0x204>
 80073c8:	2500      	movs	r5, #0
 80073ca:	f104 0619 	add.w	r6, r4, #25
 80073ce:	e7f5      	b.n	80073bc <_printf_i+0x220>
 80073d0:	08007ee5 	.word	0x08007ee5
 80073d4:	08007ef6 	.word	0x08007ef6

080073d8 <__sflush_r>:
 80073d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	0716      	lsls	r6, r2, #28
 80073e0:	4605      	mov	r5, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	d454      	bmi.n	8007490 <__sflush_r+0xb8>
 80073e6:	684b      	ldr	r3, [r1, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dc02      	bgt.n	80073f2 <__sflush_r+0x1a>
 80073ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	dd48      	ble.n	8007484 <__sflush_r+0xac>
 80073f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073f4:	2e00      	cmp	r6, #0
 80073f6:	d045      	beq.n	8007484 <__sflush_r+0xac>
 80073f8:	2300      	movs	r3, #0
 80073fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073fe:	682f      	ldr	r7, [r5, #0]
 8007400:	6a21      	ldr	r1, [r4, #32]
 8007402:	602b      	str	r3, [r5, #0]
 8007404:	d030      	beq.n	8007468 <__sflush_r+0x90>
 8007406:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	0759      	lsls	r1, r3, #29
 800740c:	d505      	bpl.n	800741a <__sflush_r+0x42>
 800740e:	6863      	ldr	r3, [r4, #4]
 8007410:	1ad2      	subs	r2, r2, r3
 8007412:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007414:	b10b      	cbz	r3, 800741a <__sflush_r+0x42>
 8007416:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007418:	1ad2      	subs	r2, r2, r3
 800741a:	2300      	movs	r3, #0
 800741c:	4628      	mov	r0, r5
 800741e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007420:	6a21      	ldr	r1, [r4, #32]
 8007422:	47b0      	blx	r6
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	d106      	bne.n	8007438 <__sflush_r+0x60>
 800742a:	6829      	ldr	r1, [r5, #0]
 800742c:	291d      	cmp	r1, #29
 800742e:	d82b      	bhi.n	8007488 <__sflush_r+0xb0>
 8007430:	4a28      	ldr	r2, [pc, #160]	@ (80074d4 <__sflush_r+0xfc>)
 8007432:	40ca      	lsrs	r2, r1
 8007434:	07d6      	lsls	r6, r2, #31
 8007436:	d527      	bpl.n	8007488 <__sflush_r+0xb0>
 8007438:	2200      	movs	r2, #0
 800743a:	6062      	str	r2, [r4, #4]
 800743c:	6922      	ldr	r2, [r4, #16]
 800743e:	04d9      	lsls	r1, r3, #19
 8007440:	6022      	str	r2, [r4, #0]
 8007442:	d504      	bpl.n	800744e <__sflush_r+0x76>
 8007444:	1c42      	adds	r2, r0, #1
 8007446:	d101      	bne.n	800744c <__sflush_r+0x74>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b903      	cbnz	r3, 800744e <__sflush_r+0x76>
 800744c:	6560      	str	r0, [r4, #84]	@ 0x54
 800744e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007450:	602f      	str	r7, [r5, #0]
 8007452:	b1b9      	cbz	r1, 8007484 <__sflush_r+0xac>
 8007454:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007458:	4299      	cmp	r1, r3
 800745a:	d002      	beq.n	8007462 <__sflush_r+0x8a>
 800745c:	4628      	mov	r0, r5
 800745e:	f000 fc1f 	bl	8007ca0 <_free_r>
 8007462:	2300      	movs	r3, #0
 8007464:	6363      	str	r3, [r4, #52]	@ 0x34
 8007466:	e00d      	b.n	8007484 <__sflush_r+0xac>
 8007468:	2301      	movs	r3, #1
 800746a:	4628      	mov	r0, r5
 800746c:	47b0      	blx	r6
 800746e:	4602      	mov	r2, r0
 8007470:	1c50      	adds	r0, r2, #1
 8007472:	d1c9      	bne.n	8007408 <__sflush_r+0x30>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0c6      	beq.n	8007408 <__sflush_r+0x30>
 800747a:	2b1d      	cmp	r3, #29
 800747c:	d001      	beq.n	8007482 <__sflush_r+0xaa>
 800747e:	2b16      	cmp	r3, #22
 8007480:	d11d      	bne.n	80074be <__sflush_r+0xe6>
 8007482:	602f      	str	r7, [r5, #0]
 8007484:	2000      	movs	r0, #0
 8007486:	e021      	b.n	80074cc <__sflush_r+0xf4>
 8007488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800748c:	b21b      	sxth	r3, r3
 800748e:	e01a      	b.n	80074c6 <__sflush_r+0xee>
 8007490:	690f      	ldr	r7, [r1, #16]
 8007492:	2f00      	cmp	r7, #0
 8007494:	d0f6      	beq.n	8007484 <__sflush_r+0xac>
 8007496:	0793      	lsls	r3, r2, #30
 8007498:	bf18      	it	ne
 800749a:	2300      	movne	r3, #0
 800749c:	680e      	ldr	r6, [r1, #0]
 800749e:	bf08      	it	eq
 80074a0:	694b      	ldreq	r3, [r1, #20]
 80074a2:	1bf6      	subs	r6, r6, r7
 80074a4:	600f      	str	r7, [r1, #0]
 80074a6:	608b      	str	r3, [r1, #8]
 80074a8:	2e00      	cmp	r6, #0
 80074aa:	ddeb      	ble.n	8007484 <__sflush_r+0xac>
 80074ac:	4633      	mov	r3, r6
 80074ae:	463a      	mov	r2, r7
 80074b0:	4628      	mov	r0, r5
 80074b2:	6a21      	ldr	r1, [r4, #32]
 80074b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80074b8:	47e0      	blx	ip
 80074ba:	2800      	cmp	r0, #0
 80074bc:	dc07      	bgt.n	80074ce <__sflush_r+0xf6>
 80074be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074ca:	81a3      	strh	r3, [r4, #12]
 80074cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ce:	4407      	add	r7, r0
 80074d0:	1a36      	subs	r6, r6, r0
 80074d2:	e7e9      	b.n	80074a8 <__sflush_r+0xd0>
 80074d4:	20400001 	.word	0x20400001

080074d8 <_fflush_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	690b      	ldr	r3, [r1, #16]
 80074dc:	4605      	mov	r5, r0
 80074de:	460c      	mov	r4, r1
 80074e0:	b913      	cbnz	r3, 80074e8 <_fflush_r+0x10>
 80074e2:	2500      	movs	r5, #0
 80074e4:	4628      	mov	r0, r5
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	b118      	cbz	r0, 80074f2 <_fflush_r+0x1a>
 80074ea:	6a03      	ldr	r3, [r0, #32]
 80074ec:	b90b      	cbnz	r3, 80074f2 <_fflush_r+0x1a>
 80074ee:	f7ff fadd 	bl	8006aac <__sinit>
 80074f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0f3      	beq.n	80074e2 <_fflush_r+0xa>
 80074fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074fc:	07d0      	lsls	r0, r2, #31
 80074fe:	d404      	bmi.n	800750a <_fflush_r+0x32>
 8007500:	0599      	lsls	r1, r3, #22
 8007502:	d402      	bmi.n	800750a <_fflush_r+0x32>
 8007504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007506:	f7ff fbd8 	bl	8006cba <__retarget_lock_acquire_recursive>
 800750a:	4628      	mov	r0, r5
 800750c:	4621      	mov	r1, r4
 800750e:	f7ff ff63 	bl	80073d8 <__sflush_r>
 8007512:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007514:	4605      	mov	r5, r0
 8007516:	07da      	lsls	r2, r3, #31
 8007518:	d4e4      	bmi.n	80074e4 <_fflush_r+0xc>
 800751a:	89a3      	ldrh	r3, [r4, #12]
 800751c:	059b      	lsls	r3, r3, #22
 800751e:	d4e1      	bmi.n	80074e4 <_fflush_r+0xc>
 8007520:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007522:	f7ff fbd0 	bl	8006cc6 <__retarget_lock_release_recursive>
 8007526:	e7dd      	b.n	80074e4 <_fflush_r+0xc>

08007528 <fflush>:
 8007528:	4601      	mov	r1, r0
 800752a:	b920      	cbnz	r0, 8007536 <fflush+0xe>
 800752c:	4a04      	ldr	r2, [pc, #16]	@ (8007540 <fflush+0x18>)
 800752e:	4905      	ldr	r1, [pc, #20]	@ (8007544 <fflush+0x1c>)
 8007530:	4805      	ldr	r0, [pc, #20]	@ (8007548 <fflush+0x20>)
 8007532:	f7ff baef 	b.w	8006b14 <_fwalk_sglue>
 8007536:	4b05      	ldr	r3, [pc, #20]	@ (800754c <fflush+0x24>)
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	f7ff bfcd 	b.w	80074d8 <_fflush_r>
 800753e:	bf00      	nop
 8007540:	20000014 	.word	0x20000014
 8007544:	080074d9 	.word	0x080074d9
 8007548:	20000024 	.word	0x20000024
 800754c:	20000020 	.word	0x20000020

08007550 <__malloc_lock>:
 8007550:	4801      	ldr	r0, [pc, #4]	@ (8007558 <__malloc_lock+0x8>)
 8007552:	f7ff bbb2 	b.w	8006cba <__retarget_lock_acquire_recursive>
 8007556:	bf00      	nop
 8007558:	20000240 	.word	0x20000240

0800755c <__malloc_unlock>:
 800755c:	4801      	ldr	r0, [pc, #4]	@ (8007564 <__malloc_unlock+0x8>)
 800755e:	f7ff bbb2 	b.w	8006cc6 <__retarget_lock_release_recursive>
 8007562:	bf00      	nop
 8007564:	20000240 	.word	0x20000240

08007568 <__sread>:
 8007568:	b510      	push	{r4, lr}
 800756a:	460c      	mov	r4, r1
 800756c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007570:	f000 fac6 	bl	8007b00 <_read_r>
 8007574:	2800      	cmp	r0, #0
 8007576:	bfab      	itete	ge
 8007578:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800757a:	89a3      	ldrhlt	r3, [r4, #12]
 800757c:	181b      	addge	r3, r3, r0
 800757e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007582:	bfac      	ite	ge
 8007584:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007586:	81a3      	strhlt	r3, [r4, #12]
 8007588:	bd10      	pop	{r4, pc}

0800758a <__seofread>:
 800758a:	2000      	movs	r0, #0
 800758c:	4770      	bx	lr

0800758e <__swrite>:
 800758e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007592:	461f      	mov	r7, r3
 8007594:	898b      	ldrh	r3, [r1, #12]
 8007596:	4605      	mov	r5, r0
 8007598:	05db      	lsls	r3, r3, #23
 800759a:	460c      	mov	r4, r1
 800759c:	4616      	mov	r6, r2
 800759e:	d505      	bpl.n	80075ac <__swrite+0x1e>
 80075a0:	2302      	movs	r3, #2
 80075a2:	2200      	movs	r2, #0
 80075a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a8:	f000 fa98 	bl	8007adc <_lseek_r>
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	4632      	mov	r2, r6
 80075b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075b4:	81a3      	strh	r3, [r4, #12]
 80075b6:	4628      	mov	r0, r5
 80075b8:	463b      	mov	r3, r7
 80075ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075c2:	f000 babf 	b.w	8007b44 <_write_r>

080075c6 <__sseek>:
 80075c6:	b510      	push	{r4, lr}
 80075c8:	460c      	mov	r4, r1
 80075ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ce:	f000 fa85 	bl	8007adc <_lseek_r>
 80075d2:	1c43      	adds	r3, r0, #1
 80075d4:	89a3      	ldrh	r3, [r4, #12]
 80075d6:	bf15      	itete	ne
 80075d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80075da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80075de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80075e2:	81a3      	strheq	r3, [r4, #12]
 80075e4:	bf18      	it	ne
 80075e6:	81a3      	strhne	r3, [r4, #12]
 80075e8:	bd10      	pop	{r4, pc}

080075ea <__sclose>:
 80075ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ee:	f000 babb 	b.w	8007b68 <_close_r>

080075f2 <__swbuf_r>:
 80075f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f4:	460e      	mov	r6, r1
 80075f6:	4614      	mov	r4, r2
 80075f8:	4605      	mov	r5, r0
 80075fa:	b118      	cbz	r0, 8007604 <__swbuf_r+0x12>
 80075fc:	6a03      	ldr	r3, [r0, #32]
 80075fe:	b90b      	cbnz	r3, 8007604 <__swbuf_r+0x12>
 8007600:	f7ff fa54 	bl	8006aac <__sinit>
 8007604:	69a3      	ldr	r3, [r4, #24]
 8007606:	60a3      	str	r3, [r4, #8]
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	071a      	lsls	r2, r3, #28
 800760c:	d501      	bpl.n	8007612 <__swbuf_r+0x20>
 800760e:	6923      	ldr	r3, [r4, #16]
 8007610:	b943      	cbnz	r3, 8007624 <__swbuf_r+0x32>
 8007612:	4621      	mov	r1, r4
 8007614:	4628      	mov	r0, r5
 8007616:	f000 f833 	bl	8007680 <__swsetup_r>
 800761a:	b118      	cbz	r0, 8007624 <__swbuf_r+0x32>
 800761c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007620:	4638      	mov	r0, r7
 8007622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	6922      	ldr	r2, [r4, #16]
 8007628:	b2f6      	uxtb	r6, r6
 800762a:	1a98      	subs	r0, r3, r2
 800762c:	6963      	ldr	r3, [r4, #20]
 800762e:	4637      	mov	r7, r6
 8007630:	4283      	cmp	r3, r0
 8007632:	dc05      	bgt.n	8007640 <__swbuf_r+0x4e>
 8007634:	4621      	mov	r1, r4
 8007636:	4628      	mov	r0, r5
 8007638:	f7ff ff4e 	bl	80074d8 <_fflush_r>
 800763c:	2800      	cmp	r0, #0
 800763e:	d1ed      	bne.n	800761c <__swbuf_r+0x2a>
 8007640:	68a3      	ldr	r3, [r4, #8]
 8007642:	3b01      	subs	r3, #1
 8007644:	60a3      	str	r3, [r4, #8]
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	6022      	str	r2, [r4, #0]
 800764c:	701e      	strb	r6, [r3, #0]
 800764e:	6962      	ldr	r2, [r4, #20]
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	429a      	cmp	r2, r3
 8007654:	d004      	beq.n	8007660 <__swbuf_r+0x6e>
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	07db      	lsls	r3, r3, #31
 800765a:	d5e1      	bpl.n	8007620 <__swbuf_r+0x2e>
 800765c:	2e0a      	cmp	r6, #10
 800765e:	d1df      	bne.n	8007620 <__swbuf_r+0x2e>
 8007660:	4621      	mov	r1, r4
 8007662:	4628      	mov	r0, r5
 8007664:	f7ff ff38 	bl	80074d8 <_fflush_r>
 8007668:	2800      	cmp	r0, #0
 800766a:	d0d9      	beq.n	8007620 <__swbuf_r+0x2e>
 800766c:	e7d6      	b.n	800761c <__swbuf_r+0x2a>
	...

08007670 <__swbuf>:
 8007670:	4b02      	ldr	r3, [pc, #8]	@ (800767c <__swbuf+0xc>)
 8007672:	460a      	mov	r2, r1
 8007674:	4601      	mov	r1, r0
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	f7ff bfbb 	b.w	80075f2 <__swbuf_r>
 800767c:	20000020 	.word	0x20000020

08007680 <__swsetup_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	4b29      	ldr	r3, [pc, #164]	@ (8007728 <__swsetup_r+0xa8>)
 8007684:	4605      	mov	r5, r0
 8007686:	6818      	ldr	r0, [r3, #0]
 8007688:	460c      	mov	r4, r1
 800768a:	b118      	cbz	r0, 8007694 <__swsetup_r+0x14>
 800768c:	6a03      	ldr	r3, [r0, #32]
 800768e:	b90b      	cbnz	r3, 8007694 <__swsetup_r+0x14>
 8007690:	f7ff fa0c 	bl	8006aac <__sinit>
 8007694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007698:	0719      	lsls	r1, r3, #28
 800769a:	d422      	bmi.n	80076e2 <__swsetup_r+0x62>
 800769c:	06da      	lsls	r2, r3, #27
 800769e:	d407      	bmi.n	80076b0 <__swsetup_r+0x30>
 80076a0:	2209      	movs	r2, #9
 80076a2:	602a      	str	r2, [r5, #0]
 80076a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076ac:	81a3      	strh	r3, [r4, #12]
 80076ae:	e033      	b.n	8007718 <__swsetup_r+0x98>
 80076b0:	0758      	lsls	r0, r3, #29
 80076b2:	d512      	bpl.n	80076da <__swsetup_r+0x5a>
 80076b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076b6:	b141      	cbz	r1, 80076ca <__swsetup_r+0x4a>
 80076b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076bc:	4299      	cmp	r1, r3
 80076be:	d002      	beq.n	80076c6 <__swsetup_r+0x46>
 80076c0:	4628      	mov	r0, r5
 80076c2:	f000 faed 	bl	8007ca0 <_free_r>
 80076c6:	2300      	movs	r3, #0
 80076c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076d0:	81a3      	strh	r3, [r4, #12]
 80076d2:	2300      	movs	r3, #0
 80076d4:	6063      	str	r3, [r4, #4]
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	f043 0308 	orr.w	r3, r3, #8
 80076e0:	81a3      	strh	r3, [r4, #12]
 80076e2:	6923      	ldr	r3, [r4, #16]
 80076e4:	b94b      	cbnz	r3, 80076fa <__swsetup_r+0x7a>
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80076ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076f0:	d003      	beq.n	80076fa <__swsetup_r+0x7a>
 80076f2:	4621      	mov	r1, r4
 80076f4:	4628      	mov	r0, r5
 80076f6:	f000 f98a 	bl	8007a0e <__smakebuf_r>
 80076fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076fe:	f013 0201 	ands.w	r2, r3, #1
 8007702:	d00a      	beq.n	800771a <__swsetup_r+0x9a>
 8007704:	2200      	movs	r2, #0
 8007706:	60a2      	str	r2, [r4, #8]
 8007708:	6962      	ldr	r2, [r4, #20]
 800770a:	4252      	negs	r2, r2
 800770c:	61a2      	str	r2, [r4, #24]
 800770e:	6922      	ldr	r2, [r4, #16]
 8007710:	b942      	cbnz	r2, 8007724 <__swsetup_r+0xa4>
 8007712:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007716:	d1c5      	bne.n	80076a4 <__swsetup_r+0x24>
 8007718:	bd38      	pop	{r3, r4, r5, pc}
 800771a:	0799      	lsls	r1, r3, #30
 800771c:	bf58      	it	pl
 800771e:	6962      	ldrpl	r2, [r4, #20]
 8007720:	60a2      	str	r2, [r4, #8]
 8007722:	e7f4      	b.n	800770e <__swsetup_r+0x8e>
 8007724:	2000      	movs	r0, #0
 8007726:	e7f7      	b.n	8007718 <__swsetup_r+0x98>
 8007728:	20000020 	.word	0x20000020

0800772c <__sfvwrite_r>:
 800772c:	6893      	ldr	r3, [r2, #8]
 800772e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007732:	4606      	mov	r6, r0
 8007734:	460c      	mov	r4, r1
 8007736:	4691      	mov	r9, r2
 8007738:	b91b      	cbnz	r3, 8007742 <__sfvwrite_r+0x16>
 800773a:	2000      	movs	r0, #0
 800773c:	b003      	add	sp, #12
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007742:	898b      	ldrh	r3, [r1, #12]
 8007744:	0718      	lsls	r0, r3, #28
 8007746:	d550      	bpl.n	80077ea <__sfvwrite_r+0xbe>
 8007748:	690b      	ldr	r3, [r1, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d04d      	beq.n	80077ea <__sfvwrite_r+0xbe>
 800774e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007752:	f8d9 8000 	ldr.w	r8, [r9]
 8007756:	f013 0702 	ands.w	r7, r3, #2
 800775a:	d16b      	bne.n	8007834 <__sfvwrite_r+0x108>
 800775c:	f013 0301 	ands.w	r3, r3, #1
 8007760:	f000 809c 	beq.w	800789c <__sfvwrite_r+0x170>
 8007764:	4638      	mov	r0, r7
 8007766:	46ba      	mov	sl, r7
 8007768:	46bb      	mov	fp, r7
 800776a:	f1bb 0f00 	cmp.w	fp, #0
 800776e:	f000 8103 	beq.w	8007978 <__sfvwrite_r+0x24c>
 8007772:	b950      	cbnz	r0, 800778a <__sfvwrite_r+0x5e>
 8007774:	465a      	mov	r2, fp
 8007776:	210a      	movs	r1, #10
 8007778:	4650      	mov	r0, sl
 800777a:	f000 fa75 	bl	8007c68 <memchr>
 800777e:	2800      	cmp	r0, #0
 8007780:	f000 8100 	beq.w	8007984 <__sfvwrite_r+0x258>
 8007784:	3001      	adds	r0, #1
 8007786:	eba0 070a 	sub.w	r7, r0, sl
 800778a:	6820      	ldr	r0, [r4, #0]
 800778c:	6921      	ldr	r1, [r4, #16]
 800778e:	455f      	cmp	r7, fp
 8007790:	463a      	mov	r2, r7
 8007792:	bf28      	it	cs
 8007794:	465a      	movcs	r2, fp
 8007796:	4288      	cmp	r0, r1
 8007798:	68a5      	ldr	r5, [r4, #8]
 800779a:	6963      	ldr	r3, [r4, #20]
 800779c:	f240 80f5 	bls.w	800798a <__sfvwrite_r+0x25e>
 80077a0:	441d      	add	r5, r3
 80077a2:	42aa      	cmp	r2, r5
 80077a4:	f340 80f1 	ble.w	800798a <__sfvwrite_r+0x25e>
 80077a8:	4651      	mov	r1, sl
 80077aa:	462a      	mov	r2, r5
 80077ac:	f000 f96b 	bl	8007a86 <memmove>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	4621      	mov	r1, r4
 80077b4:	442b      	add	r3, r5
 80077b6:	4630      	mov	r0, r6
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	f7ff fe8d 	bl	80074d8 <_fflush_r>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d167      	bne.n	8007892 <__sfvwrite_r+0x166>
 80077c2:	1b7f      	subs	r7, r7, r5
 80077c4:	f040 80f9 	bne.w	80079ba <__sfvwrite_r+0x28e>
 80077c8:	4621      	mov	r1, r4
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7ff fe84 	bl	80074d8 <_fflush_r>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d15e      	bne.n	8007892 <__sfvwrite_r+0x166>
 80077d4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80077d8:	44aa      	add	sl, r5
 80077da:	1b5b      	subs	r3, r3, r5
 80077dc:	ebab 0b05 	sub.w	fp, fp, r5
 80077e0:	f8c9 3008 	str.w	r3, [r9, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1c0      	bne.n	800776a <__sfvwrite_r+0x3e>
 80077e8:	e7a7      	b.n	800773a <__sfvwrite_r+0xe>
 80077ea:	4621      	mov	r1, r4
 80077ec:	4630      	mov	r0, r6
 80077ee:	f7ff ff47 	bl	8007680 <__swsetup_r>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d0ab      	beq.n	800774e <__sfvwrite_r+0x22>
 80077f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077fa:	e79f      	b.n	800773c <__sfvwrite_r+0x10>
 80077fc:	e9d8 a500 	ldrd	sl, r5, [r8]
 8007800:	f108 0808 	add.w	r8, r8, #8
 8007804:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8007808:	6a21      	ldr	r1, [r4, #32]
 800780a:	2d00      	cmp	r5, #0
 800780c:	d0f6      	beq.n	80077fc <__sfvwrite_r+0xd0>
 800780e:	42bd      	cmp	r5, r7
 8007810:	462b      	mov	r3, r5
 8007812:	4652      	mov	r2, sl
 8007814:	bf28      	it	cs
 8007816:	463b      	movcs	r3, r7
 8007818:	4630      	mov	r0, r6
 800781a:	47d8      	blx	fp
 800781c:	2800      	cmp	r0, #0
 800781e:	dd38      	ble.n	8007892 <__sfvwrite_r+0x166>
 8007820:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007824:	4482      	add	sl, r0
 8007826:	1a1b      	subs	r3, r3, r0
 8007828:	1a2d      	subs	r5, r5, r0
 800782a:	f8c9 3008 	str.w	r3, [r9, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e8      	bne.n	8007804 <__sfvwrite_r+0xd8>
 8007832:	e782      	b.n	800773a <__sfvwrite_r+0xe>
 8007834:	f04f 0a00 	mov.w	sl, #0
 8007838:	4f61      	ldr	r7, [pc, #388]	@ (80079c0 <__sfvwrite_r+0x294>)
 800783a:	4655      	mov	r5, sl
 800783c:	e7e2      	b.n	8007804 <__sfvwrite_r+0xd8>
 800783e:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8007842:	f108 0808 	add.w	r8, r8, #8
 8007846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800784a:	6820      	ldr	r0, [r4, #0]
 800784c:	68a2      	ldr	r2, [r4, #8]
 800784e:	f1ba 0f00 	cmp.w	sl, #0
 8007852:	d0f4      	beq.n	800783e <__sfvwrite_r+0x112>
 8007854:	0599      	lsls	r1, r3, #22
 8007856:	d563      	bpl.n	8007920 <__sfvwrite_r+0x1f4>
 8007858:	4552      	cmp	r2, sl
 800785a:	d836      	bhi.n	80078ca <__sfvwrite_r+0x19e>
 800785c:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8007860:	d033      	beq.n	80078ca <__sfvwrite_r+0x19e>
 8007862:	6921      	ldr	r1, [r4, #16]
 8007864:	6965      	ldr	r5, [r4, #20]
 8007866:	eba0 0b01 	sub.w	fp, r0, r1
 800786a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800786e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007872:	f10b 0201 	add.w	r2, fp, #1
 8007876:	106d      	asrs	r5, r5, #1
 8007878:	4452      	add	r2, sl
 800787a:	4295      	cmp	r5, r2
 800787c:	bf38      	it	cc
 800787e:	4615      	movcc	r5, r2
 8007880:	055b      	lsls	r3, r3, #21
 8007882:	d53d      	bpl.n	8007900 <__sfvwrite_r+0x1d4>
 8007884:	4629      	mov	r1, r5
 8007886:	4630      	mov	r0, r6
 8007888:	f7ff fb96 	bl	8006fb8 <_malloc_r>
 800788c:	b948      	cbnz	r0, 80078a2 <__sfvwrite_r+0x176>
 800788e:	230c      	movs	r3, #12
 8007890:	6033      	str	r3, [r6, #0]
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007898:	81a3      	strh	r3, [r4, #12]
 800789a:	e7ac      	b.n	80077f6 <__sfvwrite_r+0xca>
 800789c:	461f      	mov	r7, r3
 800789e:	469a      	mov	sl, r3
 80078a0:	e7d1      	b.n	8007846 <__sfvwrite_r+0x11a>
 80078a2:	465a      	mov	r2, fp
 80078a4:	6921      	ldr	r1, [r4, #16]
 80078a6:	9001      	str	r0, [sp, #4]
 80078a8:	f000 f9ec 	bl	8007c84 <memcpy>
 80078ac:	89a2      	ldrh	r2, [r4, #12]
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80078b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80078b8:	81a2      	strh	r2, [r4, #12]
 80078ba:	4652      	mov	r2, sl
 80078bc:	6123      	str	r3, [r4, #16]
 80078be:	6165      	str	r5, [r4, #20]
 80078c0:	445b      	add	r3, fp
 80078c2:	eba5 050b 	sub.w	r5, r5, fp
 80078c6:	6023      	str	r3, [r4, #0]
 80078c8:	60a5      	str	r5, [r4, #8]
 80078ca:	4552      	cmp	r2, sl
 80078cc:	bf28      	it	cs
 80078ce:	4652      	movcs	r2, sl
 80078d0:	4655      	mov	r5, sl
 80078d2:	4639      	mov	r1, r7
 80078d4:	6820      	ldr	r0, [r4, #0]
 80078d6:	9201      	str	r2, [sp, #4]
 80078d8:	f000 f8d5 	bl	8007a86 <memmove>
 80078dc:	68a3      	ldr	r3, [r4, #8]
 80078de:	9a01      	ldr	r2, [sp, #4]
 80078e0:	1a9b      	subs	r3, r3, r2
 80078e2:	60a3      	str	r3, [r4, #8]
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	4413      	add	r3, r2
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80078ee:	442f      	add	r7, r5
 80078f0:	1b5b      	subs	r3, r3, r5
 80078f2:	ebaa 0a05 	sub.w	sl, sl, r5
 80078f6:	f8c9 3008 	str.w	r3, [r9, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1a3      	bne.n	8007846 <__sfvwrite_r+0x11a>
 80078fe:	e71c      	b.n	800773a <__sfvwrite_r+0xe>
 8007900:	462a      	mov	r2, r5
 8007902:	4630      	mov	r0, r6
 8007904:	f000 fa14 	bl	8007d30 <_realloc_r>
 8007908:	4603      	mov	r3, r0
 800790a:	2800      	cmp	r0, #0
 800790c:	d1d5      	bne.n	80078ba <__sfvwrite_r+0x18e>
 800790e:	4630      	mov	r0, r6
 8007910:	6921      	ldr	r1, [r4, #16]
 8007912:	f000 f9c5 	bl	8007ca0 <_free_r>
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800791c:	81a3      	strh	r3, [r4, #12]
 800791e:	e7b6      	b.n	800788e <__sfvwrite_r+0x162>
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	4283      	cmp	r3, r0
 8007924:	d302      	bcc.n	800792c <__sfvwrite_r+0x200>
 8007926:	6961      	ldr	r1, [r4, #20]
 8007928:	4551      	cmp	r1, sl
 800792a:	d915      	bls.n	8007958 <__sfvwrite_r+0x22c>
 800792c:	4552      	cmp	r2, sl
 800792e:	bf28      	it	cs
 8007930:	4652      	movcs	r2, sl
 8007932:	4615      	mov	r5, r2
 8007934:	4639      	mov	r1, r7
 8007936:	f000 f8a6 	bl	8007a86 <memmove>
 800793a:	68a3      	ldr	r3, [r4, #8]
 800793c:	6822      	ldr	r2, [r4, #0]
 800793e:	1b5b      	subs	r3, r3, r5
 8007940:	442a      	add	r2, r5
 8007942:	60a3      	str	r3, [r4, #8]
 8007944:	6022      	str	r2, [r4, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1cf      	bne.n	80078ea <__sfvwrite_r+0x1be>
 800794a:	4621      	mov	r1, r4
 800794c:	4630      	mov	r0, r6
 800794e:	f7ff fdc3 	bl	80074d8 <_fflush_r>
 8007952:	2800      	cmp	r0, #0
 8007954:	d0c9      	beq.n	80078ea <__sfvwrite_r+0x1be>
 8007956:	e79c      	b.n	8007892 <__sfvwrite_r+0x166>
 8007958:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800795c:	4553      	cmp	r3, sl
 800795e:	bf28      	it	cs
 8007960:	4653      	movcs	r3, sl
 8007962:	fb93 f3f1 	sdiv	r3, r3, r1
 8007966:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8007968:	434b      	muls	r3, r1
 800796a:	463a      	mov	r2, r7
 800796c:	4630      	mov	r0, r6
 800796e:	6a21      	ldr	r1, [r4, #32]
 8007970:	47a8      	blx	r5
 8007972:	1e05      	subs	r5, r0, #0
 8007974:	dcb9      	bgt.n	80078ea <__sfvwrite_r+0x1be>
 8007976:	e78c      	b.n	8007892 <__sfvwrite_r+0x166>
 8007978:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800797c:	2000      	movs	r0, #0
 800797e:	f108 0808 	add.w	r8, r8, #8
 8007982:	e6f2      	b.n	800776a <__sfvwrite_r+0x3e>
 8007984:	f10b 0701 	add.w	r7, fp, #1
 8007988:	e6ff      	b.n	800778a <__sfvwrite_r+0x5e>
 800798a:	4293      	cmp	r3, r2
 800798c:	dc08      	bgt.n	80079a0 <__sfvwrite_r+0x274>
 800798e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8007990:	4652      	mov	r2, sl
 8007992:	4630      	mov	r0, r6
 8007994:	6a21      	ldr	r1, [r4, #32]
 8007996:	47a8      	blx	r5
 8007998:	1e05      	subs	r5, r0, #0
 800799a:	f73f af12 	bgt.w	80077c2 <__sfvwrite_r+0x96>
 800799e:	e778      	b.n	8007892 <__sfvwrite_r+0x166>
 80079a0:	4651      	mov	r1, sl
 80079a2:	9201      	str	r2, [sp, #4]
 80079a4:	f000 f86f 	bl	8007a86 <memmove>
 80079a8:	9a01      	ldr	r2, [sp, #4]
 80079aa:	68a3      	ldr	r3, [r4, #8]
 80079ac:	4615      	mov	r5, r2
 80079ae:	1a9b      	subs	r3, r3, r2
 80079b0:	60a3      	str	r3, [r4, #8]
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	4413      	add	r3, r2
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	e703      	b.n	80077c2 <__sfvwrite_r+0x96>
 80079ba:	2001      	movs	r0, #1
 80079bc:	e70a      	b.n	80077d4 <__sfvwrite_r+0xa8>
 80079be:	bf00      	nop
 80079c0:	7ffffc00 	.word	0x7ffffc00

080079c4 <__swhatbuf_r>:
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	460c      	mov	r4, r1
 80079c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079cc:	4615      	mov	r5, r2
 80079ce:	2900      	cmp	r1, #0
 80079d0:	461e      	mov	r6, r3
 80079d2:	b096      	sub	sp, #88	@ 0x58
 80079d4:	da0c      	bge.n	80079f0 <__swhatbuf_r+0x2c>
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	2100      	movs	r1, #0
 80079da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079de:	bf14      	ite	ne
 80079e0:	2340      	movne	r3, #64	@ 0x40
 80079e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079e6:	2000      	movs	r0, #0
 80079e8:	6031      	str	r1, [r6, #0]
 80079ea:	602b      	str	r3, [r5, #0]
 80079ec:	b016      	add	sp, #88	@ 0x58
 80079ee:	bd70      	pop	{r4, r5, r6, pc}
 80079f0:	466a      	mov	r2, sp
 80079f2:	f000 f927 	bl	8007c44 <_fstat_r>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	dbed      	blt.n	80079d6 <__swhatbuf_r+0x12>
 80079fa:	9901      	ldr	r1, [sp, #4]
 80079fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a00:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a04:	4259      	negs	r1, r3
 8007a06:	4159      	adcs	r1, r3
 8007a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a0c:	e7eb      	b.n	80079e6 <__swhatbuf_r+0x22>

08007a0e <__smakebuf_r>:
 8007a0e:	898b      	ldrh	r3, [r1, #12]
 8007a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a12:	079d      	lsls	r5, r3, #30
 8007a14:	4606      	mov	r6, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	d507      	bpl.n	8007a2a <__smakebuf_r+0x1c>
 8007a1a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a1e:	6023      	str	r3, [r4, #0]
 8007a20:	6123      	str	r3, [r4, #16]
 8007a22:	2301      	movs	r3, #1
 8007a24:	6163      	str	r3, [r4, #20]
 8007a26:	b003      	add	sp, #12
 8007a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a2a:	466a      	mov	r2, sp
 8007a2c:	ab01      	add	r3, sp, #4
 8007a2e:	f7ff ffc9 	bl	80079c4 <__swhatbuf_r>
 8007a32:	9f00      	ldr	r7, [sp, #0]
 8007a34:	4605      	mov	r5, r0
 8007a36:	4639      	mov	r1, r7
 8007a38:	4630      	mov	r0, r6
 8007a3a:	f7ff fabd 	bl	8006fb8 <_malloc_r>
 8007a3e:	b948      	cbnz	r0, 8007a54 <__smakebuf_r+0x46>
 8007a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a44:	059a      	lsls	r2, r3, #22
 8007a46:	d4ee      	bmi.n	8007a26 <__smakebuf_r+0x18>
 8007a48:	f023 0303 	bic.w	r3, r3, #3
 8007a4c:	f043 0302 	orr.w	r3, r3, #2
 8007a50:	81a3      	strh	r3, [r4, #12]
 8007a52:	e7e2      	b.n	8007a1a <__smakebuf_r+0xc>
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a5e:	81a3      	strh	r3, [r4, #12]
 8007a60:	9b01      	ldr	r3, [sp, #4]
 8007a62:	6020      	str	r0, [r4, #0]
 8007a64:	b15b      	cbz	r3, 8007a7e <__smakebuf_r+0x70>
 8007a66:	4630      	mov	r0, r6
 8007a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a6c:	f000 f826 	bl	8007abc <_isatty_r>
 8007a70:	b128      	cbz	r0, 8007a7e <__smakebuf_r+0x70>
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	f023 0303 	bic.w	r3, r3, #3
 8007a78:	f043 0301 	orr.w	r3, r3, #1
 8007a7c:	81a3      	strh	r3, [r4, #12]
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	431d      	orrs	r5, r3
 8007a82:	81a5      	strh	r5, [r4, #12]
 8007a84:	e7cf      	b.n	8007a26 <__smakebuf_r+0x18>

08007a86 <memmove>:
 8007a86:	4288      	cmp	r0, r1
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	eb01 0402 	add.w	r4, r1, r2
 8007a8e:	d902      	bls.n	8007a96 <memmove+0x10>
 8007a90:	4284      	cmp	r4, r0
 8007a92:	4623      	mov	r3, r4
 8007a94:	d807      	bhi.n	8007aa6 <memmove+0x20>
 8007a96:	1e43      	subs	r3, r0, #1
 8007a98:	42a1      	cmp	r1, r4
 8007a9a:	d008      	beq.n	8007aae <memmove+0x28>
 8007a9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aa0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aa4:	e7f8      	b.n	8007a98 <memmove+0x12>
 8007aa6:	4601      	mov	r1, r0
 8007aa8:	4402      	add	r2, r0
 8007aaa:	428a      	cmp	r2, r1
 8007aac:	d100      	bne.n	8007ab0 <memmove+0x2a>
 8007aae:	bd10      	pop	{r4, pc}
 8007ab0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ab4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ab8:	e7f7      	b.n	8007aaa <memmove+0x24>
	...

08007abc <_isatty_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	2300      	movs	r3, #0
 8007ac0:	4d05      	ldr	r5, [pc, #20]	@ (8007ad8 <_isatty_r+0x1c>)
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	602b      	str	r3, [r5, #0]
 8007ac8:	f7f8 fe37 	bl	800073a <_isatty>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_isatty_r+0x1a>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_isatty_r+0x1a>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	2000024c 	.word	0x2000024c

08007adc <_lseek_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4604      	mov	r4, r0
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	4d05      	ldr	r5, [pc, #20]	@ (8007afc <_lseek_r+0x20>)
 8007ae8:	602a      	str	r2, [r5, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	f7f8 fe2f 	bl	800074e <_lseek>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d102      	bne.n	8007afa <_lseek_r+0x1e>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	b103      	cbz	r3, 8007afa <_lseek_r+0x1e>
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	2000024c 	.word	0x2000024c

08007b00 <_read_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4604      	mov	r4, r0
 8007b04:	4608      	mov	r0, r1
 8007b06:	4611      	mov	r1, r2
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4d05      	ldr	r5, [pc, #20]	@ (8007b20 <_read_r+0x20>)
 8007b0c:	602a      	str	r2, [r5, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f7f8 fdc0 	bl	8000694 <_read>
 8007b14:	1c43      	adds	r3, r0, #1
 8007b16:	d102      	bne.n	8007b1e <_read_r+0x1e>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	b103      	cbz	r3, 8007b1e <_read_r+0x1e>
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	bd38      	pop	{r3, r4, r5, pc}
 8007b20:	2000024c 	.word	0x2000024c

08007b24 <_sbrk_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	2300      	movs	r3, #0
 8007b28:	4d05      	ldr	r5, [pc, #20]	@ (8007b40 <_sbrk_r+0x1c>)
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	602b      	str	r3, [r5, #0]
 8007b30:	f7f8 fe8a 	bl	8000848 <_sbrk>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_sbrk_r+0x1a>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_sbrk_r+0x1a>
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	2000024c 	.word	0x2000024c

08007b44 <_write_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4604      	mov	r4, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	4d05      	ldr	r5, [pc, #20]	@ (8007b64 <_write_r+0x20>)
 8007b50:	602a      	str	r2, [r5, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	f7f8 fdbb 	bl	80006ce <_write>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_write_r+0x1e>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_write_r+0x1e>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	2000024c 	.word	0x2000024c

08007b68 <_close_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	4d05      	ldr	r5, [pc, #20]	@ (8007b84 <_close_r+0x1c>)
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4608      	mov	r0, r1
 8007b72:	602b      	str	r3, [r5, #0]
 8007b74:	f7f8 fdc7 	bl	8000706 <_close>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d102      	bne.n	8007b82 <_close_r+0x1a>
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	b103      	cbz	r3, 8007b82 <_close_r+0x1a>
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
 8007b84:	2000024c 	.word	0x2000024c

08007b88 <_reclaim_reent>:
 8007b88:	4b2d      	ldr	r3, [pc, #180]	@ (8007c40 <_reclaim_reent+0xb8>)
 8007b8a:	b570      	push	{r4, r5, r6, lr}
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4604      	mov	r4, r0
 8007b90:	4283      	cmp	r3, r0
 8007b92:	d053      	beq.n	8007c3c <_reclaim_reent+0xb4>
 8007b94:	69c3      	ldr	r3, [r0, #28]
 8007b96:	b31b      	cbz	r3, 8007be0 <_reclaim_reent+0x58>
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	b163      	cbz	r3, 8007bb6 <_reclaim_reent+0x2e>
 8007b9c:	2500      	movs	r5, #0
 8007b9e:	69e3      	ldr	r3, [r4, #28]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	5959      	ldr	r1, [r3, r5]
 8007ba4:	b9b1      	cbnz	r1, 8007bd4 <_reclaim_reent+0x4c>
 8007ba6:	3504      	adds	r5, #4
 8007ba8:	2d80      	cmp	r5, #128	@ 0x80
 8007baa:	d1f8      	bne.n	8007b9e <_reclaim_reent+0x16>
 8007bac:	69e3      	ldr	r3, [r4, #28]
 8007bae:	4620      	mov	r0, r4
 8007bb0:	68d9      	ldr	r1, [r3, #12]
 8007bb2:	f000 f875 	bl	8007ca0 <_free_r>
 8007bb6:	69e3      	ldr	r3, [r4, #28]
 8007bb8:	6819      	ldr	r1, [r3, #0]
 8007bba:	b111      	cbz	r1, 8007bc2 <_reclaim_reent+0x3a>
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 f86f 	bl	8007ca0 <_free_r>
 8007bc2:	69e3      	ldr	r3, [r4, #28]
 8007bc4:	689d      	ldr	r5, [r3, #8]
 8007bc6:	b15d      	cbz	r5, 8007be0 <_reclaim_reent+0x58>
 8007bc8:	4629      	mov	r1, r5
 8007bca:	4620      	mov	r0, r4
 8007bcc:	682d      	ldr	r5, [r5, #0]
 8007bce:	f000 f867 	bl	8007ca0 <_free_r>
 8007bd2:	e7f8      	b.n	8007bc6 <_reclaim_reent+0x3e>
 8007bd4:	680e      	ldr	r6, [r1, #0]
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 f862 	bl	8007ca0 <_free_r>
 8007bdc:	4631      	mov	r1, r6
 8007bde:	e7e1      	b.n	8007ba4 <_reclaim_reent+0x1c>
 8007be0:	6961      	ldr	r1, [r4, #20]
 8007be2:	b111      	cbz	r1, 8007bea <_reclaim_reent+0x62>
 8007be4:	4620      	mov	r0, r4
 8007be6:	f000 f85b 	bl	8007ca0 <_free_r>
 8007bea:	69e1      	ldr	r1, [r4, #28]
 8007bec:	b111      	cbz	r1, 8007bf4 <_reclaim_reent+0x6c>
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 f856 	bl	8007ca0 <_free_r>
 8007bf4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007bf6:	b111      	cbz	r1, 8007bfe <_reclaim_reent+0x76>
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f000 f851 	bl	8007ca0 <_free_r>
 8007bfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c00:	b111      	cbz	r1, 8007c08 <_reclaim_reent+0x80>
 8007c02:	4620      	mov	r0, r4
 8007c04:	f000 f84c 	bl	8007ca0 <_free_r>
 8007c08:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007c0a:	b111      	cbz	r1, 8007c12 <_reclaim_reent+0x8a>
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 f847 	bl	8007ca0 <_free_r>
 8007c12:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007c14:	b111      	cbz	r1, 8007c1c <_reclaim_reent+0x94>
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 f842 	bl	8007ca0 <_free_r>
 8007c1c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c1e:	b111      	cbz	r1, 8007c26 <_reclaim_reent+0x9e>
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 f83d 	bl	8007ca0 <_free_r>
 8007c26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007c28:	b111      	cbz	r1, 8007c30 <_reclaim_reent+0xa8>
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 f838 	bl	8007ca0 <_free_r>
 8007c30:	6a23      	ldr	r3, [r4, #32]
 8007c32:	b11b      	cbz	r3, 8007c3c <_reclaim_reent+0xb4>
 8007c34:	4620      	mov	r0, r4
 8007c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c3a:	4718      	bx	r3
 8007c3c:	bd70      	pop	{r4, r5, r6, pc}
 8007c3e:	bf00      	nop
 8007c40:	20000020 	.word	0x20000020

08007c44 <_fstat_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	2300      	movs	r3, #0
 8007c48:	4d06      	ldr	r5, [pc, #24]	@ (8007c64 <_fstat_r+0x20>)
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	4608      	mov	r0, r1
 8007c4e:	4611      	mov	r1, r2
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	f7f8 fd63 	bl	800071c <_fstat>
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	d102      	bne.n	8007c60 <_fstat_r+0x1c>
 8007c5a:	682b      	ldr	r3, [r5, #0]
 8007c5c:	b103      	cbz	r3, 8007c60 <_fstat_r+0x1c>
 8007c5e:	6023      	str	r3, [r4, #0]
 8007c60:	bd38      	pop	{r3, r4, r5, pc}
 8007c62:	bf00      	nop
 8007c64:	2000024c 	.word	0x2000024c

08007c68 <memchr>:
 8007c68:	4603      	mov	r3, r0
 8007c6a:	b510      	push	{r4, lr}
 8007c6c:	b2c9      	uxtb	r1, r1
 8007c6e:	4402      	add	r2, r0
 8007c70:	4293      	cmp	r3, r2
 8007c72:	4618      	mov	r0, r3
 8007c74:	d101      	bne.n	8007c7a <memchr+0x12>
 8007c76:	2000      	movs	r0, #0
 8007c78:	e003      	b.n	8007c82 <memchr+0x1a>
 8007c7a:	7804      	ldrb	r4, [r0, #0]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	428c      	cmp	r4, r1
 8007c80:	d1f6      	bne.n	8007c70 <memchr+0x8>
 8007c82:	bd10      	pop	{r4, pc}

08007c84 <memcpy>:
 8007c84:	440a      	add	r2, r1
 8007c86:	4291      	cmp	r1, r2
 8007c88:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007c8c:	d100      	bne.n	8007c90 <memcpy+0xc>
 8007c8e:	4770      	bx	lr
 8007c90:	b510      	push	{r4, lr}
 8007c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c96:	4291      	cmp	r1, r2
 8007c98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c9c:	d1f9      	bne.n	8007c92 <memcpy+0xe>
 8007c9e:	bd10      	pop	{r4, pc}

08007ca0 <_free_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	d040      	beq.n	8007d2a <_free_r+0x8a>
 8007ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cac:	1f0c      	subs	r4, r1, #4
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bfb8      	it	lt
 8007cb2:	18e4      	addlt	r4, r4, r3
 8007cb4:	f7ff fc4c 	bl	8007550 <__malloc_lock>
 8007cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d2c <_free_r+0x8c>)
 8007cba:	6813      	ldr	r3, [r2, #0]
 8007cbc:	b933      	cbnz	r3, 8007ccc <_free_r+0x2c>
 8007cbe:	6063      	str	r3, [r4, #4]
 8007cc0:	6014      	str	r4, [r2, #0]
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cc8:	f7ff bc48 	b.w	800755c <__malloc_unlock>
 8007ccc:	42a3      	cmp	r3, r4
 8007cce:	d908      	bls.n	8007ce2 <_free_r+0x42>
 8007cd0:	6820      	ldr	r0, [r4, #0]
 8007cd2:	1821      	adds	r1, r4, r0
 8007cd4:	428b      	cmp	r3, r1
 8007cd6:	bf01      	itttt	eq
 8007cd8:	6819      	ldreq	r1, [r3, #0]
 8007cda:	685b      	ldreq	r3, [r3, #4]
 8007cdc:	1809      	addeq	r1, r1, r0
 8007cde:	6021      	streq	r1, [r4, #0]
 8007ce0:	e7ed      	b.n	8007cbe <_free_r+0x1e>
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	b10b      	cbz	r3, 8007cec <_free_r+0x4c>
 8007ce8:	42a3      	cmp	r3, r4
 8007cea:	d9fa      	bls.n	8007ce2 <_free_r+0x42>
 8007cec:	6811      	ldr	r1, [r2, #0]
 8007cee:	1850      	adds	r0, r2, r1
 8007cf0:	42a0      	cmp	r0, r4
 8007cf2:	d10b      	bne.n	8007d0c <_free_r+0x6c>
 8007cf4:	6820      	ldr	r0, [r4, #0]
 8007cf6:	4401      	add	r1, r0
 8007cf8:	1850      	adds	r0, r2, r1
 8007cfa:	4283      	cmp	r3, r0
 8007cfc:	6011      	str	r1, [r2, #0]
 8007cfe:	d1e0      	bne.n	8007cc2 <_free_r+0x22>
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	4408      	add	r0, r1
 8007d06:	6010      	str	r0, [r2, #0]
 8007d08:	6053      	str	r3, [r2, #4]
 8007d0a:	e7da      	b.n	8007cc2 <_free_r+0x22>
 8007d0c:	d902      	bls.n	8007d14 <_free_r+0x74>
 8007d0e:	230c      	movs	r3, #12
 8007d10:	602b      	str	r3, [r5, #0]
 8007d12:	e7d6      	b.n	8007cc2 <_free_r+0x22>
 8007d14:	6820      	ldr	r0, [r4, #0]
 8007d16:	1821      	adds	r1, r4, r0
 8007d18:	428b      	cmp	r3, r1
 8007d1a:	bf01      	itttt	eq
 8007d1c:	6819      	ldreq	r1, [r3, #0]
 8007d1e:	685b      	ldreq	r3, [r3, #4]
 8007d20:	1809      	addeq	r1, r1, r0
 8007d22:	6021      	streq	r1, [r4, #0]
 8007d24:	6063      	str	r3, [r4, #4]
 8007d26:	6054      	str	r4, [r2, #4]
 8007d28:	e7cb      	b.n	8007cc2 <_free_r+0x22>
 8007d2a:	bd38      	pop	{r3, r4, r5, pc}
 8007d2c:	20000248 	.word	0x20000248

08007d30 <_realloc_r>:
 8007d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d34:	4607      	mov	r7, r0
 8007d36:	4614      	mov	r4, r2
 8007d38:	460d      	mov	r5, r1
 8007d3a:	b921      	cbnz	r1, 8007d46 <_realloc_r+0x16>
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d42:	f7ff b939 	b.w	8006fb8 <_malloc_r>
 8007d46:	b92a      	cbnz	r2, 8007d54 <_realloc_r+0x24>
 8007d48:	f7ff ffaa 	bl	8007ca0 <_free_r>
 8007d4c:	4625      	mov	r5, r4
 8007d4e:	4628      	mov	r0, r5
 8007d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d54:	f000 f81a 	bl	8007d8c <_malloc_usable_size_r>
 8007d58:	4284      	cmp	r4, r0
 8007d5a:	4606      	mov	r6, r0
 8007d5c:	d802      	bhi.n	8007d64 <_realloc_r+0x34>
 8007d5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d62:	d8f4      	bhi.n	8007d4e <_realloc_r+0x1e>
 8007d64:	4621      	mov	r1, r4
 8007d66:	4638      	mov	r0, r7
 8007d68:	f7ff f926 	bl	8006fb8 <_malloc_r>
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	b908      	cbnz	r0, 8007d74 <_realloc_r+0x44>
 8007d70:	4645      	mov	r5, r8
 8007d72:	e7ec      	b.n	8007d4e <_realloc_r+0x1e>
 8007d74:	42b4      	cmp	r4, r6
 8007d76:	4622      	mov	r2, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	bf28      	it	cs
 8007d7c:	4632      	movcs	r2, r6
 8007d7e:	f7ff ff81 	bl	8007c84 <memcpy>
 8007d82:	4629      	mov	r1, r5
 8007d84:	4638      	mov	r0, r7
 8007d86:	f7ff ff8b 	bl	8007ca0 <_free_r>
 8007d8a:	e7f1      	b.n	8007d70 <_realloc_r+0x40>

08007d8c <_malloc_usable_size_r>:
 8007d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d90:	1f18      	subs	r0, r3, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bfbc      	itt	lt
 8007d96:	580b      	ldrlt	r3, [r1, r0]
 8007d98:	18c0      	addlt	r0, r0, r3
 8007d9a:	4770      	bx	lr

08007d9c <__EH_FRAME_BEGIN__>:
 8007d9c:	0000 0000                                   ....

08007da0 <_init>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr

08007dac <_fini>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr
